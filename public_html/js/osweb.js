this.createjs=this.createjs||{},createjs.extend=function(t,e){"use strict";function i(){this.constructor=t}return i.prototype=e.prototype,t.prototype=new i},this.createjs=this.createjs||{},createjs.promote=function(t,e){"use strict";var i=t.prototype,s=Object.getPrototypeOf&&Object.getPrototypeOf(i)||i.__proto__;if(s){i[(e+="_")+"constructor"]=s.constructor;for(var r in s)i.hasOwnProperty(r)&&"function"==typeof s[r]&&(i[e+r]=s[r])}return t},this.createjs=this.createjs||{},createjs.indexOf=function(t,e){"use strict";for(var i=0,s=t.length;s>i;i++)if(e===t[i])return i;return-1},this.createjs=this.createjs||{},function(){"use strict";function t(t,e,i){this.type=t,this.target=null,this.currentTarget=null,this.eventPhase=0,this.bubbles=!!e,this.cancelable=!!i,this.timeStamp=(new Date).getTime(),this.defaultPrevented=!1,this.propagationStopped=!1,this.immediatePropagationStopped=!1,this.removed=!1}var e=t.prototype;e.preventDefault=function(){this.defaultPrevented=this.cancelable&&!0},e.stopPropagation=function(){this.propagationStopped=!0},e.stopImmediatePropagation=function(){this.immediatePropagationStopped=this.propagationStopped=!0},e.remove=function(){this.removed=!0},e.clone=function(){return new t(this.type,this.bubbles,this.cancelable)},e.set=function(t){for(var e in t)this[e]=t[e];return this},e.toString=function(){return"[Event (type="+this.type+")]"},createjs.Event=t}(),this.createjs=this.createjs||{},function(){"use strict";function t(){this._listeners=null,this._captureListeners=null}var e=t.prototype;t.initialize=function(t){t.addEventListener=e.addEventListener,t.on=e.on,t.removeEventListener=t.off=e.removeEventListener,t.removeAllEventListeners=e.removeAllEventListeners,t.hasEventListener=e.hasEventListener,t.dispatchEvent=e.dispatchEvent,t._dispatchEvent=e._dispatchEvent,t.willTrigger=e.willTrigger},e.addEventListener=function(t,e,i){var s;s=i?this._captureListeners=this._captureListeners||{}:this._listeners=this._listeners||{};var r=s[t];return r&&this.removeEventListener(t,e,i),r=s[t],r?r.push(e):s[t]=[e],e},e.on=function(t,e,i,s,r,n){return e.handleEvent&&(i=i||e,e=e.handleEvent),i=i||this,this.addEventListener(t,function(t){e.call(i,t,r),s&&t.remove()},n)},e.removeEventListener=function(t,e,i){var s=i?this._captureListeners:this._listeners;if(s){var r=s[t];if(r)for(var n=0,a=r.length;a>n;n++)if(r[n]==e){1==a?delete s[t]:r.splice(n,1);break}}},e.off=e.removeEventListener,e.removeAllEventListeners=function(t){t?(this._listeners&&delete this._listeners[t],this._captureListeners&&delete this._captureListeners[t]):this._listeners=this._captureListeners=null},e.dispatchEvent=function(t,e,i){if("string"==typeof t){var s=this._listeners;if(!(e||s&&s[t]))return!0;t=new createjs.Event(t,e,i)}else t.target&&t.clone&&(t=t.clone());try{t.target=this}catch(r){}if(t.bubbles&&this.parent){for(var n=this,a=[n];n.parent;)a.push(n=n.parent);var o,h=a.length;for(o=h-1;o>=0&&!t.propagationStopped;o--)a[o]._dispatchEvent(t,1+(0==o));for(o=1;h>o&&!t.propagationStopped;o++)a[o]._dispatchEvent(t,3)}else this._dispatchEvent(t,2);return!t.defaultPrevented},e.hasEventListener=function(t){var e=this._listeners,i=this._captureListeners;return!!(e&&e[t]||i&&i[t])},e.willTrigger=function(t){for(var e=this;e;){if(e.hasEventListener(t))return!0;e=e.parent}return!1},e.toString=function(){return"[EventDispatcher]"},e._dispatchEvent=function(t,e){var i,s=1==e?this._captureListeners:this._listeners;if(t&&s){var r=s[t.type];if(!r||!(i=r.length))return;try{t.currentTarget=this}catch(n){}try{t.eventPhase=e}catch(n){}t.removed=!1,r=r.slice();for(var a=0;i>a&&!t.immediatePropagationStopped;a++){var o=r[a];o.handleEvent?o.handleEvent(t):o(t),t.removed&&(this.off(t.type,o,1==e),t.removed=!1)}}},createjs.EventDispatcher=t}(),this.createjs=this.createjs||{},function(){"use strict";function t(){throw"Ticker cannot be instantiated."}t.RAF_SYNCHED="synched",t.RAF="raf",t.TIMEOUT="timeout",t.useRAF=!1,t.timingMode=null,t.maxDelta=0,t.paused=!1,t.removeEventListener=null,t.removeAllEventListeners=null,t.dispatchEvent=null,t.hasEventListener=null,t._listeners=null,createjs.EventDispatcher.initialize(t),t._addEventListener=t.addEventListener,t.addEventListener=function(){return!t._inited&&t.init(),t._addEventListener.apply(t,arguments)},t._inited=!1,t._startTime=0,t._pausedTime=0,t._ticks=0,t._pausedTicks=0,t._interval=50,t._lastTime=0,t._times=null,t._tickTimes=null,t._timerId=null,t._raf=!0,t.setInterval=function(e){t._interval=e,t._inited&&t._setupTick()},t.getInterval=function(){return t._interval},t.setFPS=function(e){t.setInterval(1e3/e)},t.getFPS=function(){return 1e3/t._interval};try{Object.defineProperties(t,{interval:{get:t.getInterval,set:t.setInterval},framerate:{get:t.getFPS,set:t.setFPS}})}catch(e){console.log(e)}t.init=function(){t._inited||(t._inited=!0,t._times=[],t._tickTimes=[],t._startTime=t._getTime(),t._times.push(t._lastTime=0),t.interval=t._interval)},t.reset=function(){if(t._raf){var e=window.cancelAnimationFrame||window.webkitCancelAnimationFrame||window.mozCancelAnimationFrame||window.oCancelAnimationFrame||window.msCancelAnimationFrame;e&&e(t._timerId)}else clearTimeout(t._timerId);t.removeAllEventListeners("tick"),t._timerId=t._times=t._tickTimes=null,t._startTime=t._lastTime=t._ticks=0,t._inited=!1},t.getMeasuredTickTime=function(e){var i=0,s=t._tickTimes;if(!s||s.length<1)return-1;e=Math.min(s.length,e||0|t.getFPS());for(var r=0;e>r;r++)i+=s[r];return i/e},t.getMeasuredFPS=function(e){var i=t._times;return!i||i.length<2?-1:(e=Math.min(i.length-1,e||0|t.getFPS()),1e3/((i[0]-i[e])/e))},t.setPaused=function(e){t.paused=e},t.getPaused=function(){return t.paused},t.getTime=function(e){return t._startTime?t._getTime()-(e?t._pausedTime:0):-1},t.getEventTime=function(e){return t._startTime?(t._lastTime||t._startTime)-(e?t._pausedTime:0):-1},t.getTicks=function(e){return t._ticks-(e?t._pausedTicks:0)},t._handleSynch=function(){t._timerId=null,t._setupTick(),t._getTime()-t._lastTime>=.97*(t._interval-1)&&t._tick()},t._handleRAF=function(){t._timerId=null,t._setupTick(),t._tick()},t._handleTimeout=function(){t._timerId=null,t._setupTick(),t._tick()},t._setupTick=function(){if(null==t._timerId){var e=t.timingMode||t.useRAF&&t.RAF_SYNCHED;if(e==t.RAF_SYNCHED||e==t.RAF){var i=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame;if(i)return t._timerId=i(e==t.RAF?t._handleRAF:t._handleSynch),void(t._raf=!0)}t._raf=!1,t._timerId=setTimeout(t._handleTimeout,t._interval)}},t._tick=function(){var e=t.paused,i=t._getTime(),s=i-t._lastTime;if(t._lastTime=i,t._ticks++,e&&(t._pausedTicks++,t._pausedTime+=s),t.hasEventListener("tick")){var r=new createjs.Event("tick"),n=t.maxDelta;r.delta=n&&s>n?n:s,r.paused=e,r.time=i,r.runTime=i-t._pausedTime,t.dispatchEvent(r)}for(t._tickTimes.unshift(t._getTime()-i);t._tickTimes.length>100;)t._tickTimes.pop();for(t._times.unshift(i);t._times.length>100;)t._times.pop()};var i=window.performance&&(performance.now||performance.mozNow||performance.msNow||performance.oNow||performance.webkitNow);t._getTime=function(){return(i&&i.call(performance)||(new Date).getTime())-t._startTime},createjs.Ticker=t}(),this.createjs=this.createjs||{},function(){"use strict";function t(){throw"UID cannot be instantiated"}t._nextID=0,t.get=function(){return t._nextID++},createjs.UID=t}(),this.createjs=this.createjs||{},function(){"use strict";function t(t,e,i,s,r,n,a,o,h,c,u){this.Event_constructor(t,e,i),this.stageX=s,this.stageY=r,this.rawX=null==h?s:h,this.rawY=null==c?r:c,this.nativeEvent=n,this.pointerID=a,this.primary=!!o,this.relatedTarget=u}var e=createjs.extend(t,createjs.Event);e._get_localX=function(){return this.currentTarget.globalToLocal(this.rawX,this.rawY).x},e._get_localY=function(){return this.currentTarget.globalToLocal(this.rawX,this.rawY).y},e._get_isTouch=function(){return-1!==this.pointerID};try{Object.defineProperties(e,{localX:{get:e._get_localX},localY:{get:e._get_localY},isTouch:{get:e._get_isTouch}})}catch(i){}e.clone=function(){return new t(this.type,this.bubbles,this.cancelable,this.stageX,this.stageY,this.nativeEvent,this.pointerID,this.primary,this.rawX,this.rawY)},e.toString=function(){return"[MouseEvent (type="+this.type+" stageX="+this.stageX+" stageY="+this.stageY+")]"},createjs.MouseEvent=createjs.promote(t,"Event")}(),this.createjs=this.createjs||{},function(){"use strict";function t(t,e,i,s,r,n){this.setValues(t,e,i,s,r,n)}var e=t.prototype;t.DEG_TO_RAD=Math.PI/180,t.identity=null,e.setValues=function(t,e,i,s,r,n){return this.a=null==t?1:t,this.b=e||0,this.c=i||0,this.d=null==s?1:s,this.tx=r||0,this.ty=n||0,this},e.append=function(t,e,i,s,r,n){var a=this.a,o=this.b,h=this.c,c=this.d;return(1!=t||0!=e||0!=i||1!=s)&&(this.a=a*t+h*e,this.b=o*t+c*e,this.c=a*i+h*s,this.d=o*i+c*s),this.tx=a*r+h*n+this.tx,this.ty=o*r+c*n+this.ty,this},e.prepend=function(t,e,i,s,r,n){var a=this.a,o=this.c,h=this.tx;return this.a=t*a+i*this.b,this.b=e*a+s*this.b,this.c=t*o+i*this.d,this.d=e*o+s*this.d,this.tx=t*h+i*this.ty+r,this.ty=e*h+s*this.ty+n,this},e.appendMatrix=function(t){return this.append(t.a,t.b,t.c,t.d,t.tx,t.ty)},e.prependMatrix=function(t){return this.prepend(t.a,t.b,t.c,t.d,t.tx,t.ty)},e.appendTransform=function(e,i,s,r,n,a,o,h,c){if(n%360)var u=n*t.DEG_TO_RAD,l=Math.cos(u),d=Math.sin(u);else l=1,d=0;return a||o?(a*=t.DEG_TO_RAD,o*=t.DEG_TO_RAD,this.append(Math.cos(o),Math.sin(o),-Math.sin(a),Math.cos(a),e,i),this.append(l*s,d*s,-d*r,l*r,0,0)):this.append(l*s,d*s,-d*r,l*r,e,i),(h||c)&&(this.tx-=h*this.a+c*this.c,this.ty-=h*this.b+c*this.d),this},e.prependTransform=function(e,i,s,r,n,a,o,h,c){if(n%360)var u=n*t.DEG_TO_RAD,l=Math.cos(u),d=Math.sin(u);else l=1,d=0;return(h||c)&&(this.tx-=h,this.ty-=c),a||o?(a*=t.DEG_TO_RAD,o*=t.DEG_TO_RAD,this.prepend(l*s,d*s,-d*r,l*r,0,0),this.prepend(Math.cos(o),Math.sin(o),-Math.sin(a),Math.cos(a),e,i)):this.prepend(l*s,d*s,-d*r,l*r,e,i),this},e.rotate=function(e){e*=t.DEG_TO_RAD;var i=Math.cos(e),s=Math.sin(e),r=this.a,n=this.b;return this.a=r*i+this.c*s,this.b=n*i+this.d*s,this.c=-r*s+this.c*i,this.d=-n*s+this.d*i,this},e.skew=function(e,i){return e*=t.DEG_TO_RAD,i*=t.DEG_TO_RAD,this.append(Math.cos(i),Math.sin(i),-Math.sin(e),Math.cos(e),0,0),this},e.scale=function(t,e){return this.a*=t,this.b*=t,this.c*=e,this.d*=e,this},e.translate=function(t,e){return this.tx+=this.a*t+this.c*e,this.ty+=this.b*t+this.d*e,this},e.identity=function(){return this.a=this.d=1,this.b=this.c=this.tx=this.ty=0,this},e.invert=function(){var t=this.a,e=this.b,i=this.c,s=this.d,r=this.tx,n=t*s-e*i;return this.a=s/n,this.b=-e/n,this.c=-i/n,this.d=t/n,this.tx=(i*this.ty-s*r)/n,this.ty=-(t*this.ty-e*r)/n,this},e.isIdentity=function(){return 0===this.tx&&0===this.ty&&1===this.a&&0===this.b&&0===this.c&&1===this.d},e.equals=function(t){return this.tx===t.tx&&this.ty===t.ty&&this.a===t.a&&this.b===t.b&&this.c===t.c&&this.d===t.d},e.transformPoint=function(t,e,i){return i=i||{},i.x=t*this.a+e*this.c+this.tx,i.y=t*this.b+e*this.d+this.ty,i},e.decompose=function(e){null==e&&(e={}),e.x=this.tx,e.y=this.ty,e.scaleX=Math.sqrt(this.a*this.a+this.b*this.b),e.scaleY=Math.sqrt(this.c*this.c+this.d*this.d);var i=Math.atan2(-this.c,this.d),s=Math.atan2(this.b,this.a),r=Math.abs(1-i/s);return 1e-5>r?(e.rotation=s/t.DEG_TO_RAD,this.a<0&&this.d>=0&&(e.rotation+=e.rotation<=0?180:-180),e.skewX=e.skewY=0):(e.skewX=i/t.DEG_TO_RAD,e.skewY=s/t.DEG_TO_RAD),e},e.copy=function(t){return this.setValues(t.a,t.b,t.c,t.d,t.tx,t.ty)},e.clone=function(){return new t(this.a,this.b,this.c,this.d,this.tx,this.ty)},e.toString=function(){return"[Matrix2D (a="+this.a+" b="+this.b+" c="+this.c+" d="+this.d+" tx="+this.tx+" ty="+this.ty+")]"},t.identity=new t,createjs.Matrix2D=t}(),this.createjs=this.createjs||{},function(){"use strict";function t(t,e,i,s,r){this.setValues(t,e,i,s,r)}var e=t.prototype;e.setValues=function(t,e,i,s,r){return this.visible=null==t||!!t,this.alpha=null==e?1:e,this.shadow=i,this.compositeOperation=s,this.matrix=r||this.matrix&&this.matrix.identity()||new createjs.Matrix2D,this},e.append=function(t,e,i,s,r){return this.alpha*=e,this.shadow=i||this.shadow,this.compositeOperation=s||this.compositeOperation,this.visible=this.visible&&t,r&&this.matrix.appendMatrix(r),this},e.prepend=function(t,e,i,s,r){return this.alpha*=e,this.shadow=this.shadow||i,this.compositeOperation=this.compositeOperation||s,this.visible=this.visible&&t,r&&this.matrix.prependMatrix(r),this},e.identity=function(){return this.visible=!0,this.alpha=1,this.shadow=this.compositeOperation=null,this.matrix.identity(),this},e.clone=function(){return new t(this.alpha,this.shadow,this.compositeOperation,this.visible,this.matrix.clone())},createjs.DisplayProps=t}(),this.createjs=this.createjs||{},function(){"use strict";function t(t,e){this.setValues(t,e)}var e=t.prototype;e.setValues=function(t,e){return this.x=t||0,this.y=e||0,this},e.copy=function(t){return this.x=t.x,this.y=t.y,this},e.clone=function(){return new t(this.x,this.y)},e.toString=function(){return"[Point (x="+this.x+" y="+this.y+")]"},createjs.Point=t}(),this.createjs=this.createjs||{},function(){"use strict";function t(t,e,i,s){this.setValues(t,e,i,s)}var e=t.prototype;e.setValues=function(t,e,i,s){return this.x=t||0,this.y=e||0,this.width=i||0,this.height=s||0,this},e.extend=function(t,e,i,s){return i=i||0,s=s||0,t+i>this.x+this.width&&(this.width=t+i-this.x),e+s>this.y+this.height&&(this.height=e+s-this.y),t<this.x&&(this.width+=this.x-t,this.x=t),e<this.y&&(this.height+=this.y-e,this.y=e),this},e.pad=function(t,e,i,s){return this.x-=e,this.y-=t,this.width+=e+s,this.height+=t+i,this},e.copy=function(t){return this.setValues(t.x,t.y,t.width,t.height)},e.contains=function(t,e,i,s){return i=i||0,s=s||0,t>=this.x&&t+i<=this.x+this.width&&e>=this.y&&e+s<=this.y+this.height},e.union=function(t){return this.clone().extend(t.x,t.y,t.width,t.height)},e.intersection=function(e){var i=e.x,s=e.y,r=i+e.width,n=s+e.height;return this.x>i&&(i=this.x),this.y>s&&(s=this.y),this.x+this.width<r&&(r=this.x+this.width),this.y+this.height<n&&(n=this.y+this.height),i>=r||s>=n?null:new t(i,s,r-i,n-s)},e.intersects=function(t){return t.x<=this.x+this.width&&this.x<=t.x+t.width&&t.y<=this.y+this.height&&this.y<=t.y+t.height},e.isEmpty=function(){return this.width<=0||this.height<=0},e.clone=function(){return new t(this.x,this.y,this.width,this.height)},e.toString=function(){return"[Rectangle (x="+this.x+" y="+this.y+" width="+this.width+" height="+this.height+")]"},createjs.Rectangle=t}(),this.createjs=this.createjs||{},function(){"use strict";function t(t,e,i,s,r,n,a){t.addEventListener&&(this.target=t,this.overLabel=null==i?"over":i,this.outLabel=null==e?"out":e,this.downLabel=null==s?"down":s,this.play=r,this._isPressed=!1,this._isOver=!1,this._enabled=!1,t.mouseChildren=!1,this.enabled=!0,this.handleEvent({}),n&&(a&&(n.actionsEnabled=!1,n.gotoAndStop&&n.gotoAndStop(a)),t.hitArea=n))}var e=t.prototype;e.setEnabled=function(t){if(t!=this._enabled){var e=this.target;this._enabled=t,t?(e.cursor="pointer",e.addEventListener("rollover",this),e.addEventListener("rollout",this),e.addEventListener("mousedown",this),e.addEventListener("pressup",this),e._reset&&(e.__reset=e._reset,e._reset=this._reset)):(e.cursor=null,e.removeEventListener("rollover",this),e.removeEventListener("rollout",this),e.removeEventListener("mousedown",this),e.removeEventListener("pressup",this),e.__reset&&(e._reset=e.__reset,delete e.__reset))}},e.getEnabled=function(){return this._enabled};try{Object.defineProperties(e,{enabled:{get:e.getEnabled,set:e.setEnabled}})}catch(i){}e.toString=function(){return"[ButtonHelper]"},e.handleEvent=function(t){var e,i=this.target,s=t.type;"mousedown"==s?(this._isPressed=!0,e=this.downLabel):"pressup"==s?(this._isPressed=!1,e=this._isOver?this.overLabel:this.outLabel):"rollover"==s?(this._isOver=!0,e=this._isPressed?this.downLabel:this.overLabel):(this._isOver=!1,e=this._isPressed?this.overLabel:this.outLabel),this.play?i.gotoAndPlay&&i.gotoAndPlay(e):i.gotoAndStop&&i.gotoAndStop(e)},e._reset=function(){var t=this.paused;this.__reset(),this.paused=t},createjs.ButtonHelper=t}(),this.createjs=this.createjs||{},function(){"use strict";function t(t,e,i,s){this.color=t||"black",this.offsetX=e||0,this.offsetY=i||0,this.blur=s||0}var e=t.prototype;t.identity=new t("transparent",0,0,0),e.toString=function(){return"[Shadow]"},e.clone=function(){return new t(this.color,this.offsetX,this.offsetY,this.blur)},createjs.Shadow=t}(),this.createjs=this.createjs||{},function(){"use strict";function t(t){this.EventDispatcher_constructor(),this.complete=!0,this.framerate=0,this._animations=null,this._frames=null,this._images=null,this._data=null,this._loadCount=0,this._frameHeight=0,this._frameWidth=0,this._numFrames=0,this._regX=0,this._regY=0,this._spacing=0,this._margin=0,this._parseData(t)}var e=createjs.extend(t,createjs.EventDispatcher);e.getAnimations=function(){return this._animations.slice()};try{Object.defineProperties(e,{animations:{get:e.getAnimations}})}catch(i){}e.getNumFrames=function(t){if(null==t)return this._frames?this._frames.length:this._numFrames||0;var e=this._data[t];return null==e?0:e.frames.length},e.getAnimation=function(t){return this._data[t]},e.getFrame=function(t){var e;return this._frames&&(e=this._frames[t])?e:null},e.getFrameBounds=function(t,e){var i=this.getFrame(t);return i?(e||new createjs.Rectangle).setValues(-i.regX,-i.regY,i.rect.width,i.rect.height):null},e.toString=function(){return"[SpriteSheet]"},e.clone=function(){throw"SpriteSheet cannot be cloned."},e._parseData=function(t){var e,i,s,r;if(null!=t){if(this.framerate=t.framerate||0,t.images&&(i=t.images.length)>0)for(r=this._images=[],e=0;i>e;e++){var n=t.images[e];if("string"==typeof n){var a=n;n=document.createElement("img"),n.src=a}r.push(n),n.getContext||n.naturalWidth||(this._loadCount++,this.complete=!1,function(t,e){n.onload=function(){t._handleImageLoad(e)}}(this,a),function(t,e){n.onerror=function(){t._handleImageError(e)}}(this,a))}if(null==t.frames);else if(Array.isArray(t.frames))for(this._frames=[],r=t.frames,e=0,i=r.length;i>e;e++){var o=r[e];this._frames.push({image:this._images[o[4]?o[4]:0],rect:new createjs.Rectangle(o[0],o[1],o[2],o[3]),regX:o[5]||0,regY:o[6]||0})}else s=t.frames,this._frameWidth=s.width,this._frameHeight=s.height,this._regX=s.regX||0,this._regY=s.regY||0,this._spacing=s.spacing||0,this._margin=s.margin||0,this._numFrames=s.count,0==this._loadCount&&this._calculateFrames();if(this._animations=[],null!=(s=t.animations)){this._data={};var h;for(h in s){var c={name:h},u=s[h];if("number"==typeof u)r=c.frames=[u];else if(Array.isArray(u))if(1==u.length)c.frames=[u[0]];else for(c.speed=u[3],c.next=u[2],r=c.frames=[],e=u[0];e<=u[1];e++)r.push(e);else{c.speed=u.speed,c.next=u.next;var l=u.frames;r=c.frames="number"==typeof l?[l]:l.slice(0)}(c.next===!0||void 0===c.next)&&(c.next=h),(c.next===!1||r.length<2&&c.next==h)&&(c.next=null),c.speed||(c.speed=1),this._animations.push(h),this._data[h]=c}}}},e._handleImageLoad=function(t){0==--this._loadCount&&(this._calculateFrames(),this.complete=!0,this.dispatchEvent("complete"))},e._handleImageError=function(t){var e=new createjs.Event("error");e.src=t,this.dispatchEvent(e),0==--this._loadCount&&this.dispatchEvent("complete")},e._calculateFrames=function(){if(!this._frames&&0!=this._frameWidth){this._frames=[];var t=this._numFrames||1e5,e=0,i=this._frameWidth,s=this._frameHeight,r=this._spacing,n=this._margin;t:for(var a=0,o=this._images;a<o.length;a++)for(var h=o[a],c=h.width,u=h.height,l=n;u-n-s>=l;){for(var d=n;c-n-i>=d;){if(e>=t)break t;e++,this._frames.push({image:h,rect:new createjs.Rectangle(d,l,i,s),regX:this._regX,regY:this._regY}),d+=i+r}l+=s+r}this._numFrames=e}},createjs.SpriteSheet=createjs.promote(t,"EventDispatcher")}(),this.createjs=this.createjs||{},function(){"use strict";function t(){this.command=null,this._stroke=null,this._strokeStyle=null,this._oldStrokeStyle=null,this._strokeDash=null,this._oldStrokeDash=null,this._strokeIgnoreScale=!1,this._fill=null,this._instructions=[],this._commitIndex=0,this._activeInstructions=[],this._dirty=!1,this._storeIndex=0,this.clear()}var e=t.prototype,i=t;t.getRGB=function(t,e,i,s){return null!=t&&null==i&&(s=e,i=255&t,e=t>>8&255,t=t>>16&255),null==s?"rgb("+t+","+e+","+i+")":"rgba("+t+","+e+","+i+","+s+")"},t.getHSL=function(t,e,i,s){return null==s?"hsl("+t%360+","+e+"%,"+i+"%)":"hsla("+t%360+","+e+"%,"+i+"%,"+s+")"},t.BASE_64={A:0,B:1,C:2,D:3,E:4,F:5,G:6,H:7,I:8,J:9,K:10,L:11,M:12,N:13,O:14,P:15,Q:16,R:17,S:18,T:19,U:20,V:21,W:22,X:23,Y:24,Z:25,a:26,b:27,c:28,d:29,e:30,f:31,g:32,h:33,i:34,j:35,k:36,l:37,m:38,n:39,o:40,p:41,q:42,r:43,s:44,t:45,u:46,v:47,w:48,x:49,y:50,z:51,0:52,1:53,2:54,3:55,4:56,5:57,6:58,7:59,8:60,9:61,"+":62,"/":63},t.STROKE_CAPS_MAP=["butt","round","square"],t.STROKE_JOINTS_MAP=["miter","round","bevel"];var s=createjs.createCanvas?createjs.createCanvas():document.createElement("canvas");s.getContext&&(t._ctx=s.getContext("2d"),s.width=s.height=1),e.getInstructions=function(){return this._updateInstructions(),this._instructions};try{Object.defineProperties(e,{instructions:{get:e.getInstructions}})}catch(r){}e.isEmpty=function(){return!(this._instructions.length||this._activeInstructions.length)},e.draw=function(t,e){this._updateInstructions();for(var i=this._instructions,s=this._storeIndex,r=i.length;r>s;s++)i[s].exec(t,e)},e.drawAsPath=function(t){this._updateInstructions();for(var e,i=this._instructions,s=this._storeIndex,r=i.length;r>s;s++)(e=i[s]).path!==!1&&e.exec(t)},e.moveTo=function(t,e){return this.append(new i.MoveTo(t,e),!0)},e.lineTo=function(t,e){return this.append(new i.LineTo(t,e))},e.arcTo=function(t,e,s,r,n){return this.append(new i.ArcTo(t,e,s,r,n))},e.arc=function(t,e,s,r,n,a){return this.append(new i.Arc(t,e,s,r,n,a))},e.quadraticCurveTo=function(t,e,s,r){return this.append(new i.QuadraticCurveTo(t,e,s,r))},e.bezierCurveTo=function(t,e,s,r,n,a){return this.append(new i.BezierCurveTo(t,e,s,r,n,a))},e.rect=function(t,e,s,r){return this.append(new i.Rect(t,e,s,r))},e.closePath=function(){return this._activeInstructions.length?this.append(new i.ClosePath):this},e.clear=function(){return this._instructions.length=this._activeInstructions.length=this._commitIndex=0,this._strokeStyle=this._oldStrokeStyle=this._stroke=this._fill=this._strokeDash=this._oldStrokeDash=null,this._dirty=this._strokeIgnoreScale=!1,this},e.beginFill=function(t){return this._setFill(t?new i.Fill(t):null)},e.beginLinearGradientFill=function(t,e,s,r,n,a){return this._setFill((new i.Fill).linearGradient(t,e,s,r,n,a))},e.beginRadialGradientFill=function(t,e,s,r,n,a,o,h){return this._setFill((new i.Fill).radialGradient(t,e,s,r,n,a,o,h))},e.beginBitmapFill=function(t,e,s){return this._setFill(new i.Fill(null,s).bitmap(t,e))},e.endFill=function(){return this.beginFill()},e.setStrokeStyle=function(t,e,s,r,n){return this._updateInstructions(!0),this._strokeStyle=this.command=new i.StrokeStyle(t,e,s,r,n),this._stroke&&(this._stroke.ignoreScale=n),this._strokeIgnoreScale=n,this},e.setStrokeDash=function(t,e){return this._updateInstructions(!0),this._strokeDash=this.command=new i.StrokeDash(t,e),this},e.beginStroke=function(t){return this._setStroke(t?new i.Stroke(t):null)},e.beginLinearGradientStroke=function(t,e,s,r,n,a){return this._setStroke((new i.Stroke).linearGradient(t,e,s,r,n,a))},e.beginRadialGradientStroke=function(t,e,s,r,n,a,o,h){return this._setStroke((new i.Stroke).radialGradient(t,e,s,r,n,a,o,h))},e.beginBitmapStroke=function(t,e){return this._setStroke((new i.Stroke).bitmap(t,e))},e.endStroke=function(){return this.beginStroke()},e.curveTo=e.quadraticCurveTo,e.drawRect=e.rect,e.drawRoundRect=function(t,e,i,s,r){return this.drawRoundRectComplex(t,e,i,s,r,r,r,r)},e.drawRoundRectComplex=function(t,e,s,r,n,a,o,h){return this.append(new i.RoundRect(t,e,s,r,n,a,o,h))},e.drawCircle=function(t,e,s){return this.append(new i.Circle(t,e,s))},e.drawEllipse=function(t,e,s,r){return this.append(new i.Ellipse(t,e,s,r))},e.drawPolyStar=function(t,e,s,r,n,a){return this.append(new i.PolyStar(t,e,s,r,n,a))},e.append=function(t,e){return this._activeInstructions.push(t),this.command=t,e||(this._dirty=!0),this},e.decodePath=function(e){for(var i=[this.moveTo,this.lineTo,this.quadraticCurveTo,this.bezierCurveTo,this.closePath],s=[2,2,4,6,0],r=0,n=e.length,a=[],o=0,h=0,c=t.BASE_64;n>r;){var u=e.charAt(r),l=c[u],d=l>>3,_=i[d];if(!_||3&l)throw"bad path data (@"+r+"): "+u;var p=s[d];d||(o=h=0),a.length=0,r++;for(var f=(l>>2&1)+2,g=0;p>g;g++){var m=c[e.charAt(r)],v=m>>5?-1:1;m=(31&m)<<6|c[e.charAt(r+1)],3==f&&(m=m<<6|c[e.charAt(r+2)]),m=v*m/10,g%2?o=m+=o:h=m+=h,a[g]=m,r+=f}_.apply(this,a)}return this},e.store=function(){return this._updateInstructions(!0),this._storeIndex=this._instructions.length,this},e.unstore=function(){return this._storeIndex=0,this},e.clone=function(){var e=new t;return e.command=this.command,e._stroke=this._stroke,e._strokeStyle=this._strokeStyle,e._strokeDash=this._strokeDash,e._strokeIgnoreScale=this._strokeIgnoreScale,e._fill=this._fill,e._instructions=this._instructions.slice(),e._commitIndex=this._commitIndex,e._activeInstructions=this._activeInstructions.slice(),e._dirty=this._dirty,e._storeIndex=this._storeIndex,e},e.toString=function(){return"[Graphics]"},e.mt=e.moveTo,e.lt=e.lineTo,e.at=e.arcTo,e.bt=e.bezierCurveTo,e.qt=e.quadraticCurveTo,e.a=e.arc,e.r=e.rect,e.cp=e.closePath,e.c=e.clear,e.f=e.beginFill,e.lf=e.beginLinearGradientFill,e.rf=e.beginRadialGradientFill,e.bf=e.beginBitmapFill,e.ef=e.endFill,e.ss=e.setStrokeStyle,e.sd=e.setStrokeDash,e.s=e.beginStroke,e.ls=e.beginLinearGradientStroke,e.rs=e.beginRadialGradientStroke,e.bs=e.beginBitmapStroke,e.es=e.endStroke,e.dr=e.drawRect,e.rr=e.drawRoundRect,e.rc=e.drawRoundRectComplex,e.dc=e.drawCircle,e.de=e.drawEllipse,e.dp=e.drawPolyStar,e.p=e.decodePath,e._updateInstructions=function(e){var i=this._instructions,s=this._activeInstructions,r=this._commitIndex;if(this._dirty&&s.length){i.length=r,i.push(t.beginCmd);var n=s.length,a=i.length;i.length=a+n;for(var o=0;n>o;o++)i[o+a]=s[o];this._fill&&i.push(this._fill),this._stroke&&(this._strokeDash!==this._oldStrokeDash&&(this._oldStrokeDash=this._strokeDash,i.push(this._strokeDash)),this._strokeStyle!==this._oldStrokeStyle&&(this._oldStrokeStyle=this._strokeStyle,i.push(this._strokeStyle)),i.push(this._stroke)),this._dirty=!1}e&&(s.length=0,this._commitIndex=i.length)},e._setFill=function(t){return this._updateInstructions(!0),this.command=this._fill=t,this},e._setStroke=function(t){return this._updateInstructions(!0),(this.command=this._stroke=t)&&(t.ignoreScale=this._strokeIgnoreScale),this},(i.LineTo=function(t,e){this.x=t,this.y=e}).prototype.exec=function(t){t.lineTo(this.x,this.y)},(i.MoveTo=function(t,e){this.x=t,this.y=e}).prototype.exec=function(t){t.moveTo(this.x,this.y)},(i.ArcTo=function(t,e,i,s,r){this.x1=t,this.y1=e,this.x2=i,this.y2=s,this.radius=r}).prototype.exec=function(t){t.arcTo(this.x1,this.y1,this.x2,this.y2,this.radius)},(i.Arc=function(t,e,i,s,r,n){this.x=t,this.y=e,this.radius=i,this.startAngle=s,this.endAngle=r,this.anticlockwise=!!n}).prototype.exec=function(t){t.arc(this.x,this.y,this.radius,this.startAngle,this.endAngle,this.anticlockwise)},(i.QuadraticCurveTo=function(t,e,i,s){this.cpx=t,this.cpy=e,this.x=i,this.y=s}).prototype.exec=function(t){t.quadraticCurveTo(this.cpx,this.cpy,this.x,this.y)},(i.BezierCurveTo=function(t,e,i,s,r,n){this.cp1x=t,this.cp1y=e,this.cp2x=i,this.cp2y=s,this.x=r,this.y=n}).prototype.exec=function(t){t.bezierCurveTo(this.cp1x,this.cp1y,this.cp2x,this.cp2y,this.x,this.y)},(i.Rect=function(t,e,i,s){this.x=t,this.y=e,this.w=i,this.h=s}).prototype.exec=function(t){t.rect(this.x,this.y,this.w,this.h)},(i.ClosePath=function(){}).prototype.exec=function(t){t.closePath()},(i.BeginPath=function(){}).prototype.exec=function(t){t.beginPath()},e=(i.Fill=function(t,e){this.style=t,this.matrix=e}).prototype,e.exec=function(t){if(this.style){t.fillStyle=this.style;var e=this.matrix;e&&(t.save(),t.transform(e.a,e.b,e.c,e.d,e.tx,e.ty)),t.fill(),e&&t.restore()}},e.linearGradient=function(e,i,s,r,n,a){for(var o=this.style=t._ctx.createLinearGradient(s,r,n,a),h=0,c=e.length;c>h;h++)o.addColorStop(i[h],e[h]);return o.props={colors:e,ratios:i,x0:s,y0:r,x1:n,y1:a,type:"linear"},this},e.radialGradient=function(e,i,s,r,n,a,o,h){for(var c=this.style=t._ctx.createRadialGradient(s,r,n,a,o,h),u=0,l=e.length;l>u;u++)c.addColorStop(i[u],e[u]);return c.props={colors:e,ratios:i,x0:s,y0:r,r0:n,x1:a,y1:o,r1:h,type:"radial"},this},e.bitmap=function(e,i){if(e.naturalWidth||e.getContext||e.readyState>=2){var s=this.style=t._ctx.createPattern(e,i||"");s.props={image:e,repetition:i,type:"bitmap"}}return this},e.path=!1,e=(i.Stroke=function(t,e){this.style=t,this.ignoreScale=e}).prototype,e.exec=function(t){this.style&&(t.strokeStyle=this.style,this.ignoreScale&&(t.save(),t.setTransform(1,0,0,1,0,0)),t.stroke(),this.ignoreScale&&t.restore())},e.linearGradient=i.Fill.prototype.linearGradient,e.radialGradient=i.Fill.prototype.radialGradient,e.bitmap=i.Fill.prototype.bitmap,e.path=!1,e=(i.StrokeStyle=function(t,e,i,s,r){this.width=t,this.caps=e,this.joints=i,this.miterLimit=s,this.ignoreScale=r}).prototype,e.exec=function(e){e.lineWidth=null==this.width?"1":this.width,e.lineCap=null==this.caps?"butt":isNaN(this.caps)?this.caps:t.STROKE_CAPS_MAP[this.caps],e.lineJoin=null==this.joints?"miter":isNaN(this.joints)?this.joints:t.STROKE_JOINTS_MAP[this.joints],e.miterLimit=null==this.miterLimit?"10":this.miterLimit,e.ignoreScale=null!=this.ignoreScale&&this.ignoreScale},e.path=!1,(i.StrokeDash=function(t,e){this.segments=t,this.offset=e||0}).prototype.exec=function(t){t.setLineDash&&(t.setLineDash(this.segments||i.StrokeDash.EMPTY_SEGMENTS),t.lineDashOffset=this.offset||0)},i.StrokeDash.EMPTY_SEGMENTS=[],(i.RoundRect=function(t,e,i,s,r,n,a,o){this.x=t,this.y=e,this.w=i,this.h=s,this.radiusTL=r,this.radiusTR=n,this.radiusBR=a,this.radiusBL=o}).prototype.exec=function(t){var e=(c>h?h:c)/2,i=0,s=0,r=0,n=0,a=this.x,o=this.y,h=this.w,c=this.h,u=this.radiusTL,l=this.radiusTR,d=this.radiusBR,_=this.radiusBL;0>u&&(u*=i=-1),u>e&&(u=e),0>l&&(l*=s=-1),l>e&&(l=e),0>d&&(d*=r=-1),d>e&&(d=e),0>_&&(_*=n=-1),_>e&&(_=e),t.moveTo(a+h-l,o),t.arcTo(a+h+l*s,o-l*s,a+h,o+l,l),t.lineTo(a+h,o+c-d),t.arcTo(a+h+d*r,o+c+d*r,a+h-d,o+c,d),t.lineTo(a+_,o+c),t.arcTo(a-_*n,o+c+_*n,a,o+c-_,_),t.lineTo(a,o+u),t.arcTo(a-u*i,o-u*i,a+u,o,u),t.closePath()},(i.Circle=function(t,e,i){this.x=t,this.y=e,this.radius=i}).prototype.exec=function(t){t.arc(this.x,this.y,this.radius,0,2*Math.PI)},(i.Ellipse=function(t,e,i,s){this.x=t,this.y=e,this.w=i,this.h=s}).prototype.exec=function(t){var e=this.x,i=this.y,s=this.w,r=this.h,n=.5522848,a=s/2*n,o=r/2*n,h=e+s,c=i+r,u=e+s/2,l=i+r/2;t.moveTo(e,l),t.bezierCurveTo(e,l-o,u-a,i,u,i),t.bezierCurveTo(u+a,i,h,l-o,h,l),t.bezierCurveTo(h,l+o,u+a,c,u,c),t.bezierCurveTo(u-a,c,e,l+o,e,l)},(i.PolyStar=function(t,e,i,s,r,n){this.x=t,this.y=e,this.radius=i,this.sides=s,this.pointSize=r,this.angle=n}).prototype.exec=function(t){var e=this.x,i=this.y,s=this.radius,r=(this.angle||0)/180*Math.PI,n=this.sides,a=1-(this.pointSize||0),o=Math.PI/n;t.moveTo(e+Math.cos(r)*s,i+Math.sin(r)*s);for(var h=0;n>h;h++)r+=o,1!=a&&t.lineTo(e+Math.cos(r)*s*a,i+Math.sin(r)*s*a),r+=o,t.lineTo(e+Math.cos(r)*s,i+Math.sin(r)*s);t.closePath()},t.beginCmd=new i.BeginPath,createjs.Graphics=t}(),this.createjs=this.createjs||{},function(){"use strict";function t(){this.EventDispatcher_constructor(),this.alpha=1,this.cacheCanvas=null,this.cacheID=0,this.id=createjs.UID.get(),this.mouseEnabled=!0,this.tickEnabled=!0,this.name=null,this.parent=null,this.regX=0,this.regY=0,this.rotation=0,this.scaleX=1,this.scaleY=1,this.skewX=0,this.skewY=0,this.shadow=null,this.visible=!0,this.x=0,this.y=0,this.transformMatrix=null,this.compositeOperation=null,this.snapToPixel=!0,this.filters=null,
this.mask=null,this.hitArea=null,this.cursor=null,this._cacheOffsetX=0,this._cacheOffsetY=0,this._filterOffsetX=0,this._filterOffsetY=0,this._cacheScale=1,this._cacheDataURLID=0,this._cacheDataURL=null,this._props=new createjs.DisplayProps,this._rectangle=new createjs.Rectangle,this._bounds=null}var e=createjs.extend(t,createjs.EventDispatcher);t._MOUSE_EVENTS=["click","dblclick","mousedown","mouseout","mouseover","pressmove","pressup","rollout","rollover"],t.suppressCrossDomainErrors=!1,t._snapToPixelEnabled=!1;var i=createjs.createCanvas?createjs.createCanvas():document.createElement("canvas");i.getContext&&(t._hitTestCanvas=i,t._hitTestContext=i.getContext("2d"),i.width=i.height=1),t._nextCacheID=1,e.getStage=function(){for(var t=this,e=createjs.Stage;t.parent;)t=t.parent;return t instanceof e?t:null};try{Object.defineProperties(e,{stage:{get:e.getStage}})}catch(s){}e.isVisible=function(){return!!(this.visible&&this.alpha>0&&0!=this.scaleX&&0!=this.scaleY)},e.draw=function(t,e){var i=this.cacheCanvas;if(e||!i)return!1;var s=this._cacheScale;return t.drawImage(i,this._cacheOffsetX+this._filterOffsetX,this._cacheOffsetY+this._filterOffsetY,i.width/s,i.height/s),!0},e.updateContext=function(e){var i=this,s=i.mask,r=i._props.matrix;s&&s.graphics&&!s.graphics.isEmpty()&&(s.getMatrix(r),e.transform(r.a,r.b,r.c,r.d,r.tx,r.ty),s.graphics.drawAsPath(e),e.clip(),r.invert(),e.transform(r.a,r.b,r.c,r.d,r.tx,r.ty)),this.getMatrix(r);var n=r.tx,a=r.ty;t._snapToPixelEnabled&&i.snapToPixel&&(n=n+(0>n?-.5:.5)|0,a=a+(0>a?-.5:.5)|0),e.transform(r.a,r.b,r.c,r.d,n,a),e.globalAlpha*=i.alpha,i.compositeOperation&&(e.globalCompositeOperation=i.compositeOperation),i.shadow&&this._applyShadow(e,i.shadow)},e.cache=function(t,e,i,s,r){r=r||1,this.cacheCanvas||(this.cacheCanvas=createjs.createCanvas?createjs.createCanvas():document.createElement("canvas")),this._cacheWidth=i,this._cacheHeight=s,this._cacheOffsetX=t,this._cacheOffsetY=e,this._cacheScale=r,this.updateCache()},e.updateCache=function(e){var i=this.cacheCanvas;if(!i)throw"cache() must be called before updateCache()";var s=this._cacheScale,r=this._cacheOffsetX*s,n=this._cacheOffsetY*s,a=this._cacheWidth,o=this._cacheHeight,h=i.getContext("2d"),c=this._getFilterBounds();r+=this._filterOffsetX=c.x,n+=this._filterOffsetY=c.y,a=Math.ceil(a*s)+c.width,o=Math.ceil(o*s)+c.height,a!=i.width||o!=i.height?(i.width=a,i.height=o):e||h.clearRect(0,0,a+1,o+1),h.save(),h.globalCompositeOperation=e,h.setTransform(s,0,0,s,-r,-n),this.draw(h,!0),this._applyFilters(),h.restore(),this.cacheID=t._nextCacheID++},e.uncache=function(){this._cacheDataURL=this.cacheCanvas=null,this.cacheID=this._cacheOffsetX=this._cacheOffsetY=this._filterOffsetX=this._filterOffsetY=0,this._cacheScale=1},e.getCacheDataURL=function(){return this.cacheCanvas?(this.cacheID!=this._cacheDataURLID&&(this._cacheDataURL=this.cacheCanvas.toDataURL()),this._cacheDataURL):null},e.localToGlobal=function(t,e,i){return this.getConcatenatedMatrix(this._props.matrix).transformPoint(t,e,i||new createjs.Point)},e.globalToLocal=function(t,e,i){return this.getConcatenatedMatrix(this._props.matrix).invert().transformPoint(t,e,i||new createjs.Point)},e.localToLocal=function(t,e,i,s){return s=this.localToGlobal(t,e,s),i.globalToLocal(s.x,s.y,s)},e.setTransform=function(t,e,i,s,r,n,a,o,h){return this.x=t||0,this.y=e||0,this.scaleX=null==i?1:i,this.scaleY=null==s?1:s,this.rotation=r||0,this.skewX=n||0,this.skewY=a||0,this.regX=o||0,this.regY=h||0,this},e.getMatrix=function(t){var e=this,i=t&&t.identity()||new createjs.Matrix2D;return e.transformMatrix?i.copy(e.transformMatrix):i.appendTransform(e.x,e.y,e.scaleX,e.scaleY,e.rotation,e.skewX,e.skewY,e.regX,e.regY)},e.getConcatenatedMatrix=function(t){for(var e=this,i=this.getMatrix(t);e=e.parent;)i.prependMatrix(e.getMatrix(e._props.matrix));return i},e.getConcatenatedDisplayProps=function(t){t=t?t.identity():new createjs.DisplayProps;var e=this,i=e.getMatrix(t.matrix);do t.prepend(e.visible,e.alpha,e.shadow,e.compositeOperation),e!=this&&i.prependMatrix(e.getMatrix(e._props.matrix));while(e=e.parent);return t},e.hitTest=function(e,i){var s=t._hitTestContext;s.setTransform(1,0,0,1,-e,-i),this.draw(s);var r=this._testHit(s);return s.setTransform(1,0,0,1,0,0),s.clearRect(0,0,2,2),r},e.set=function(t){for(var e in t)this[e]=t[e];return this},e.getBounds=function(){if(this._bounds)return this._rectangle.copy(this._bounds);var t=this.cacheCanvas;if(t){var e=this._cacheScale;return this._rectangle.setValues(this._cacheOffsetX,this._cacheOffsetY,t.width/e,t.height/e)}return null},e.getTransformedBounds=function(){return this._getBounds()},e.setBounds=function(t,e,i,s){null==t&&(this._bounds=t),this._bounds=(this._bounds||new createjs.Rectangle).setValues(t,e,i,s)},e.clone=function(){return this._cloneProps(new t)},e.toString=function(){return"[DisplayObject (name="+this.name+")]"},e._cloneProps=function(t){return t.alpha=this.alpha,t.mouseEnabled=this.mouseEnabled,t.tickEnabled=this.tickEnabled,t.name=this.name,t.regX=this.regX,t.regY=this.regY,t.rotation=this.rotation,t.scaleX=this.scaleX,t.scaleY=this.scaleY,t.shadow=this.shadow,t.skewX=this.skewX,t.skewY=this.skewY,t.visible=this.visible,t.x=this.x,t.y=this.y,t.compositeOperation=this.compositeOperation,t.snapToPixel=this.snapToPixel,t.filters=null==this.filters?null:this.filters.slice(0),t.mask=this.mask,t.hitArea=this.hitArea,t.cursor=this.cursor,t._bounds=this._bounds,t},e._applyShadow=function(t,e){e=e||Shadow.identity,t.shadowColor=e.color,t.shadowOffsetX=e.offsetX,t.shadowOffsetY=e.offsetY,t.shadowBlur=e.blur},e._tick=function(t){var e=this._listeners;e&&e.tick&&(t.target=null,t.propagationStopped=t.immediatePropagationStopped=!1,this.dispatchEvent(t))},e._testHit=function(e){try{var i=e.getImageData(0,0,1,1).data[3]>1}catch(s){if(!t.suppressCrossDomainErrors)throw"An error has occurred. This is most likely due to security restrictions on reading canvas pixel data with local or cross-domain images."}return i},e._applyFilters=function(){if(this.filters&&0!=this.filters.length&&this.cacheCanvas)for(var t=this.filters.length,e=this.cacheCanvas.getContext("2d"),i=this.cacheCanvas.width,s=this.cacheCanvas.height,r=0;t>r;r++)this.filters[r].applyFilter(e,0,0,i,s)},e._getFilterBounds=function(t){var e,i=this.filters,s=this._rectangle.setValues(0,0,0,0);if(!i||!(e=i.length))return s;for(var r=0;e>r;r++){var n=this.filters[r];n.getBounds&&n.getBounds(s)}return s},e._getBounds=function(t,e){return this._transformBounds(this.getBounds(),t,e)},e._transformBounds=function(t,e,i){if(!t)return t;var s=t.x,r=t.y,n=t.width,a=t.height,o=this._props.matrix;o=i?o.identity():this.getMatrix(o),(s||r)&&o.appendTransform(0,0,1,1,0,0,0,-s,-r),e&&o.prependMatrix(e);var h=n*o.a,c=n*o.b,u=a*o.c,l=a*o.d,d=o.tx,_=o.ty,p=d,f=d,g=_,m=_;return(s=h+d)<p?p=s:s>f&&(f=s),(s=h+u+d)<p?p=s:s>f&&(f=s),(s=u+d)<p?p=s:s>f&&(f=s),(r=c+_)<g?g=r:r>m&&(m=r),(r=c+l+_)<g?g=r:r>m&&(m=r),(r=l+_)<g?g=r:r>m&&(m=r),t.setValues(p,g,f-p,m-g)},e._hasMouseEventListener=function(){for(var e=t._MOUSE_EVENTS,i=0,s=e.length;s>i;i++)if(this.hasEventListener(e[i]))return!0;return!!this.cursor},createjs.DisplayObject=createjs.promote(t,"EventDispatcher")}(),this.createjs=this.createjs||{},function(){"use strict";function t(){this.DisplayObject_constructor(),this.children=[],this.mouseChildren=!0,this.tickChildren=!0}var e=createjs.extend(t,createjs.DisplayObject);e.getNumChildren=function(){return this.children.length};try{Object.defineProperties(e,{numChildren:{get:e.getNumChildren}})}catch(i){}e.initialize=t,e.isVisible=function(){var t=this.cacheCanvas||this.children.length;return!!(this.visible&&this.alpha>0&&0!=this.scaleX&&0!=this.scaleY&&t)},e.draw=function(t,e){if(this.DisplayObject_draw(t,e))return!0;for(var i=this.children.slice(),s=0,r=i.length;r>s;s++){var n=i[s];n.isVisible()&&(t.save(),n.updateContext(t),n.draw(t),t.restore())}return!0},e.addChild=function(t){if(null==t)return t;var e=arguments.length;if(e>1){for(var i=0;e>i;i++)this.addChild(arguments[i]);return arguments[e-1]}return t.parent&&t.parent.removeChild(t),t.parent=this,this.children.push(t),t.dispatchEvent("added"),t},e.addChildAt=function(t,e){var i=arguments.length,s=arguments[i-1];if(0>s||s>this.children.length)return arguments[i-2];if(i>2){for(var r=0;i-1>r;r++)this.addChildAt(arguments[r],s+r);return arguments[i-2]}return t.parent&&t.parent.removeChild(t),t.parent=this,this.children.splice(e,0,t),t.dispatchEvent("added"),t},e.removeChild=function(t){var e=arguments.length;if(e>1){for(var i=!0,s=0;e>s;s++)i=i&&this.removeChild(arguments[s]);return i}return this.removeChildAt(createjs.indexOf(this.children,t))},e.removeChildAt=function(t){var e=arguments.length;if(e>1){for(var i=[],s=0;e>s;s++)i[s]=arguments[s];i.sort(function(t,e){return e-t});for(var r=!0,s=0;e>s;s++)r=r&&this.removeChildAt(i[s]);return r}if(0>t||t>this.children.length-1)return!1;var n=this.children[t];return n&&(n.parent=null),this.children.splice(t,1),n.dispatchEvent("removed"),!0},e.removeAllChildren=function(){for(var t=this.children;t.length;)this.removeChildAt(0)},e.getChildAt=function(t){return this.children[t]},e.getChildByName=function(t){for(var e=this.children,i=0,s=e.length;s>i;i++)if(e[i].name==t)return e[i];return null},e.sortChildren=function(t){this.children.sort(t)},e.getChildIndex=function(t){return createjs.indexOf(this.children,t)},e.swapChildrenAt=function(t,e){var i=this.children,s=i[t],r=i[e];s&&r&&(i[t]=r,i[e]=s)},e.swapChildren=function(t,e){for(var i,s,r=this.children,n=0,a=r.length;a>n&&(r[n]==t&&(i=n),r[n]==e&&(s=n),null==i||null==s);n++);n!=a&&(r[i]=e,r[s]=t)},e.setChildIndex=function(t,e){var i=this.children,s=i.length;if(!(t.parent!=this||0>e||e>=s)){for(var r=0;s>r&&i[r]!=t;r++);r!=s&&r!=e&&(i.splice(r,1),i.splice(e,0,t))}},e.contains=function(t){for(;t;){if(t==this)return!0;t=t.parent}return!1},e.hitTest=function(t,e){return null!=this.getObjectUnderPoint(t,e)},e.getObjectsUnderPoint=function(t,e,i){var s=[],r=this.localToGlobal(t,e);return this._getObjectsUnderPoint(r.x,r.y,s,i>0,1==i),s},e.getObjectUnderPoint=function(t,e,i){var s=this.localToGlobal(t,e);return this._getObjectsUnderPoint(s.x,s.y,null,i>0,1==i)},e.getBounds=function(){return this._getBounds(null,!0)},e.getTransformedBounds=function(){return this._getBounds()},e.clone=function(e){var i=this._cloneProps(new t);return e&&this._cloneChildren(i),i},e.toString=function(){return"[Container (name="+this.name+")]"},e._tick=function(t){if(this.tickChildren)for(var e=this.children.length-1;e>=0;e--){var i=this.children[e];i.tickEnabled&&i._tick&&i._tick(t)}this.DisplayObject__tick(t)},e._cloneChildren=function(t){t.children.length&&t.removeAllChildren();for(var e=t.children,i=0,s=this.children.length;s>i;i++){var r=this.children[i].clone(!0);r.parent=t,e.push(r)}},e._getObjectsUnderPoint=function(e,i,s,r,n,a){if(a=a||0,!a&&!this._testMask(this,e,i))return null;var o,h=createjs.DisplayObject._hitTestContext;n=n||r&&this._hasMouseEventListener();for(var c=this.children,u=c.length,l=u-1;l>=0;l--){var d=c[l],_=d.hitArea;if(d.visible&&(_||d.isVisible())&&(!r||d.mouseEnabled)&&(_||this._testMask(d,e,i)))if(!_&&d instanceof t){var p=d._getObjectsUnderPoint(e,i,s,r,n,a+1);if(!s&&p)return r&&!this.mouseChildren?this:p}else{if(r&&!n&&!d._hasMouseEventListener())continue;var f=d.getConcatenatedDisplayProps(d._props);if(o=f.matrix,_&&(o.appendMatrix(_.getMatrix(_._props.matrix)),f.alpha=_.alpha),h.globalAlpha=f.alpha,h.setTransform(o.a,o.b,o.c,o.d,o.tx-e,o.ty-i),(_||d).draw(h),!this._testHit(h))continue;if(h.setTransform(1,0,0,1,0,0),h.clearRect(0,0,2,2),!s)return r&&!this.mouseChildren?this:d;s.push(d)}}return null},e._testMask=function(t,e,i){var s=t.mask;if(!s||!s.graphics||s.graphics.isEmpty())return!0;var r=this._props.matrix,n=t.parent;r=n?n.getConcatenatedMatrix(r):r.identity(),r=s.getMatrix(s._props.matrix).prependMatrix(r);var a=createjs.DisplayObject._hitTestContext;return a.setTransform(r.a,r.b,r.c,r.d,r.tx-e,r.ty-i),s.graphics.drawAsPath(a),a.fillStyle="#000",a.fill(),!!this._testHit(a)&&(a.setTransform(1,0,0,1,0,0),a.clearRect(0,0,2,2),!0)},e._getBounds=function(t,e){var i=this.DisplayObject_getBounds();if(i)return this._transformBounds(i,t,e);var s=this._props.matrix;s=e?s.identity():this.getMatrix(s),t&&s.prependMatrix(t);for(var r=this.children.length,n=null,a=0;r>a;a++){var o=this.children[a];o.visible&&(i=o._getBounds(s))&&(n?n.extend(i.x,i.y,i.width,i.height):n=i.clone())}return n},createjs.Container=createjs.promote(t,"DisplayObject")}(),this.createjs=this.createjs||{},function(){"use strict";function t(t){this.Container_constructor(),this.autoClear=!0,this.canvas="string"==typeof t?document.getElementById(t):t,this.mouseX=0,this.mouseY=0,this.drawRect=null,this.snapToPixelEnabled=!1,this.mouseInBounds=!1,this.tickOnUpdate=!0,this.mouseMoveOutside=!1,this.preventSelection=!0,this._pointerData={},this._pointerCount=0,this._primaryPointerID=null,this._mouseOverIntervalID=null,this._nextStage=null,this._prevStage=null,this.enableDOMEvents(!0)}var e=createjs.extend(t,createjs.Container);e._get_nextStage=function(){return this._nextStage},e._set_nextStage=function(t){this._nextStage&&(this._nextStage._prevStage=null),t&&(t._prevStage=this),this._nextStage=t};try{Object.defineProperties(e,{nextStage:{get:e._get_nextStage,set:e._set_nextStage}})}catch(i){}e.update=function(t){if(this.canvas&&(this.tickOnUpdate&&this.tick(t),this.dispatchEvent("drawstart",!1,!0)!==!1)){createjs.DisplayObject._snapToPixelEnabled=this.snapToPixelEnabled;var e=this.drawRect,i=this.canvas.getContext("2d");i.setTransform(1,0,0,1,0,0),this.autoClear&&(e?i.clearRect(e.x,e.y,e.width,e.height):i.clearRect(0,0,this.canvas.width+1,this.canvas.height+1)),i.save(),this.drawRect&&(i.beginPath(),i.rect(e.x,e.y,e.width,e.height),i.clip()),this.updateContext(i),this.draw(i,!1),i.restore(),this.dispatchEvent("drawend")}},e.tick=function(t){if(this.tickEnabled&&this.dispatchEvent("tickstart",!1,!0)!==!1){var e=new createjs.Event("tick");if(t)for(var i in t)t.hasOwnProperty(i)&&(e[i]=t[i]);this._tick(e),this.dispatchEvent("tickend")}},e.handleEvent=function(t){"tick"==t.type&&this.update(t)},e.clear=function(){if(this.canvas){var t=this.canvas.getContext("2d");t.setTransform(1,0,0,1,0,0),t.clearRect(0,0,this.canvas.width+1,this.canvas.height+1)}},e.toDataURL=function(t,e){var i,s=this.canvas.getContext("2d"),r=this.canvas.width,n=this.canvas.height;if(t){i=s.getImageData(0,0,r,n);var a=s.globalCompositeOperation;s.globalCompositeOperation="destination-over",s.fillStyle=t,s.fillRect(0,0,r,n)}var o=this.canvas.toDataURL(e||"image/png");return t&&(s.putImageData(i,0,0),s.globalCompositeOperation=a),o},e.enableMouseOver=function(t){if(this._mouseOverIntervalID&&(clearInterval(this._mouseOverIntervalID),this._mouseOverIntervalID=null,0==t&&this._testMouseOver(!0)),null==t)t=20;else if(0>=t)return;var e=this;this._mouseOverIntervalID=setInterval(function(){e._testMouseOver()},1e3/Math.min(50,t))},e.enableDOMEvents=function(t){null==t&&(t=!0);var e,i,s=this._eventListeners;if(!t&&s){for(e in s)i=s[e],i.t.removeEventListener(e,i.f,!1);this._eventListeners=null}else if(t&&!s&&this.canvas){var r=window.addEventListener?window:document,n=this;s=this._eventListeners={},s.mouseup={t:r,f:function(t){n._handleMouseUp(t)}},s.mousemove={t:r,f:function(t){n._handleMouseMove(t)}},s.dblclick={t:this.canvas,f:function(t){n._handleDoubleClick(t)}},s.mousedown={t:this.canvas,f:function(t){n._handleMouseDown(t)}};for(e in s)i=s[e],i.t.addEventListener(e,i.f,!1)}},e.clone=function(){throw"Stage cannot be cloned."},e.toString=function(){return"[Stage (name="+this.name+")]"},e._getElementRect=function(t){var e;try{e=t.getBoundingClientRect()}catch(i){e={top:t.offsetTop,left:t.offsetLeft,width:t.offsetWidth,height:t.offsetHeight}}var s=(window.pageXOffset||document.scrollLeft||0)-(document.clientLeft||document.body.clientLeft||0),r=(window.pageYOffset||document.scrollTop||0)-(document.clientTop||document.body.clientTop||0),n=window.getComputedStyle?getComputedStyle(t,null):t.currentStyle,a=parseInt(n.paddingLeft)+parseInt(n.borderLeftWidth),o=parseInt(n.paddingTop)+parseInt(n.borderTopWidth),h=parseInt(n.paddingRight)+parseInt(n.borderRightWidth),c=parseInt(n.paddingBottom)+parseInt(n.borderBottomWidth);return{left:e.left+s+a,right:e.right+s-h,top:e.top+r+o,bottom:e.bottom+r-c}},e._getPointerData=function(t){var e=this._pointerData[t];return e||(e=this._pointerData[t]={x:0,y:0}),e},e._handleMouseMove=function(t){t||(t=window.event),this._handlePointerMove(-1,t,t.pageX,t.pageY)},e._handlePointerMove=function(t,e,i,s,r){if((!this._prevStage||void 0!==r)&&this.canvas){var n=this._nextStage,a=this._getPointerData(t),o=a.inBounds;this._updatePointerPosition(t,e,i,s),(o||a.inBounds||this.mouseMoveOutside)&&(-1===t&&a.inBounds==!o&&this._dispatchMouseEvent(this,o?"mouseleave":"mouseenter",!1,t,a,e),this._dispatchMouseEvent(this,"stagemousemove",!1,t,a,e),this._dispatchMouseEvent(a.target,"pressmove",!0,t,a,e)),n&&n._handlePointerMove(t,e,i,s,null)}},e._updatePointerPosition=function(t,e,i,s){var r=this._getElementRect(this.canvas);i-=r.left,s-=r.top;var n=this.canvas.width,a=this.canvas.height;i/=(r.right-r.left)/n,s/=(r.bottom-r.top)/a;var o=this._getPointerData(t);(o.inBounds=i>=0&&s>=0&&n-1>=i&&a-1>=s)?(o.x=i,o.y=s):this.mouseMoveOutside&&(o.x=0>i?0:i>n-1?n-1:i,o.y=0>s?0:s>a-1?a-1:s),o.posEvtObj=e,o.rawX=i,o.rawY=s,(t===this._primaryPointerID||-1===t)&&(this.mouseX=o.x,this.mouseY=o.y,this.mouseInBounds=o.inBounds)},e._handleMouseUp=function(t){this._handlePointerUp(-1,t,!1)},e._handlePointerUp=function(t,e,i,s){var r=this._nextStage,n=this._getPointerData(t);if(!this._prevStage||void 0!==s){var a=null,o=n.target;s||!o&&!r||(a=this._getObjectsUnderPoint(n.x,n.y,null,!0)),n.down&&(this._dispatchMouseEvent(this,"stagemouseup",!1,t,n,e,a),n.down=!1),a==o&&this._dispatchMouseEvent(o,"click",!0,t,n,e),this._dispatchMouseEvent(o,"pressup",!0,t,n,e),i?(t==this._primaryPointerID&&(this._primaryPointerID=null),delete this._pointerData[t]):n.target=null,r&&r._handlePointerUp(t,e,i,s||a&&this)}},e._handleMouseDown=function(t){this._handlePointerDown(-1,t,t.pageX,t.pageY)},e._handlePointerDown=function(t,e,i,s,r){this.preventSelection&&e.preventDefault(),(null==this._primaryPointerID||-1===t)&&(this._primaryPointerID=t),null!=s&&this._updatePointerPosition(t,e,i,s);var n=null,a=this._nextStage,o=this._getPointerData(t);r||(n=o.target=this._getObjectsUnderPoint(o.x,o.y,null,!0)),o.inBounds&&(this._dispatchMouseEvent(this,"stagemousedown",!1,t,o,e,n),o.down=!0),this._dispatchMouseEvent(n,"mousedown",!0,t,o,e),a&&a._handlePointerDown(t,e,i,s,r||n&&this)},e._testMouseOver=function(t,e,i){if(!this._prevStage||void 0!==e){var s=this._nextStage;if(!this._mouseOverIntervalID)return void(s&&s._testMouseOver(t,e,i));var r=this._getPointerData(-1);if(r&&(t||this.mouseX!=this._mouseOverX||this.mouseY!=this._mouseOverY||!this.mouseInBounds)){var n,a,o,h=r.posEvtObj,c=i||h&&h.target==this.canvas,u=null,l=-1,d="";!e&&(t||this.mouseInBounds&&c)&&(u=this._getObjectsUnderPoint(this.mouseX,this.mouseY,null,!0),this._mouseOverX=this.mouseX,this._mouseOverY=this.mouseY);var _=this._mouseOverTarget||[],p=_[_.length-1],f=this._mouseOverTarget=[];for(n=u;n;)f.unshift(n),d||(d=n.cursor),n=n.parent;for(this.canvas.style.cursor=d,!e&&i&&(i.canvas.style.cursor=d),a=0,o=f.length;o>a&&f[a]==_[a];a++)l=a;for(p!=u&&this._dispatchMouseEvent(p,"mouseout",!0,-1,r,h,u),a=_.length-1;a>l;a--)this._dispatchMouseEvent(_[a],"rollout",!1,-1,r,h,u);for(a=f.length-1;a>l;a--)this._dispatchMouseEvent(f[a],"rollover",!1,-1,r,h,p);p!=u&&this._dispatchMouseEvent(u,"mouseover",!0,-1,r,h,p),s&&s._testMouseOver(t,e||u&&this,i||c&&this)}}},e._handleDoubleClick=function(t,e){var i=null,s=this._nextStage,r=this._getPointerData(-1);e||(i=this._getObjectsUnderPoint(r.x,r.y,null,!0),this._dispatchMouseEvent(i,"dblclick",!0,-1,r,t)),s&&s._handleDoubleClick(t,e||i&&this)},e._dispatchMouseEvent=function(t,e,i,s,r,n,a){if(t&&(i||t.hasEventListener(e))){var o=new createjs.MouseEvent(e,i,(!1),r.x,r.y,n,s,s===this._primaryPointerID||-1===s,r.rawX,r.rawY,a);t.dispatchEvent(o)}},createjs.Stage=createjs.promote(t,"Container")}(),this.createjs=this.createjs||{},function(){function t(t){this.DisplayObject_constructor(),"string"==typeof t?(this.image=document.createElement("img"),this.image.src=t):this.image=t,this.sourceRect=null}var e=createjs.extend(t,createjs.DisplayObject);e.initialize=t,e.isVisible=function(){var t=this.image,e=this.cacheCanvas||t&&(t.naturalWidth||t.getContext||t.readyState>=2);return!!(this.visible&&this.alpha>0&&0!=this.scaleX&&0!=this.scaleY&&e)},e.draw=function(t,e){if(this.DisplayObject_draw(t,e)||!this.image)return!0;var i=this.image,s=this.sourceRect;if(s){var r=s.x,n=s.y,a=r+s.width,o=n+s.height,h=0,c=0,u=i.width,l=i.height;0>r&&(h-=r,r=0),a>u&&(a=u),0>n&&(c-=n,n=0),o>l&&(o=l),t.drawImage(i,r,n,a-r,o-n,h,c,a-r,o-n)}else t.drawImage(i,0,0);return!0},e.getBounds=function(){var t=this.DisplayObject_getBounds();if(t)return t;var e=this.image,i=this.sourceRect||e,s=e&&(e.naturalWidth||e.getContext||e.readyState>=2);return s?this._rectangle.setValues(0,0,i.width,i.height):null},e.clone=function(){var e=new t(this.image);return this.sourceRect&&(e.sourceRect=this.sourceRect.clone()),this._cloneProps(e),e},e.toString=function(){return"[Bitmap (name="+this.name+")]"},createjs.Bitmap=createjs.promote(t,"DisplayObject")}(),this.createjs=this.createjs||{},function(){"use strict";function t(t,e){this.DisplayObject_constructor(),this.currentFrame=0,this.currentAnimation=null,this.paused=!0,this.spriteSheet=t,this.currentAnimationFrame=0,this.framerate=0,this._animation=null,this._currentFrame=null,this._skipAdvance=!1,null!=e&&this.gotoAndPlay(e)}var e=createjs.extend(t,createjs.DisplayObject);e.initialize=t,e.isVisible=function(){var t=this.cacheCanvas||this.spriteSheet.complete;return!!(this.visible&&this.alpha>0&&0!=this.scaleX&&0!=this.scaleY&&t)},e.draw=function(t,e){if(this.DisplayObject_draw(t,e))return!0;this._normalizeFrame();var i=this.spriteSheet.getFrame(0|this._currentFrame);if(!i)return!1;var s=i.rect;return s.width&&s.height&&t.drawImage(i.image,s.x,s.y,s.width,s.height,-i.regX,-i.regY,s.width,s.height),!0},e.play=function(){this.paused=!1},e.stop=function(){this.paused=!0},e.gotoAndPlay=function(t){this.paused=!1,this._skipAdvance=!0,this._goto(t)},e.gotoAndStop=function(t){this.paused=!0,this._goto(t)},e.advance=function(t){var e=this.framerate||this.spriteSheet.framerate,i=e&&null!=t?t/(1e3/e):1;this._normalizeFrame(i)},e.getBounds=function(){return this.DisplayObject_getBounds()||this.spriteSheet.getFrameBounds(this.currentFrame,this._rectangle)},e.clone=function(){return this._cloneProps(new t(this.spriteSheet))},e.toString=function(){return"[Sprite (name="+this.name+")]"},e._cloneProps=function(t){return this.DisplayObject__cloneProps(t),t.currentFrame=this.currentFrame,t.currentAnimation=this.currentAnimation,t.paused=this.paused,t.currentAnimationFrame=this.currentAnimationFrame,t.framerate=this.framerate,t._animation=this._animation,t._currentFrame=this._currentFrame,t._skipAdvance=this._skipAdvance,t},e._tick=function(t){this.paused||(this._skipAdvance||this.advance(t&&t.delta),this._skipAdvance=!1),this.DisplayObject__tick(t)},e._normalizeFrame=function(t){t=t||0;var e,i=this._animation,s=this.paused,r=this._currentFrame;if(i){var n=i.speed||1,a=this.currentAnimationFrame;if(e=i.frames.length,a+t*n>=e){var o=i.next;if(this._dispatchAnimationEnd(i,r,s,o,e-1))return;if(o)return this._goto(o,t-(e-a)/n);this.paused=!0,a=i.frames.length-1}else a+=t*n;this.currentAnimationFrame=a,this._currentFrame=i.frames[0|a]}else if(r=this._currentFrame+=t,e=this.spriteSheet.getNumFrames(),r>=e&&e>0&&!this._dispatchAnimationEnd(i,r,s,e-1)&&(this._currentFrame-=e)>=e)return this._normalizeFrame();r=0|this._currentFrame,this.currentFrame!=r&&(this.currentFrame=r,this.dispatchEvent("change"))},e._dispatchAnimationEnd=function(t,e,i,s,r){var n=t?t.name:null;if(this.hasEventListener("animationend")){var a=new createjs.Event("animationend");a.name=n,a.next=s,this.dispatchEvent(a)}var o=this._animation!=t||this._currentFrame!=e;return o||i||!this.paused||(this.currentAnimationFrame=r,o=!0),o},e._goto=function(t,e){if(this.currentAnimationFrame=0,isNaN(t)){var i=this.spriteSheet.getAnimation(t);i&&(this._animation=i,this.currentAnimation=t,this._normalizeFrame(e))}else this.currentAnimation=this._animation=null,this._currentFrame=t,this._normalizeFrame()},createjs.Sprite=createjs.promote(t,"DisplayObject")}(),this.createjs=this.createjs||{},function(){"use strict";function t(t){this.DisplayObject_constructor(),this.graphics=t?t:new createjs.Graphics}var e=createjs.extend(t,createjs.DisplayObject);e.isVisible=function(){var t=this.cacheCanvas||this.graphics&&!this.graphics.isEmpty();return!!(this.visible&&this.alpha>0&&0!=this.scaleX&&0!=this.scaleY&&t)},e.draw=function(t,e){return!!this.DisplayObject_draw(t,e)||(this.graphics.draw(t,this),!0)},e.clone=function(e){var i=e&&this.graphics?this.graphics.clone():this.graphics;return this._cloneProps(new t(i))},e.toString=function(){return"[Shape (name="+this.name+")]"},createjs.Shape=createjs.promote(t,"DisplayObject")}(),this.createjs=this.createjs||{},function(){"use strict";function t(t,e,i){this.DisplayObject_constructor(),this.text=t,this.font=e,this.color=i,this.textAlign="left",this.textBaseline="top",this.maxWidth=null,this.outline=0,this.lineHeight=0,this.lineWidth=null}var e=createjs.extend(t,createjs.DisplayObject),i=createjs.createCanvas?createjs.createCanvas():document.createElement("canvas");i.getContext&&(t._workingContext=i.getContext("2d"),i.width=i.height=1),t.H_OFFSETS={start:0,left:0,center:-.5,end:-1,right:-1},t.V_OFFSETS={top:0,hanging:-.01,middle:-.4,alphabetic:-.8,ideographic:-.85,bottom:-1},e.isVisible=function(){var t=this.cacheCanvas||null!=this.text&&""!==this.text;return!!(this.visible&&this.alpha>0&&0!=this.scaleX&&0!=this.scaleY&&t)},e.draw=function(t,e){if(this.DisplayObject_draw(t,e))return!0;var i=this.color||"#000";return this.outline?(t.strokeStyle=i,t.lineWidth=1*this.outline):t.fillStyle=i,this._drawText(this._prepContext(t)),!0},e.getMeasuredWidth=function(){return this._getMeasuredWidth(this.text)},e.getMeasuredLineHeight=function(){return 1.2*this._getMeasuredWidth("M")},e.getMeasuredHeight=function(){return this._drawText(null,{}).height},e.getBounds=function(){var e=this.DisplayObject_getBounds();if(e)return e;if(null==this.text||""===this.text)return null;var i=this._drawText(null,{}),s=this.maxWidth&&this.maxWidth<i.width?this.maxWidth:i.width,r=s*t.H_OFFSETS[this.textAlign||"left"],n=this.lineHeight||this.getMeasuredLineHeight(),a=n*t.V_OFFSETS[this.textBaseline||"top"];return this._rectangle.setValues(r,a,s,i.height)},e.getMetrics=function(){var e={lines:[]};return e.lineHeight=this.lineHeight||this.getMeasuredLineHeight(),e.vOffset=e.lineHeight*t.V_OFFSETS[this.textBaseline||"top"],this._drawText(null,e,e.lines)},e.clone=function(){return this._cloneProps(new t(this.text,this.font,this.color))},e.toString=function(){return"[Text (text="+(this.text.length>20?this.text.substr(0,17)+"...":this.text)+")]"},e._cloneProps=function(t){return this.DisplayObject__cloneProps(t),t.textAlign=this.textAlign,t.textBaseline=this.textBaseline,t.maxWidth=this.maxWidth,t.outline=this.outline,t.lineHeight=this.lineHeight,t.lineWidth=this.lineWidth,t},e._prepContext=function(t){return t.font=this.font||"10px sans-serif",t.textAlign=this.textAlign||"left",t.textBaseline=this.textBaseline||"top",t},e._drawText=function(e,i,s){var r=!!e;r||(e=t._workingContext,e.save(),this._prepContext(e));for(var n=this.lineHeight||this.getMeasuredLineHeight(),a=0,o=0,h=String(this.text).split(/(?:\r\n|\r|\n)/),c=0,u=h.length;u>c;c++){var l=h[c],d=null;if(null!=this.lineWidth&&(d=e.measureText(l).width)>this.lineWidth){var _=l.split(/(\s)/);l=_[0],d=e.measureText(l).width;for(var p=1,f=_.length;f>p;p+=2){var g=e.measureText(_[p]+_[p+1]).width;d+g>this.lineWidth?(r&&this._drawTextLine(e,l,o*n),s&&s.push(l),d>a&&(a=d),l=_[p+1],d=e.measureText(l).width,o++):(l+=_[p]+_[p+1],d+=g)}}r&&this._drawTextLine(e,l,o*n),s&&s.push(l),i&&null==d&&(d=e.measureText(l).width),d>a&&(a=d),o++}return i&&(i.width=a,i.height=o*n),r||e.restore(),i},e._drawTextLine=function(t,e,i){this.outline?t.strokeText(e,0,i,this.maxWidth||65535):t.fillText(e,0,i,this.maxWidth||65535)},e._getMeasuredWidth=function(e){var i=t._workingContext;i.save();var s=this._prepContext(i).measureText(e).width;return i.restore(),s},createjs.Text=createjs.promote(t,"DisplayObject")}(),this.createjs=this.createjs||{},function(){"use strict";function t(t,e){this.Container_constructor(),this.text=t||"",this.spriteSheet=e,this.lineHeight=0,this.letterSpacing=0,this.spaceWidth=0,this._oldProps={text:0,spriteSheet:0,lineHeight:0,letterSpacing:0,spaceWidth:0}}var e=createjs.extend(t,createjs.Container);t.maxPoolSize=100,t._spritePool=[],e.draw=function(t,e){this.DisplayObject_draw(t,e)||(this._updateText(),this.Container_draw(t,e))},e.getBounds=function(){return this._updateText(),this.Container_getBounds()},e.isVisible=function(){var t=this.cacheCanvas||this.spriteSheet&&this.spriteSheet.complete&&this.text;return!!(this.visible&&this.alpha>0&&0!==this.scaleX&&0!==this.scaleY&&t)},e.clone=function(){return this._cloneProps(new t(this.text,this.spriteSheet))},e.addChild=e.addChildAt=e.removeChild=e.removeChildAt=e.removeAllChildren=function(){},e._cloneProps=function(t){return this.Container__cloneProps(t),t.lineHeight=this.lineHeight,t.letterSpacing=this.letterSpacing,t.spaceWidth=this.spaceWidth,t},e._getFrameIndex=function(t,e){var i,s=e.getAnimation(t);return s||(t!=(i=t.toUpperCase())||t!=(i=t.toLowerCase())||(i=null),i&&(s=e.getAnimation(i))),s&&s.frames[0]},e._getFrame=function(t,e){var i=this._getFrameIndex(t,e);return null==i?i:e.getFrame(i)},e._getLineHeight=function(t){var e=this._getFrame("1",t)||this._getFrame("T",t)||this._getFrame("L",t)||t.getFrame(0);return e?e.rect.height:1},e._getSpaceWidth=function(t){var e=this._getFrame("1",t)||this._getFrame("l",t)||this._getFrame("e",t)||this._getFrame("a",t)||t.getFrame(0);return e?e.rect.width:1},e._updateText=function(){var e,i=0,s=0,r=this._oldProps,n=!1,a=this.spaceWidth,o=this.lineHeight,h=this.spriteSheet,c=t._spritePool,u=this.children,l=0,d=u.length;for(var _ in r)r[_]!=this[_]&&(r[_]=this[_],n=!0);if(n){var p=!!this._getFrame(" ",h);p||a||(a=this._getSpaceWidth(h)),o||(o=this._getLineHeight(h));for(var f=0,g=this.text.length;g>f;f++){var m=this.text.charAt(f);if(" "!=m||p)if("\n"!=m&&"\r"!=m){var v=this._getFrameIndex(m,h);null!=v&&(d>l?e=u[l]:(u.push(e=c.length?c.pop():new createjs.Sprite),e.parent=this,d++),e.spriteSheet=h,e.gotoAndStop(v),e.x=i,e.y=s,l++,i+=e.getBounds().width+this.letterSpacing)}else"\r"==m&&"\n"==this.text.charAt(f+1)&&f++,i=0,s+=o;else i+=a}for(;d>l;)c.push(e=u.pop()),e.parent=null,d--;c.length>t.maxPoolSize&&(c.length=t.maxPoolSize)}},createjs.BitmapText=createjs.promote(t,"Container")}(),this.createjs=this.createjs||{},function(){"use strict";function t(e,i,s,r){this.Container_constructor(),!t.inited&&t.init(),this.mode=e||t.INDEPENDENT,this.startPosition=i||0,this.loop=s,this.currentFrame=0,this.timeline=new createjs.Timeline(null,r,{paused:!0,position:i,useTicks:!0}),this.paused=!1,this.actionsEnabled=!0,this.autoReset=!0,this.frameBounds=this.frameBounds||null,this.framerate=null,this._synchOffset=0,this._prevPos=-1,this._prevPosition=0,this._t=0,this._managed={}}function e(){throw"MovieClipPlugin cannot be instantiated."}var i=createjs.extend(t,createjs.Container);t.INDEPENDENT="independent",t.SINGLE_FRAME="single",t.SYNCHED="synched",t.inited=!1,t.init=function(){t.inited||(e.install(),t.inited=!0)},i.getLabels=function(){return this.timeline.getLabels()},i.getCurrentLabel=function(){return this._updateTimeline(),this.timeline.getCurrentLabel()},i.getDuration=function(){return this.timeline.duration;
};try{Object.defineProperties(i,{labels:{get:i.getLabels},currentLabel:{get:i.getCurrentLabel},totalFrames:{get:i.getDuration},duration:{get:i.getDuration}})}catch(s){}i.initialize=t,i.isVisible=function(){return!!(this.visible&&this.alpha>0&&0!=this.scaleX&&0!=this.scaleY)},i.draw=function(t,e){return!!this.DisplayObject_draw(t,e)||(this._updateTimeline(),this.Container_draw(t,e),!0)},i.play=function(){this.paused=!1},i.stop=function(){this.paused=!0},i.gotoAndPlay=function(t){this.paused=!1,this._goto(t)},i.gotoAndStop=function(t){this.paused=!0,this._goto(t)},i.advance=function(e){var i=t.INDEPENDENT;if(this.mode==i){for(var s=this,r=s.framerate;(s=s.parent)&&null==r;)s.mode==i&&(r=s._framerate);this._framerate=r;var n=null!=r&&-1!=r&&null!=e?e/(1e3/r)+this._t:1,a=0|n;for(this._t=n-a;!this.paused&&a--;)this._prevPosition=this._prevPos<0?0:this._prevPosition+1,this._updateTimeline()}},i.clone=function(){throw"MovieClip cannot be cloned."},i.toString=function(){return"[MovieClip (name="+this.name+")]"},i._tick=function(t){this.advance(t&&t.delta),this.Container__tick(t)},i._goto=function(t){var e=this.timeline.resolve(t);null!=e&&(-1==this._prevPos&&(this._prevPos=NaN),this._prevPosition=e,this._t=0,this._updateTimeline())},i._reset=function(){this._prevPos=-1,this._t=this.currentFrame=0,this.paused=!1},i._updateTimeline=function(){var e=this.timeline,i=this.mode!=t.INDEPENDENT;e.loop=null==this.loop||this.loop;var s=i?this.startPosition+(this.mode==t.SINGLE_FRAME?0:this._synchOffset):this._prevPos<0?0:this._prevPosition,r=i||!this.actionsEnabled?createjs.Tween.NONE:null;if(this.currentFrame=e._calcPosition(s),e.setPosition(s,r),this._prevPosition=e._prevPosition,this._prevPos!=e._prevPos){this.currentFrame=this._prevPos=e._prevPos;for(var n in this._managed)this._managed[n]=1;for(var a=e._tweens,o=0,h=a.length;h>o;o++){var c=a[o],u=c._target;if(u!=this&&!c.passive){var l=c._stepPosition;u instanceof createjs.DisplayObject?this._addManagedChild(u,l):this._setState(u.state,l)}}var d=this.children;for(o=d.length-1;o>=0;o--){var _=d[o].id;1==this._managed[_]&&(this.removeChildAt(o),delete this._managed[_])}}},i._setState=function(t,e){if(t)for(var i=t.length-1;i>=0;i--){var s=t[i],r=s.t,n=s.p;for(var a in n)r[a]=n[a];this._addManagedChild(r,e)}},i._addManagedChild=function(e,i){e._off||(this.addChildAt(e,0),e instanceof t&&(e._synchOffset=i,e.mode==t.INDEPENDENT&&e.autoReset&&!this._managed[e.id]&&e._reset()),this._managed[e.id]=2)},i._getBounds=function(t,e){var i=this.DisplayObject_getBounds();return i||(this._updateTimeline(),this.frameBounds&&(i=this._rectangle.copy(this.frameBounds[this.currentFrame]))),i?this._transformBounds(i,t,e):this.Container__getBounds(t,e)},createjs.MovieClip=createjs.promote(t,"Container"),e.priority=100,e.install=function(){createjs.Tween.installPlugin(e,["startPosition"])},e.init=function(t,e,i){return i},e.step=function(){},e.tween=function(e,i,s,r,n,a,o,h){return e.target instanceof t?1==a?n[i]:r[i]:s}}(),this.createjs=this.createjs||{},function(){"use strict";function t(){throw"SpriteSheetUtils cannot be instantiated"}var e=createjs.createCanvas?createjs.createCanvas():document.createElement("canvas");e.getContext&&(t._workingCanvas=e,t._workingContext=e.getContext("2d"),e.width=e.height=1),t.addFlippedFrames=function(e,i,s,r){if(i||s||r){var n=0;i&&t._flip(e,++n,!0,!1),s&&t._flip(e,++n,!1,!0),r&&t._flip(e,++n,!0,!0)}},t.extractFrame=function(e,i){isNaN(i)&&(i=e.getAnimation(i).frames[0]);var s=e.getFrame(i);if(!s)return null;var r=s.rect,n=t._workingCanvas;n.width=r.width,n.height=r.height,t._workingContext.drawImage(s.image,r.x,r.y,r.width,r.height,0,0,r.width,r.height);var a=document.createElement("img");return a.src=n.toDataURL("image/png"),a},t.mergeAlpha=function(t,e,i){i||(i=createjs.createCanvas?createjs.createCanvas():document.createElement("canvas")),i.width=Math.max(e.width,t.width),i.height=Math.max(e.height,t.height);var s=i.getContext("2d");return s.save(),s.drawImage(t,0,0),s.globalCompositeOperation="destination-in",s.drawImage(e,0,0),s.restore(),i},t._flip=function(e,i,s,r){for(var n=e._images,a=t._workingCanvas,o=t._workingContext,h=n.length/i,c=0;h>c;c++){var u=n[c];u.__tmp=c,o.setTransform(1,0,0,1,0,0),o.clearRect(0,0,a.width+1,a.height+1),a.width=u.width,a.height=u.height,o.setTransform(s?-1:1,0,0,r?-1:1,s?u.width:0,r?u.height:0),o.drawImage(u,0,0);var l=document.createElement("img");l.src=a.toDataURL("image/png"),l.width=u.width,l.height=u.height,n.push(l)}var d=e._frames,_=d.length/i;for(c=0;_>c;c++){u=d[c];var p=u.rect.clone();l=n[u.image.__tmp+h*i];var f={image:l,rect:p,regX:u.regX,regY:u.regY};s&&(p.x=l.width-p.x-p.width,f.regX=p.width-u.regX),r&&(p.y=l.height-p.y-p.height,f.regY=p.height-u.regY),d.push(f)}var g="_"+(s?"h":"")+(r?"v":""),m=e._animations,v=e._data,y=m.length/i;for(c=0;y>c;c++){var b=m[c];u=v[b];var E={name:b+g,speed:u.speed,next:u.next,frames:[]};u.next&&(E.next+=g),d=u.frames;for(var j=0,S=d.length;S>j;j++)E.frames.push(d[j]+_*i);v[E.name]=E,m.push(E.name)}},createjs.SpriteSheetUtils=t}(),this.createjs=this.createjs||{},function(){"use strict";function t(t){this.EventDispatcher_constructor(),this.maxWidth=2048,this.maxHeight=2048,this.spriteSheet=null,this.scale=1,this.padding=1,this.timeSlice=.3,this.progress=-1,this.framerate=t||0,this._frames=[],this._animations={},this._data=null,this._nextFrameIndex=0,this._index=0,this._timerID=null,this._scale=1}var e=createjs.extend(t,createjs.EventDispatcher);t.ERR_DIMENSIONS="frame dimensions exceed max spritesheet dimensions",t.ERR_RUNNING="a build is already running",e.addFrame=function(e,i,s,r,n){if(this._data)throw t.ERR_RUNNING;var a=i||e.bounds||e.nominalBounds;return!a&&e.getBounds&&(a=e.getBounds()),a?(s=s||1,this._frames.push({source:e,sourceRect:a,scale:s,funct:r,data:n,index:this._frames.length,height:a.height*s})-1):null},e.addAnimation=function(e,i,s,r){if(this._data)throw t.ERR_RUNNING;this._animations[e]={frames:i,next:s,speed:r}},e.addMovieClip=function(e,i,s,r,n,a){if(this._data)throw t.ERR_RUNNING;var o=e.frameBounds,h=i||e.bounds||e.nominalBounds;if(!h&&e.getBounds&&(h=e.getBounds()),h||o){var c,u,l=this._frames.length,d=e.timeline.duration;for(c=0;d>c;c++){var _=o&&o[c]?o[c]:h;this.addFrame(e,_,s,this._setupMovieClipFrame,{i:c,f:r,d:n})}var p=e.timeline._labels,f=[];for(var g in p)f.push({index:p[g],label:g});if(f.length)for(f.sort(function(t,e){return t.index-e.index}),c=0,u=f.length;u>c;c++){for(var m=f[c].label,v=l+f[c].index,y=l+(c==u-1?d:f[c+1].index),b=[],E=v;y>E;E++)b.push(E);(!a||(m=a(m,e,v,y)))&&this.addAnimation(m,b,!0)}}},e.build=function(){if(this._data)throw t.ERR_RUNNING;for(this._startBuild();this._drawNext(););return this._endBuild(),this.spriteSheet},e.buildAsync=function(e){if(this._data)throw t.ERR_RUNNING;this.timeSlice=e,this._startBuild();var i=this;this._timerID=setTimeout(function(){i._run()},50-50*Math.max(.01,Math.min(.99,this.timeSlice||.3)))},e.stopAsync=function(){clearTimeout(this._timerID),this._data=null},e.clone=function(){throw"SpriteSheetBuilder cannot be cloned."},e.toString=function(){return"[SpriteSheetBuilder]"},e._startBuild=function(){var e=this.padding||0;this.progress=0,this.spriteSheet=null,this._index=0,this._scale=this.scale;var i=[];this._data={images:[],frames:i,framerate:this.framerate,animations:this._animations};var s=this._frames.slice();if(s.sort(function(t,e){return t.height<=e.height?-1:1}),s[s.length-1].height+2*e>this.maxHeight)throw t.ERR_DIMENSIONS;for(var r=0,n=0,a=0;s.length;){var o=this._fillRow(s,r,a,i,e);if(o.w>n&&(n=o.w),r+=o.h,!o.h||!s.length){var h=createjs.createCanvas?createjs.createCanvas():document.createElement("canvas");h.width=this._getSize(n,this.maxWidth),h.height=this._getSize(r,this.maxHeight),this._data.images[a]=h,o.h||(n=r=0,a++)}}},e._setupMovieClipFrame=function(t,e){var i=t.actionsEnabled;t.actionsEnabled=!1,t.gotoAndStop(e.i),t.actionsEnabled=i,e.f&&e.f(t,e.d,e.i)},e._getSize=function(t,e){for(var i=4;Math.pow(2,++i)<t;);return Math.min(e,Math.pow(2,i))},e._fillRow=function(e,i,s,r,n){var a=this.maxWidth,o=this.maxHeight;i+=n;for(var h=o-i,c=n,u=0,l=e.length-1;l>=0;l--){var d=e[l],_=this._scale*d.scale,p=d.sourceRect,f=d.source,g=Math.floor(_*p.x-n),m=Math.floor(_*p.y-n),v=Math.ceil(_*p.height+2*n),y=Math.ceil(_*p.width+2*n);if(y>a)throw t.ERR_DIMENSIONS;v>h||c+y>a||(d.img=s,d.rect=new createjs.Rectangle(c,i,y,v),u=u||v,e.splice(l,1),r[d.index]=[c,i,y,v,s,Math.round(-g+_*f.regX-n),Math.round(-m+_*f.regY-n)],c+=y)}return{w:c,h:u}},e._endBuild=function(){this.spriteSheet=new createjs.SpriteSheet(this._data),this._data=null,this.progress=1,this.dispatchEvent("complete")},e._run=function(){for(var t=50*Math.max(.01,Math.min(.99,this.timeSlice||.3)),e=(new Date).getTime()+t,i=!1;e>(new Date).getTime();)if(!this._drawNext()){i=!0;break}if(i)this._endBuild();else{var s=this;this._timerID=setTimeout(function(){s._run()},50-t)}var r=this.progress=this._index/this._frames.length;if(this.hasEventListener("progress")){var n=new createjs.Event("progress");n.progress=r,this.dispatchEvent(n)}},e._drawNext=function(){var t=this._frames[this._index],e=t.scale*this._scale,i=t.rect,s=t.sourceRect,r=this._data.images[t.img],n=r.getContext("2d");return t.funct&&t.funct(t.source,t.data),n.save(),n.beginPath(),n.rect(i.x,i.y,i.width,i.height),n.clip(),n.translate(Math.ceil(i.x-s.x*e),Math.ceil(i.y-s.y*e)),n.scale(e,e),t.source.draw(n),n.restore(),++this._index<this._frames.length},createjs.SpriteSheetBuilder=createjs.promote(t,"EventDispatcher")}(),this.createjs=this.createjs||{},function(){"use strict";function t(t){this.DisplayObject_constructor(),"string"==typeof t&&(t=document.getElementById(t)),this.mouseEnabled=!1;var e=t.style;e.position="absolute",e.transformOrigin=e.WebkitTransformOrigin=e.msTransformOrigin=e.MozTransformOrigin=e.OTransformOrigin="0% 0%",this.htmlElement=t,this._oldProps=null}var e=createjs.extend(t,createjs.DisplayObject);e.isVisible=function(){return null!=this.htmlElement},e.draw=function(t,e){return!0},e.cache=function(){},e.uncache=function(){},e.updateCache=function(){},e.hitTest=function(){},e.localToGlobal=function(){},e.globalToLocal=function(){},e.localToLocal=function(){},e.clone=function(){throw"DOMElement cannot be cloned."},e.toString=function(){return"[DOMElement (name="+this.name+")]"},e._tick=function(t){var e=this.getStage();e&&e.on("drawend",this._handleDrawEnd,this,!0),this.DisplayObject__tick(t)},e._handleDrawEnd=function(t){var e=this.htmlElement;if(e){var i=e.style,s=this.getConcatenatedDisplayProps(this._props),r=s.matrix,n=s.visible?"visible":"hidden";if(n!=i.visibility&&(i.visibility=n),s.visible){var a=this._oldProps,o=a&&a.matrix,h=1e4;if(!o||!o.equals(r)){var c="matrix("+(r.a*h|0)/h+","+(r.b*h|0)/h+","+(r.c*h|0)/h+","+(r.d*h|0)/h+","+(r.tx+.5|0);i.transform=i.WebkitTransform=i.OTransform=i.msTransform=c+","+(r.ty+.5|0)+")",i.MozTransform=c+"px,"+(r.ty+.5|0)+"px)",a||(a=this._oldProps=new createjs.DisplayProps((!0),NaN)),a.matrix.copy(r)}a.alpha!=s.alpha&&(i.opacity=""+(s.alpha*h|0)/h,a.alpha=s.alpha)}}},createjs.DOMElement=createjs.promote(t,"DisplayObject")}(),this.createjs=this.createjs||{},function(){"use strict";function t(){}var e=t.prototype;e.getBounds=function(t){return t},e.applyFilter=function(t,e,i,s,r,n,a,o){n=n||t,null==a&&(a=e),null==o&&(o=i);try{var h=t.getImageData(e,i,s,r)}catch(c){return!1}return!!this._applyFilter(h)&&(n.putImageData(h,a,o),!0)},e.toString=function(){return"[Filter]"},e.clone=function(){return new t},e._applyFilter=function(t){return!0},createjs.Filter=t}(),this.createjs=this.createjs||{},function(){"use strict";function t(t,e,i){(isNaN(t)||0>t)&&(t=0),(isNaN(e)||0>e)&&(e=0),(isNaN(i)||1>i)&&(i=1),this.blurX=0|t,this.blurY=0|e,this.quality=0|i}var e=createjs.extend(t,createjs.Filter);t.MUL_TABLE=[1,171,205,293,57,373,79,137,241,27,391,357,41,19,283,265,497,469,443,421,25,191,365,349,335,161,155,149,9,278,269,261,505,245,475,231,449,437,213,415,405,395,193,377,369,361,353,345,169,331,325,319,313,307,301,37,145,285,281,69,271,267,263,259,509,501,493,243,479,118,465,459,113,446,55,435,429,423,209,413,51,403,199,393,97,3,379,375,371,367,363,359,355,351,347,43,85,337,333,165,327,323,5,317,157,311,77,305,303,75,297,294,73,289,287,71,141,279,277,275,68,135,67,133,33,262,260,129,511,507,503,499,495,491,61,121,481,477,237,235,467,232,115,457,227,451,7,445,221,439,218,433,215,427,425,211,419,417,207,411,409,203,202,401,399,396,197,49,389,387,385,383,95,189,47,187,93,185,23,183,91,181,45,179,89,177,11,175,87,173,345,343,341,339,337,21,167,83,331,329,327,163,81,323,321,319,159,79,315,313,39,155,309,307,153,305,303,151,75,299,149,37,295,147,73,291,145,289,287,143,285,71,141,281,35,279,139,69,275,137,273,17,271,135,269,267,133,265,33,263,131,261,130,259,129,257,1],t.SHG_TABLE=[0,9,10,11,9,12,10,11,12,9,13,13,10,9,13,13,14,14,14,14,10,13,14,14,14,13,13,13,9,14,14,14,15,14,15,14,15,15,14,15,15,15,14,15,15,15,15,15,14,15,15,15,15,15,15,12,14,15,15,13,15,15,15,15,16,16,16,15,16,14,16,16,14,16,13,16,16,16,15,16,13,16,15,16,14,9,16,16,16,16,16,16,16,16,16,13,14,16,16,15,16,16,10,16,15,16,14,16,16,14,16,16,14,16,16,14,15,16,16,16,14,15,14,15,13,16,16,15,17,17,17,17,17,17,14,15,17,17,16,16,17,16,15,17,16,17,11,17,16,17,16,17,16,17,17,16,17,17,16,17,17,16,16,17,17,17,16,14,17,17,17,17,15,16,14,16,15,16,13,16,15,16,14,16,15,16,12,16,15,16,17,17,17,17,17,13,16,15,17,17,17,16,15,17,17,17,16,15,17,17,14,16,17,17,16,17,17,16,15,17,16,14,17,16,15,17,16,17,17,16,17,15,16,17,14,17,16,15,17,16,17,13,17,16,17,17,16,17,14,17,16,17,16,17,16,17,9],e.getBounds=function(t){var e=0|this.blurX,i=0|this.blurY;if(0>=e&&0>=i)return t;var s=Math.pow(this.quality,.2);return(t||new createjs.Rectangle).pad(e*s+1,i*s+1,e*s+1,i*s+1)},e.clone=function(){return new t(this.blurX,this.blurY,this.quality)},e.toString=function(){return"[BlurFilter]"},e._applyFilter=function(e){var i=this.blurX>>1;if(isNaN(i)||0>i)return!1;var s=this.blurY>>1;if(isNaN(s)||0>s)return!1;if(0==i&&0==s)return!1;var r=this.quality;(isNaN(r)||1>r)&&(r=1),r|=0,r>3&&(r=3),1>r&&(r=1);var n=e.data,a=0,o=0,h=0,c=0,u=0,l=0,d=0,_=0,p=0,f=0,g=0,m=0,v=0,y=0,b=0,E=i+i+1|0,j=s+s+1|0,S=0|e.width,T=0|e.height,P=S-1|0,w=T-1|0,x=i+1|0,L=s+1|0,A={r:0,b:0,g:0,a:0},I=A;for(h=1;E>h;h++)I=I.n={r:0,b:0,g:0,a:0};I.n=A;var R={r:0,b:0,g:0,a:0},M=R;for(h=1;j>h;h++)M=M.n={r:0,b:0,g:0,a:0};M.n=R;for(var O=null,C=0|t.MUL_TABLE[i],D=0|t.SHG_TABLE[i],N=0|t.MUL_TABLE[s],k=0|t.SHG_TABLE[s];r-- >0;){d=l=0;var F=C,H=D;for(o=T;--o>-1;){for(_=x*(m=n[0|l]),p=x*(v=n[l+1|0]),f=x*(y=n[l+2|0]),g=x*(b=n[l+3|0]),I=A,h=x;--h>-1;)I.r=m,I.g=v,I.b=y,I.a=b,I=I.n;for(h=1;x>h;h++)c=l+((h>P?P:h)<<2)|0,_+=I.r=n[c],p+=I.g=n[c+1],f+=I.b=n[c+2],g+=I.a=n[c+3],I=I.n;for(O=A,a=0;S>a;a++)n[l++]=_*F>>>H,n[l++]=p*F>>>H,n[l++]=f*F>>>H,n[l++]=g*F>>>H,c=d+((c=a+i+1)<P?c:P)<<2,_-=O.r-(O.r=n[c]),p-=O.g-(O.g=n[c+1]),f-=O.b-(O.b=n[c+2]),g-=O.a-(O.a=n[c+3]),O=O.n;d+=S}for(F=N,H=k,a=0;S>a;a++){for(l=a<<2|0,_=L*(m=n[l])|0,p=L*(v=n[l+1|0])|0,f=L*(y=n[l+2|0])|0,g=L*(b=n[l+3|0])|0,M=R,h=0;L>h;h++)M.r=m,M.g=v,M.b=y,M.a=b,M=M.n;for(u=S,h=1;s>=h;h++)l=u+a<<2,_+=M.r=n[l],p+=M.g=n[l+1],f+=M.b=n[l+2],g+=M.a=n[l+3],M=M.n,w>h&&(u+=S);if(l=a,O=R,r>0)for(o=0;T>o;o++)c=l<<2,n[c+3]=b=g*F>>>H,b>0?(n[c]=_*F>>>H,n[c+1]=p*F>>>H,n[c+2]=f*F>>>H):n[c]=n[c+1]=n[c+2]=0,c=a+((c=o+L)<w?c:w)*S<<2,_-=O.r-(O.r=n[c]),p-=O.g-(O.g=n[c+1]),f-=O.b-(O.b=n[c+2]),g-=O.a-(O.a=n[c+3]),O=O.n,l+=S;else for(o=0;T>o;o++)c=l<<2,n[c+3]=b=g*F>>>H,b>0?(b=255/b,n[c]=(_*F>>>H)*b,n[c+1]=(p*F>>>H)*b,n[c+2]=(f*F>>>H)*b):n[c]=n[c+1]=n[c+2]=0,c=a+((c=o+L)<w?c:w)*S<<2,_-=O.r-(O.r=n[c]),p-=O.g-(O.g=n[c+1]),f-=O.b-(O.b=n[c+2]),g-=O.a-(O.a=n[c+3]),O=O.n,l+=S}}return!0},createjs.BlurFilter=createjs.promote(t,"Filter")}(),this.createjs=this.createjs||{},function(){"use strict";function t(t){this.alphaMap=t,this._alphaMap=null,this._mapData=null}var e=createjs.extend(t,createjs.Filter);e.clone=function(){var e=new t(this.alphaMap);return e._alphaMap=this._alphaMap,e._mapData=this._mapData,e},e.toString=function(){return"[AlphaMapFilter]"},e._applyFilter=function(t){if(!this.alphaMap)return!0;if(!this._prepAlphaMap())return!1;for(var e=t.data,i=this._mapData,s=0,r=e.length;r>s;s+=4)e[s+3]=i[s]||0;return!0},e._prepAlphaMap=function(){if(!this.alphaMap)return!1;if(this.alphaMap==this._alphaMap&&this._mapData)return!0;this._mapData=null;var t,e=this._alphaMap=this.alphaMap,i=e;e instanceof HTMLCanvasElement?t=i.getContext("2d"):(i=createjs.createCanvas?createjs.createCanvas():document.createElement("canvas"),i.width=e.width,i.height=e.height,t=i.getContext("2d"),t.drawImage(e,0,0));try{var s=t.getImageData(0,0,e.width,e.height)}catch(r){return!1}return this._mapData=s.data,!0},createjs.AlphaMapFilter=createjs.promote(t,"Filter")}(),this.createjs=this.createjs||{},function(){"use strict";function t(t){this.mask=t}var e=createjs.extend(t,createjs.Filter);e.applyFilter=function(t,e,i,s,r,n,a,o){return!this.mask||(n=n||t,null==a&&(a=e),null==o&&(o=i),n.save(),t==n&&(n.globalCompositeOperation="destination-in",n.drawImage(this.mask,a,o),n.restore(),!0))},e.clone=function(){return new t(this.mask)},e.toString=function(){return"[AlphaMaskFilter]"},createjs.AlphaMaskFilter=createjs.promote(t,"Filter")}(),this.createjs=this.createjs||{},function(){"use strict";function t(t,e,i,s,r,n,a,o){this.redMultiplier=null!=t?t:1,this.greenMultiplier=null!=e?e:1,this.blueMultiplier=null!=i?i:1,this.alphaMultiplier=null!=s?s:1,this.redOffset=r||0,this.greenOffset=n||0,this.blueOffset=a||0,this.alphaOffset=o||0}var e=createjs.extend(t,createjs.Filter);e.toString=function(){return"[ColorFilter]"},e.clone=function(){return new t(this.redMultiplier,this.greenMultiplier,this.blueMultiplier,this.alphaMultiplier,this.redOffset,this.greenOffset,this.blueOffset,this.alphaOffset)},e._applyFilter=function(t){for(var e=t.data,i=e.length,s=0;i>s;s+=4)e[s]=e[s]*this.redMultiplier+this.redOffset,e[s+1]=e[s+1]*this.greenMultiplier+this.greenOffset,e[s+2]=e[s+2]*this.blueMultiplier+this.blueOffset,e[s+3]=e[s+3]*this.alphaMultiplier+this.alphaOffset;return!0},createjs.ColorFilter=createjs.promote(t,"Filter")}(),this.createjs=this.createjs||{},function(){"use strict";function t(t,e,i,s){this.setColor(t,e,i,s)}var e=t.prototype;t.DELTA_INDEX=[0,.01,.02,.04,.05,.06,.07,.08,.1,.11,.12,.14,.15,.16,.17,.18,.2,.21,.22,.24,.25,.27,.28,.3,.32,.34,.36,.38,.4,.42,.44,.46,.48,.5,.53,.56,.59,.62,.65,.68,.71,.74,.77,.8,.83,.86,.89,.92,.95,.98,1,1.06,1.12,1.18,1.24,1.3,1.36,1.42,1.48,1.54,1.6,1.66,1.72,1.78,1.84,1.9,1.96,2,2.12,2.25,2.37,2.5,2.62,2.75,2.87,3,3.2,3.4,3.6,3.8,4,4.3,4.7,4.9,5,5.5,6,6.5,6.8,7,7.3,7.5,7.8,8,8.4,8.7,9,9.4,9.6,9.8,10],t.IDENTITY_MATRIX=[1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1],t.LENGTH=t.IDENTITY_MATRIX.length,e.setColor=function(t,e,i,s){return this.reset().adjustColor(t,e,i,s)},e.reset=function(){return this.copy(t.IDENTITY_MATRIX)},e.adjustColor=function(t,e,i,s){return this.adjustHue(s),this.adjustContrast(e),this.adjustBrightness(t),this.adjustSaturation(i)},e.adjustBrightness=function(t){return 0==t||isNaN(t)?this:(t=this._cleanValue(t,255),this._multiplyMatrix([1,0,0,0,t,0,1,0,0,t,0,0,1,0,t,0,0,0,1,0,0,0,0,0,1]),this)},e.adjustContrast=function(e){if(0==e||isNaN(e))return this;e=this._cleanValue(e,100);var i;return 0>e?i=127+e/100*127:(i=e%1,i=0==i?t.DELTA_INDEX[e]:t.DELTA_INDEX[e<<0]*(1-i)+t.DELTA_INDEX[(e<<0)+1]*i,i=127*i+127),this._multiplyMatrix([i/127,0,0,0,.5*(127-i),0,i/127,0,0,.5*(127-i),0,0,i/127,0,.5*(127-i),0,0,0,1,0,0,0,0,0,1]),this},e.adjustSaturation=function(t){if(0==t||isNaN(t))return this;t=this._cleanValue(t,100);var e=1+(t>0?3*t/100:t/100),i=.3086,s=.6094,r=.082;return this._multiplyMatrix([i*(1-e)+e,s*(1-e),r*(1-e),0,0,i*(1-e),s*(1-e)+e,r*(1-e),0,0,i*(1-e),s*(1-e),r*(1-e)+e,0,0,0,0,0,1,0,0,0,0,0,1]),this},e.adjustHue=function(t){if(0==t||isNaN(t))return this;t=this._cleanValue(t,180)/180*Math.PI;var e=Math.cos(t),i=Math.sin(t),s=.213,r=.715,n=.072;return this._multiplyMatrix([s+e*(1-s)+i*-s,r+e*-r+i*-r,n+e*-n+i*(1-n),0,0,s+e*-s+.143*i,r+e*(1-r)+.14*i,n+e*-n+i*-.283,0,0,s+e*-s+i*-(1-s),r+e*-r+i*r,n+e*(1-n)+i*n,0,0,0,0,0,1,0,0,0,0,0,1]),this},e.concat=function(e){return e=this._fixMatrix(e),e.length!=t.LENGTH?this:(this._multiplyMatrix(e),this)},e.clone=function(){return(new t).copy(this)},e.toArray=function(){for(var e=[],i=0,s=t.LENGTH;s>i;i++)e[i]=this[i];return e},e.copy=function(e){for(var i=t.LENGTH,s=0;i>s;s++)this[s]=e[s];return this},e.toString=function(){return"[ColorMatrix]"},e._multiplyMatrix=function(t){var e,i,s,r=[];for(e=0;5>e;e++){for(i=0;5>i;i++)r[i]=this[i+5*e];for(i=0;5>i;i++){var n=0;for(s=0;5>s;s++)n+=t[i+5*s]*r[s];this[i+5*e]=n}}},e._cleanValue=function(t,e){return Math.min(e,Math.max(-e,t))},e._fixMatrix=function(e){return e instanceof t&&(e=e.toArray()),e.length<t.LENGTH?e=e.slice(0,e.length).concat(t.IDENTITY_MATRIX.slice(e.length,t.LENGTH)):e.length>t.LENGTH&&(e=e.slice(0,t.LENGTH)),e},createjs.ColorMatrix=t}(),this.createjs=this.createjs||{},function(){"use strict";function t(t){this.matrix=t}var e=createjs.extend(t,createjs.Filter);e.toString=function(){return"[ColorMatrixFilter]"},e.clone=function(){return new t(this.matrix)},e._applyFilter=function(t){for(var e,i,s,r,n=t.data,a=n.length,o=this.matrix,h=o[0],c=o[1],u=o[2],l=o[3],d=o[4],_=o[5],p=o[6],f=o[7],g=o[8],m=o[9],v=o[10],y=o[11],b=o[12],E=o[13],j=o[14],S=o[15],T=o[16],P=o[17],w=o[18],x=o[19],L=0;a>L;L+=4)e=n[L],i=n[L+1],s=n[L+2],r=n[L+3],n[L]=e*h+i*c+s*u+r*l+d,n[L+1]=e*_+i*p+s*f+r*g+m,n[L+2]=e*v+i*y+s*b+r*E+j,n[L+3]=e*S+i*T+s*P+r*w+x;return!0},createjs.ColorMatrixFilter=createjs.promote(t,"Filter")}(),this.createjs=this.createjs||{},function(){"use strict";function t(){throw"Touch cannot be instantiated"}t.isSupported=function(){return!!("ontouchstart"in window||window.navigator.msPointerEnabled&&window.navigator.msMaxTouchPoints>0||window.navigator.pointerEnabled&&window.navigator.maxTouchPoints>0)},t.enable=function(e,i,s){return!!(e&&e.canvas&&t.isSupported())&&(!!e.__touch||(e.__touch={pointers:{},multitouch:!i,preventDefault:!s,count:0},"ontouchstart"in window?t._IOS_enable(e):(window.navigator.msPointerEnabled||window.navigator.pointerEnabled)&&t._IE_enable(e),!0))},t.disable=function(e){e&&("ontouchstart"in window?t._IOS_disable(e):(window.navigator.msPointerEnabled||window.navigator.pointerEnabled)&&t._IE_disable(e),delete e.__touch)},t._IOS_enable=function(e){var i=e.canvas,s=e.__touch.f=function(i){t._IOS_handleEvent(e,i)};i.addEventListener("touchstart",s,!1),i.addEventListener("touchmove",s,!1),i.addEventListener("touchend",s,!1),i.addEventListener("touchcancel",s,!1)},t._IOS_disable=function(t){var e=t.canvas;if(e){var i=t.__touch.f;e.removeEventListener("touchstart",i,!1),e.removeEventListener("touchmove",i,!1),e.removeEventListener("touchend",i,!1),e.removeEventListener("touchcancel",i,!1)}},t._IOS_handleEvent=function(t,e){if(t){t.__touch.preventDefault&&e.preventDefault&&e.preventDefault();for(var i=e.changedTouches,s=e.type,r=0,n=i.length;n>r;r++){var a=i[r],o=a.identifier;a.target==t.canvas&&("touchstart"==s?this._handleStart(t,o,e,a.pageX,a.pageY):"touchmove"==s?this._handleMove(t,o,e,a.pageX,a.pageY):("touchend"==s||"touchcancel"==s)&&this._handleEnd(t,o,e))}}},t._IE_enable=function(e){var i=e.canvas,s=e.__touch.f=function(i){t._IE_handleEvent(e,i)};void 0===window.navigator.pointerEnabled?(i.addEventListener("MSPointerDown",s,!1),window.addEventListener("MSPointerMove",s,!1),window.addEventListener("MSPointerUp",s,!1),window.addEventListener("MSPointerCancel",s,!1),e.__touch.preventDefault&&(i.style.msTouchAction="none")):(i.addEventListener("pointerdown",s,!1),window.addEventListener("pointermove",s,!1),window.addEventListener("pointerup",s,!1),window.addEventListener("pointercancel",s,!1),e.__touch.preventDefault&&(i.style.touchAction="none")),e.__touch.activeIDs={}},t._IE_disable=function(t){var e=t.__touch.f;void 0===window.navigator.pointerEnabled?(window.removeEventListener("MSPointerMove",e,!1),window.removeEventListener("MSPointerUp",e,!1),window.removeEventListener("MSPointerCancel",e,!1),t.canvas&&t.canvas.removeEventListener("MSPointerDown",e,!1)):(window.removeEventListener("pointermove",e,!1),window.removeEventListener("pointerup",e,!1),window.removeEventListener("pointercancel",e,!1),t.canvas&&t.canvas.removeEventListener("pointerdown",e,!1))},t._IE_handleEvent=function(t,e){if(t){t.__touch.preventDefault&&e.preventDefault&&e.preventDefault();var i=e.type,s=e.pointerId,r=t.__touch.activeIDs;if("MSPointerDown"==i||"pointerdown"==i){if(e.srcElement!=t.canvas)return;r[s]=!0,this._handleStart(t,s,e,e.pageX,e.pageY)}else r[s]&&("MSPointerMove"==i||"pointermove"==i?this._handleMove(t,s,e,e.pageX,e.pageY):("MSPointerUp"==i||"MSPointerCancel"==i||"pointerup"==i||"pointercancel"==i)&&(delete r[s],this._handleEnd(t,s,e)))}},t._handleStart=function(t,e,i,s,r){var n=t.__touch;if(n.multitouch||!n.count){var a=n.pointers;a[e]||(a[e]=!0,n.count++,t._handlePointerDown(e,i,s,r))}},t._handleMove=function(t,e,i,s,r){t.__touch.pointers[e]&&t._handlePointerMove(e,i,s,r)},t._handleEnd=function(t,e,i){var s=t.__touch,r=s.pointers;r[e]&&(s.count--,t._handlePointerUp(e,i,!0),delete r[e])},createjs.Touch=t}(),this.createjs=this.createjs||{},function(){"use strict";var t=createjs.EaselJS=createjs.EaselJS||{};t.version="0.8.2",t.buildDate="Thu, 26 Nov 2015 20:44:34 GMT"}(),this.createjs=this.createjs||{},function(){"use strict";var t=createjs.PreloadJS=createjs.PreloadJS||{};t.version="0.6.2",t.buildDate="Thu, 26 Nov 2015 20:44:31 GMT"}(),this.createjs=this.createjs||{},function(){"use strict";createjs.proxy=function(t,e){var i=Array.prototype.slice.call(arguments,2);return function(){return t.apply(e,Array.prototype.slice.call(arguments,0).concat(i))}}}(),this.createjs=this.createjs||{},function(){"use strict";function t(t,e,i){this.Event_constructor("error"),this.title=t,this.message=e,this.data=i}var e=createjs.extend(t,createjs.Event);e.clone=function(){return new createjs.ErrorEvent(this.title,this.message,this.data)},createjs.ErrorEvent=createjs.promote(t,"Event")}(),this.createjs=this.createjs||{},function(t){"use strict";function e(t,e){this.Event_constructor("progress"),this.loaded=t,this.total=null==e?1:e,this.progress=0==e?0:this.loaded/this.total}var i=createjs.extend(e,createjs.Event);i.clone=function(){return new createjs.ProgressEvent(this.loaded,this.total)},createjs.ProgressEvent=createjs.promote(e,"Event")}(window),function(){function t(e,s){function n(t){if(n[t]!==g)return n[t];var e;if("bug-string-char-index"==t)e="a"!="a"[0];else if("json"==t)e=n("json-stringify")&&n("json-parse");else{var i,r='{"a":[1,true,false,null,"\\u0000\\b\\n\\f\\r\\t"]}';if("json-stringify"==t){var h=s.stringify,u="function"==typeof h&&y;if(u){(i=function(){return 1}).toJSON=i;try{u="0"===h(0)&&"0"===h(new a)&&'""'==h(new o)&&h(v)===g&&h(g)===g&&h()===g&&"1"===h(i)&&"[1]"==h([i])&&"[null]"==h([g])&&"null"==h(null)&&"[null,null,null]"==h([g,v,null])&&h({a:[i,!0,!1,null,"\0\b\n\f\r\t"]})==r&&"1"===h(null,i)&&"[\n 1,\n 2\n]"==h([1,2],null,1)&&'"-271821-04-20T00:00:00.000Z"'==h(new c((-864e13)))&&'"+275760-09-13T00:00:00.000Z"'==h(new c(864e13))&&'"-000001-01-01T00:00:00.000Z"'==h(new c((-621987552e5)))&&'"1969-12-31T23:59:59.999Z"'==h(new c((-1)))}catch(l){u=!1}}e=u}if("json-parse"==t){var d=s.parse;if("function"==typeof d)try{if(0===d("0")&&!d(!1)){i=d(r);var _=5==i.a.length&&1===i.a[0];if(_){try{_=!d('"\t"')}catch(l){}if(_)try{_=1!==d("01")}catch(l){}if(_)try{_=1!==d("1.")}catch(l){}}}}catch(l){_=!1}e=_}}return n[t]=!!e}e||(e=r.Object()),s||(s=r.Object());var a=e.Number||r.Number,o=e.String||r.String,h=e.Object||r.Object,c=e.Date||r.Date,u=e.SyntaxError||r.SyntaxError,l=e.TypeError||r.TypeError,d=e.Math||r.Math,_=e.JSON||r.JSON;"object"==typeof _&&_&&(s.stringify=_.stringify,s.parse=_.parse);var p,f,g,m=h.prototype,v=m.toString,y=new c((-0xc782b5b800cec));try{y=-109252==y.getUTCFullYear()&&0===y.getUTCMonth()&&1===y.getUTCDate()&&10==y.getUTCHours()&&37==y.getUTCMinutes()&&6==y.getUTCSeconds()&&708==y.getUTCMilliseconds()}catch(b){}if(!n("json")){var E="[object Function]",j="[object Date]",S="[object Number]",T="[object String]",P="[object Array]",w="[object Boolean]",x=n("bug-string-char-index");if(!y)var L=d.floor,A=[0,31,59,90,120,151,181,212,243,273,304,334],I=function(t,e){return A[e]+365*(t-1970)+L((t-1969+(e=+(e>1)))/4)-L((t-1901+e)/100)+L((t-1601+e)/400)};if((p=m.hasOwnProperty)||(p=function(t){var e,i={};return(i.__proto__=null,i.__proto__={toString:1},i).toString!=v?p=function(t){var e=this.__proto__,i=t in(this.__proto__=null,this);return this.__proto__=e,i}:(e=i.constructor,p=function(t){var i=(this.constructor||e).prototype;return t in this&&!(t in i&&this[t]===i[t])}),i=null,p.call(this,t)}),f=function(t,e){var s,r,n,a=0;(s=function(){this.valueOf=0}).prototype.valueOf=0,r=new s;for(n in r)p.call(r,n)&&a++;return s=r=null,a?f=2==a?function(t,e){var i,s={},r=v.call(t)==E;for(i in t)r&&"prototype"==i||p.call(s,i)||!(s[i]=1)||!p.call(t,i)||e(i)}:function(t,e){var i,s,r=v.call(t)==E;for(i in t)r&&"prototype"==i||!p.call(t,i)||(s="constructor"===i)||e(i);(s||p.call(t,i="constructor"))&&e(i)}:(r=["valueOf","toString","toLocaleString","propertyIsEnumerable","isPrototypeOf","hasOwnProperty","constructor"],f=function(t,e){var s,n,a=v.call(t)==E,o=!a&&"function"!=typeof t.constructor&&i[typeof t.hasOwnProperty]&&t.hasOwnProperty||p;for(s in t)a&&"prototype"==s||!o.call(t,s)||e(s);for(n=r.length;s=r[--n];o.call(t,s)&&e(s));}),f(t,e)},!n("json-stringify")){var R={92:"\\\\",34:'\\"',8:"\\b",12:"\\f",10:"\\n",13:"\\r",9:"\\t"},M="000000",O=function(t,e){return(M+(e||0)).slice(-t)},C="\\u00",D=function(t){for(var e='"',i=0,s=t.length,r=!x||s>10,n=r&&(x?t.split(""):t);s>i;i++){var a=t.charCodeAt(i);switch(a){case 8:case 9:case 10:case 12:case 13:case 34:case 92:e+=R[a];break;default:if(32>a){e+=C+O(2,a.toString(16));break}e+=r?n[i]:t.charAt(i)}}return e+'"'},N=function(t,e,i,s,r,n,a){var o,h,c,u,d,_,m,y,b,E,x,A,R,M,C,k;try{o=e[t]}catch(F){}if("object"==typeof o&&o)if(h=v.call(o),h!=j||p.call(o,"toJSON"))"function"==typeof o.toJSON&&(h!=S&&h!=T&&h!=P||p.call(o,"toJSON"))&&(o=o.toJSON(t));else if(o>-1/0&&1/0>o){if(I){for(d=L(o/864e5),c=L(d/365.2425)+1970-1;I(c+1,0)<=d;c++);for(u=L((d-I(c,0))/30.42);I(c,u+1)<=d;u++);d=1+d-I(c,u),_=(o%864e5+864e5)%864e5,m=L(_/36e5)%24,y=L(_/6e4)%60,b=L(_/1e3)%60,E=_%1e3}else c=o.getUTCFullYear(),u=o.getUTCMonth(),d=o.getUTCDate(),m=o.getUTCHours(),y=o.getUTCMinutes(),b=o.getUTCSeconds(),E=o.getUTCMilliseconds();o=(0>=c||c>=1e4?(0>c?"-":"+")+O(6,0>c?-c:c):O(4,c))+"-"+O(2,u+1)+"-"+O(2,d)+"T"+O(2,m)+":"+O(2,y)+":"+O(2,b)+"."+O(3,E)+"Z"}else o=null;if(i&&(o=i.call(e,t,o)),null===o)return"null";if(h=v.call(o),h==w)return""+o;if(h==S)return o>-1/0&&1/0>o?""+o:"null";if(h==T)return D(""+o);if("object"==typeof o){for(M=a.length;M--;)if(a[M]===o)throw l();if(a.push(o),x=[],C=n,n+=r,h==P){for(R=0,M=o.length;M>R;R++)A=N(R,o,i,s,r,n,a),x.push(A===g?"null":A);k=x.length?r?"[\n"+n+x.join(",\n"+n)+"\n"+C+"]":"["+x.join(",")+"]":"[]"}else f(s||o,function(t){var e=N(t,o,i,s,r,n,a);e!==g&&x.push(D(t)+":"+(r?" ":"")+e)}),k=x.length?r?"{\n"+n+x.join(",\n"+n)+"\n"+C+"}":"{"+x.join(",")+"}":"{}";return a.pop(),k}};s.stringify=function(t,e,s){var r,n,a,o;if(i[typeof e]&&e)if((o=v.call(e))==E)n=e;else if(o==P){a={};for(var h,c=0,u=e.length;u>c;h=e[c++],o=v.call(h),(o==T||o==S)&&(a[h]=1));}if(s)if((o=v.call(s))==S){if((s-=s%1)>0)for(r="",s>10&&(s=10);r.length<s;r+=" ");}else o==T&&(r=s.length<=10?s:s.slice(0,10));return N("",(h={},h[""]=t,h),n,a,r,"",[])}}if(!n("json-parse")){var k,F,H=o.fromCharCode,U={92:"\\",34:'"',47:"/",98:"\b",116:"\t",110:"\n",102:"\f",114:"\r"},B=function(){throw k=F=null,u()},X=function(){for(var t,e,i,s,r,n=F,a=n.length;a>k;)switch(r=n.charCodeAt(k)){case 9:case 10:case 13:case 32:k++;break;case 123:case 125:case 91:case 93:case 58:case 44:return t=x?n.charAt(k):n[k],k++,t;case 34:for(t="@",k++;a>k;)if(r=n.charCodeAt(k),32>r)B();else if(92==r)switch(r=n.charCodeAt(++k)){case 92:
case 34:case 47:case 98:case 116:case 110:case 102:case 114:t+=U[r],k++;break;case 117:for(e=++k,i=k+4;i>k;k++)r=n.charCodeAt(k),r>=48&&57>=r||r>=97&&102>=r||r>=65&&70>=r||B();t+=H("0x"+n.slice(e,k));break;default:B()}else{if(34==r)break;for(r=n.charCodeAt(k),e=k;r>=32&&92!=r&&34!=r;)r=n.charCodeAt(++k);t+=n.slice(e,k)}if(34==n.charCodeAt(k))return k++,t;B();default:if(e=k,45==r&&(s=!0,r=n.charCodeAt(++k)),r>=48&&57>=r){for(48==r&&(r=n.charCodeAt(k+1),r>=48&&57>=r)&&B(),s=!1;a>k&&(r=n.charCodeAt(k),r>=48&&57>=r);k++);if(46==n.charCodeAt(k)){for(i=++k;a>i&&(r=n.charCodeAt(i),r>=48&&57>=r);i++);i==k&&B(),k=i}if(r=n.charCodeAt(k),101==r||69==r){for(r=n.charCodeAt(++k),(43==r||45==r)&&k++,i=k;a>i&&(r=n.charCodeAt(i),r>=48&&57>=r);i++);i==k&&B(),k=i}return+n.slice(e,k)}if(s&&B(),"true"==n.slice(k,k+4))return k+=4,!0;if("false"==n.slice(k,k+5))return k+=5,!1;if("null"==n.slice(k,k+4))return k+=4,null;B()}return"$"},q=function(t){var e,i;if("$"==t&&B(),"string"==typeof t){if("@"==(x?t.charAt(0):t[0]))return t.slice(1);if("["==t){for(e=[];t=X(),"]"!=t;i||(i=!0))i&&(","==t?(t=X(),"]"==t&&B()):B()),","==t&&B(),e.push(q(t));return e}if("{"==t){for(e={};t=X(),"}"!=t;i||(i=!0))i&&(","==t?(t=X(),"}"==t&&B()):B()),(","==t||"string"!=typeof t||"@"!=(x?t.charAt(0):t[0])||":"!=X())&&B(),e[t.slice(1)]=q(X());return e}B()}return t},Y=function(t,e,i){var s=G(t,e,i);s===g?delete t[e]:t[e]=s},G=function(t,e,i){var s,r=t[e];if("object"==typeof r&&r)if(v.call(r)==P)for(s=r.length;s--;)Y(r,s,i);else f(r,function(t){Y(r,t,i)});return i.call(t,e,r)};s.parse=function(t,e){var i,s;return k=0,F=""+t,i=q(X()),"$"!=X()&&B(),k=F=null,e&&v.call(e)==E?G((s={},s[""]=i,s),"",e):i}}}return s.runInContext=t,s}var e="function"==typeof define&&define.amd,i={"function":!0,object:!0},s=i[typeof exports]&&exports&&!exports.nodeType&&exports,r=i[typeof window]&&window||this,n=s&&i[typeof module]&&module&&!module.nodeType&&"object"==typeof global&&global;if(!n||n.global!==n&&n.window!==n&&n.self!==n||(r=n),s&&!e)t(r,s);else{var a=r.JSON,o=r.JSON3,h=!1,c=t(r,r.JSON3={noConflict:function(){return h||(h=!0,r.JSON=a,r.JSON3=o,a=o=null),c}});r.JSON={parse:c.parse,stringify:c.stringify}}e&&define(function(){return c})}.call(this),function(){var t={};t.appendToHead=function(e){t.getHead().appendChild(e)},t.getHead=function(){return document.head||document.getElementsByTagName("head")[0]},t.getBody=function(){return document.body||document.getElementsByTagName("body")[0]},createjs.DomUtils=t}(),function(){var t={};t.parseXML=function(t,e){var i=null;try{if(window.DOMParser){var s=new DOMParser;i=s.parseFromString(t,e)}}catch(r){}if(!i)try{i=new ActiveXObject("Microsoft.XMLDOM"),i.async=!1,i.loadXML(t)}catch(r){i=null}return i},t.parseJSON=function(t){if(null==t)return null;try{return JSON.parse(t)}catch(e){throw e}},createjs.DataUtils=t}(),this.createjs=this.createjs||{},function(){"use strict";function t(){this.src=null,this.type=null,this.id=null,this.maintainOrder=!1,this.callback=null,this.data=null,this.method=createjs.LoadItem.GET,this.values=null,this.headers=null,this.withCredentials=!1,this.mimeType=null,this.crossOrigin=null,this.loadTimeout=i.LOAD_TIMEOUT_DEFAULT}var e=t.prototype={},i=t;i.LOAD_TIMEOUT_DEFAULT=8e3,i.create=function(e){if("string"==typeof e){var s=new t;return s.src=e,s}if(e instanceof i)return e;if(e instanceof Object&&e.src)return null==e.loadTimeout&&(e.loadTimeout=i.LOAD_TIMEOUT_DEFAULT),e;throw new Error("Type not recognized.")},e.set=function(t){for(var e in t)this[e]=t[e];return this},createjs.LoadItem=i}(),function(){var t={};t.ABSOLUTE_PATT=/^(?:\w+:)?\/{2}/i,t.RELATIVE_PATT=/^[.\/]*?\//i,t.EXTENSION_PATT=/\/?[^\/]+\.(\w{1,5})$/i,t.parseURI=function(e){var i={absolute:!1,relative:!1};if(null==e)return i;var s=e.indexOf("?");s>-1&&(e=e.substr(0,s));var r;return t.ABSOLUTE_PATT.test(e)?i.absolute=!0:t.RELATIVE_PATT.test(e)&&(i.relative=!0),(r=e.match(t.EXTENSION_PATT))&&(i.extension=r[1].toLowerCase()),i},t.formatQueryString=function(t,e){if(null==t)throw new Error("You must specify data.");var i=[];for(var s in t)i.push(s+"="+escape(t[s]));return e&&(i=i.concat(e)),i.join("&")},t.buildPath=function(t,e){if(null==e)return t;var i=[],s=t.indexOf("?");if(-1!=s){var r=t.slice(s+1);i=i.concat(r.split("&"))}return-1!=s?t.slice(0,s)+"?"+this.formatQueryString(e,i):t+"?"+this.formatQueryString(e,i)},t.isCrossDomain=function(t){var e=document.createElement("a");e.href=t.src;var i=document.createElement("a");i.href=location.href;var s=""!=e.hostname&&(e.port!=i.port||e.protocol!=i.protocol||e.hostname!=i.hostname);return s},t.isLocal=function(t){var e=document.createElement("a");return e.href=t.src,""==e.hostname&&"file:"==e.protocol},t.isBinary=function(t){switch(t){case createjs.AbstractLoader.IMAGE:case createjs.AbstractLoader.BINARY:return!0;default:return!1}},t.isImageTag=function(t){return t instanceof HTMLImageElement},t.isAudioTag=function(t){return!!window.HTMLAudioElement&&t instanceof HTMLAudioElement},t.isVideoTag=function(t){return!!window.HTMLVideoElement&&t instanceof HTMLVideoElement},t.isText=function(t){switch(t){case createjs.AbstractLoader.TEXT:case createjs.AbstractLoader.JSON:case createjs.AbstractLoader.MANIFEST:case createjs.AbstractLoader.XML:case createjs.AbstractLoader.CSS:case createjs.AbstractLoader.SVG:case createjs.AbstractLoader.JAVASCRIPT:case createjs.AbstractLoader.SPRITESHEET:return!0;default:return!1}},t.getTypeByExtension=function(t){if(null==t)return createjs.AbstractLoader.TEXT;switch(t.toLowerCase()){case"jpeg":case"jpg":case"gif":case"png":case"webp":case"bmp":return createjs.AbstractLoader.IMAGE;case"ogg":case"mp3":case"webm":return createjs.AbstractLoader.SOUND;case"mp4":case"webm":case"ts":return createjs.AbstractLoader.VIDEO;case"json":return createjs.AbstractLoader.JSON;case"xml":return createjs.AbstractLoader.XML;case"css":return createjs.AbstractLoader.CSS;case"js":return createjs.AbstractLoader.JAVASCRIPT;case"svg":return createjs.AbstractLoader.SVG;default:return createjs.AbstractLoader.TEXT}},createjs.RequestUtils=t}(),this.createjs=this.createjs||{},function(){"use strict";function t(t,e,i){this.EventDispatcher_constructor(),this.loaded=!1,this.canceled=!1,this.progress=0,this.type=i,this.resultFormatter=null,t?this._item=createjs.LoadItem.create(t):this._item=null,this._preferXHR=e,this._result=null,this._rawResult=null,this._loadedItems=null,this._tagSrcAttribute=null,this._tag=null}var e=createjs.extend(t,createjs.EventDispatcher),i=t;i.POST="POST",i.GET="GET",i.BINARY="binary",i.CSS="css",i.IMAGE="image",i.JAVASCRIPT="javascript",i.JSON="json",i.JSONP="jsonp",i.MANIFEST="manifest",i.SOUND="sound",i.VIDEO="video",i.SPRITESHEET="spritesheet",i.SVG="svg",i.TEXT="text",i.XML="xml",e.getItem=function(){return this._item},e.getResult=function(t){return t?this._rawResult:this._result},e.getTag=function(){return this._tag},e.setTag=function(t){this._tag=t},e.load=function(){this._createRequest(),this._request.on("complete",this,this),this._request.on("progress",this,this),this._request.on("loadStart",this,this),this._request.on("abort",this,this),this._request.on("timeout",this,this),this._request.on("error",this,this);var t=new createjs.Event("initialize");t.loader=this._request,this.dispatchEvent(t),this._request.load()},e.cancel=function(){this.canceled=!0,this.destroy()},e.destroy=function(){this._request&&(this._request.removeAllEventListeners(),this._request.destroy()),this._request=null,this._item=null,this._rawResult=null,this._result=null,this._loadItems=null,this.removeAllEventListeners()},e.getLoadedItems=function(){return this._loadedItems},e._createRequest=function(){this._preferXHR?this._request=new createjs.XHRRequest(this._item):this._request=new createjs.TagRequest(this._item,this._tag||this._createTag(),this._tagSrcAttribute)},e._createTag=function(t){return null},e._sendLoadStart=function(){this._isCanceled()||this.dispatchEvent("loadstart")},e._sendProgress=function(t){if(!this._isCanceled()){var e=null;"number"==typeof t?(this.progress=t,e=new createjs.ProgressEvent(this.progress)):(e=t,this.progress=t.loaded/t.total,e.progress=this.progress,(isNaN(this.progress)||this.progress==1/0)&&(this.progress=0)),this.hasEventListener("progress")&&this.dispatchEvent(e)}},e._sendComplete=function(){if(!this._isCanceled()){this.loaded=!0;var t=new createjs.Event("complete");t.rawResult=this._rawResult,null!=this._result&&(t.result=this._result),this.dispatchEvent(t)}},e._sendError=function(t){!this._isCanceled()&&this.hasEventListener("error")&&(null==t&&(t=new createjs.ErrorEvent("PRELOAD_ERROR_EMPTY")),this.dispatchEvent(t))},e._isCanceled=function(){return!(null!=window.createjs&&!this.canceled)},e.resultFormatter=null,e.handleEvent=function(t){switch(t.type){case"complete":this._rawResult=t.target._response;var e=this.resultFormatter&&this.resultFormatter(this);e instanceof Function?e.call(this,createjs.proxy(this._resultFormatSuccess,this),createjs.proxy(this._resultFormatFailed,this)):(this._result=e||this._rawResult,this._sendComplete());break;case"progress":this._sendProgress(t);break;case"error":this._sendError(t);break;case"loadstart":this._sendLoadStart();break;case"abort":case"timeout":this._isCanceled()||this.dispatchEvent(new createjs.ErrorEvent("PRELOAD_"+t.type.toUpperCase()+"_ERROR"))}},e._resultFormatSuccess=function(t){this._result=t,this._sendComplete()},e._resultFormatFailed=function(t){this._sendError(t)},e.buildPath=function(t,e){return createjs.RequestUtils.buildPath(t,e)},e.toString=function(){return"[PreloadJS AbstractLoader]"},createjs.AbstractLoader=createjs.promote(t,"EventDispatcher")}(),this.createjs=this.createjs||{},function(){"use strict";function t(t,e,i){this.AbstractLoader_constructor(t,e,i),this.resultFormatter=this._formatResult,this._tagSrcAttribute="src",this.on("initialize",this._updateXHR,this)}var e=createjs.extend(t,createjs.AbstractLoader);e.load=function(){this._tag||(this._tag=this._createTag(this._item.src)),this._tag.preload="auto",this._tag.load(),this.AbstractLoader_load()},e._createTag=function(){},e._createRequest=function(){this._preferXHR?this._request=new createjs.XHRRequest(this._item):this._request=new createjs.MediaTagRequest(this._item,this._tag||this._createTag(),this._tagSrcAttribute)},e._updateXHR=function(t){t.loader.setResponseType&&t.loader.setResponseType("blob")},e._formatResult=function(t){if(this._tag.removeEventListener&&this._tag.removeEventListener("canplaythrough",this._loadedHandler),this._tag.onstalled=null,this._preferXHR){var e=window.URL||window.webkitURL,i=t.getResult(!0);t.getTag().src=e.createObjectURL(i)}return t.getTag()},createjs.AbstractMediaLoader=createjs.promote(t,"AbstractLoader")}(),this.createjs=this.createjs||{},function(){"use strict";var t=function(t){this._item=t},e=createjs.extend(t,createjs.EventDispatcher);e.load=function(){},e.destroy=function(){},e.cancel=function(){},createjs.AbstractRequest=createjs.promote(t,"EventDispatcher")}(),this.createjs=this.createjs||{},function(){"use strict";function t(t,e,i){this.AbstractRequest_constructor(t),this._tag=e,this._tagSrcAttribute=i,this._loadedHandler=createjs.proxy(this._handleTagComplete,this),this._addedToDOM=!1,this._startTagVisibility=null}var e=createjs.extend(t,createjs.AbstractRequest);e.load=function(){this._tag.onload=createjs.proxy(this._handleTagComplete,this),this._tag.onreadystatechange=createjs.proxy(this._handleReadyStateChange,this),this._tag.onerror=createjs.proxy(this._handleError,this);var t=new createjs.Event("initialize");t.loader=this._tag,this.dispatchEvent(t),this._hideTag(),this._loadTimeout=setTimeout(createjs.proxy(this._handleTimeout,this),this._item.loadTimeout),this._tag[this._tagSrcAttribute]=this._item.src,null==this._tag.parentNode&&(window.document.body.appendChild(this._tag),this._addedToDOM=!0)},e.destroy=function(){this._clean(),this._tag=null,this.AbstractRequest_destroy()},e._handleReadyStateChange=function(){clearTimeout(this._loadTimeout);var t=this._tag;("loaded"==t.readyState||"complete"==t.readyState)&&this._handleTagComplete()},e._handleError=function(){this._clean(),this.dispatchEvent("error")},e._handleTagComplete=function(){this._rawResult=this._tag,this._result=this.resultFormatter&&this.resultFormatter(this)||this._rawResult,this._clean(),this._showTag(),this.dispatchEvent("complete")},e._handleTimeout=function(){this._clean(),this.dispatchEvent(new createjs.Event("timeout"))},e._clean=function(){this._tag.onload=null,this._tag.onreadystatechange=null,this._tag.onerror=null,this._addedToDOM&&null!=this._tag.parentNode&&this._tag.parentNode.removeChild(this._tag),clearTimeout(this._loadTimeout)},e._hideTag=function(){this._startTagVisibility=this._tag.style.visibility,this._tag.style.visibility="hidden"},e._showTag=function(){this._tag.style.visibility=this._startTagVisibility},e._handleStalled=function(){},createjs.TagRequest=createjs.promote(t,"AbstractRequest")}(),this.createjs=this.createjs||{},function(){"use strict";function t(t,e,i){this.AbstractRequest_constructor(t),this._tag=e,this._tagSrcAttribute=i,this._loadedHandler=createjs.proxy(this._handleTagComplete,this)}var e=createjs.extend(t,createjs.TagRequest);e.load=function(){var t=createjs.proxy(this._handleStalled,this);this._stalledCallback=t;var e=createjs.proxy(this._handleProgress,this);this._handleProgress=e,this._tag.addEventListener("stalled",t),this._tag.addEventListener("progress",e),this._tag.addEventListener&&this._tag.addEventListener("canplaythrough",this._loadedHandler,!1),this.TagRequest_load()},e._handleReadyStateChange=function(){clearTimeout(this._loadTimeout);var t=this._tag;("loaded"==t.readyState||"complete"==t.readyState)&&this._handleTagComplete()},e._handleStalled=function(){},e._handleProgress=function(t){if(t&&!(t.loaded>0&&0==t.total)){var e=new createjs.ProgressEvent(t.loaded,t.total);this.dispatchEvent(e)}},e._clean=function(){this._tag.removeEventListener&&this._tag.removeEventListener("canplaythrough",this._loadedHandler),this._tag.removeEventListener("stalled",this._stalledCallback),this._tag.removeEventListener("progress",this._progressCallback),this.TagRequest__clean()},createjs.MediaTagRequest=createjs.promote(t,"TagRequest")}(),this.createjs=this.createjs||{},function(){"use strict";function t(t){this.AbstractRequest_constructor(t),this._request=null,this._loadTimeout=null,this._xhrLevel=1,this._response=null,this._rawResponse=null,this._canceled=!1,this._handleLoadStartProxy=createjs.proxy(this._handleLoadStart,this),this._handleProgressProxy=createjs.proxy(this._handleProgress,this),this._handleAbortProxy=createjs.proxy(this._handleAbort,this),this._handleErrorProxy=createjs.proxy(this._handleError,this),this._handleTimeoutProxy=createjs.proxy(this._handleTimeout,this),this._handleLoadProxy=createjs.proxy(this._handleLoad,this),this._handleReadyStateChangeProxy=createjs.proxy(this._handleReadyStateChange,this),!this._createXHR(t)}var e=createjs.extend(t,createjs.AbstractRequest);t.ACTIVEX_VERSIONS=["Msxml2.XMLHTTP.6.0","Msxml2.XMLHTTP.5.0","Msxml2.XMLHTTP.4.0","MSXML2.XMLHTTP.3.0","MSXML2.XMLHTTP","Microsoft.XMLHTTP"],e.getResult=function(t){return t&&this._rawResponse?this._rawResponse:this._response},e.cancel=function(){this.canceled=!0,this._clean(),this._request.abort()},e.load=function(){if(null==this._request)return void this._handleError();null!=this._request.addEventListener?(this._request.addEventListener("loadstart",this._handleLoadStartProxy,!1),this._request.addEventListener("progress",this._handleProgressProxy,!1),this._request.addEventListener("abort",this._handleAbortProxy,!1),this._request.addEventListener("error",this._handleErrorProxy,!1),this._request.addEventListener("timeout",this._handleTimeoutProxy,!1),this._request.addEventListener("load",this._handleLoadProxy,!1),this._request.addEventListener("readystatechange",this._handleReadyStateChangeProxy,!1)):(this._request.onloadstart=this._handleLoadStartProxy,this._request.onprogress=this._handleProgressProxy,this._request.onabort=this._handleAbortProxy,this._request.onerror=this._handleErrorProxy,this._request.ontimeout=this._handleTimeoutProxy,this._request.onload=this._handleLoadProxy,this._request.onreadystatechange=this._handleReadyStateChangeProxy),1==this._xhrLevel&&(this._loadTimeout=setTimeout(createjs.proxy(this._handleTimeout,this),this._item.loadTimeout));try{this._item.values&&this._item.method!=createjs.AbstractLoader.GET?this._item.method==createjs.AbstractLoader.POST&&this._request.send(createjs.RequestUtils.formatQueryString(this._item.values)):this._request.send()}catch(t){this.dispatchEvent(new createjs.ErrorEvent("XHR_SEND",null,t))}},e.setResponseType=function(t){"blob"===t&&(t=window.URL?"blob":"arraybuffer",this._responseType=t),this._request.responseType=t},e.getAllResponseHeaders=function(){return this._request.getAllResponseHeaders instanceof Function?this._request.getAllResponseHeaders():null},e.getResponseHeader=function(t){return this._request.getResponseHeader instanceof Function?this._request.getResponseHeader(t):null},e._handleProgress=function(t){if(t&&!(t.loaded>0&&0==t.total)){var e=new createjs.ProgressEvent(t.loaded,t.total);this.dispatchEvent(e)}},e._handleLoadStart=function(t){clearTimeout(this._loadTimeout),this.dispatchEvent("loadstart")},e._handleAbort=function(t){this._clean(),this.dispatchEvent(new createjs.ErrorEvent("XHR_ABORTED",null,t))},e._handleError=function(t){this._clean(),this.dispatchEvent(new createjs.ErrorEvent(t.message))},e._handleReadyStateChange=function(t){4==this._request.readyState&&this._handleLoad()},e._handleLoad=function(t){if(!this.loaded){this.loaded=!0;var e=this._checkError();if(e)return void this._handleError(e);if(this._response=this._getResponse(),"arraybuffer"===this._responseType)try{this._response=new Blob([this._response])}catch(i){if(window.BlobBuilder=window.BlobBuilder||window.WebKitBlobBuilder||window.MozBlobBuilder||window.MSBlobBuilder,"TypeError"===i.name&&window.BlobBuilder){var s=new BlobBuilder;s.append(this._response),this._response=s.getBlob()}}this._clean(),this.dispatchEvent(new createjs.Event("complete"))}},e._handleTimeout=function(t){this._clean(),this.dispatchEvent(new createjs.ErrorEvent("PRELOAD_TIMEOUT",null,t))},e._checkError=function(){var t=parseInt(this._request.status);switch(t){case 404:case 0:return new Error(t)}return null},e._getResponse=function(){if(null!=this._response)return this._response;if(null!=this._request.response)return this._request.response;try{if(null!=this._request.responseText)return this._request.responseText}catch(t){}try{if(null!=this._request.responseXML)return this._request.responseXML}catch(t){}return null},e._createXHR=function(t){var e=createjs.RequestUtils.isCrossDomain(t),i={},r=null;if(window.XMLHttpRequest)r=new XMLHttpRequest,e&&void 0===r.withCredentials&&window.XDomainRequest&&(r=new XDomainRequest);else{for(var n=0,a=s.ACTIVEX_VERSIONS.length;a>n;n++){var o=s.ACTIVEX_VERSIONS[n];try{r=new ActiveXObject(o);break}catch(h){}}if(null==r)return!1}null==t.mimeType&&createjs.RequestUtils.isText(t.type)&&(t.mimeType="text/plain; charset=utf-8"),t.mimeType&&r.overrideMimeType&&r.overrideMimeType(t.mimeType),this._xhrLevel="string"==typeof r.responseType?2:1;var c=null;if(c=t.method==createjs.AbstractLoader.GET?createjs.RequestUtils.buildPath(t.src,t.values):t.src,r.open(t.method||createjs.AbstractLoader.GET,c,!0),e&&r instanceof XMLHttpRequest&&1==this._xhrLevel&&(i.Origin=location.origin),t.values&&t.method==createjs.AbstractLoader.POST&&(i["Content-Type"]="application/x-www-form-urlencoded"),e||i["X-Requested-With"]||(i["X-Requested-With"]="XMLHttpRequest"),t.headers)for(var u in t.headers)i[u]=t.headers[u];for(u in i)r.setRequestHeader(u,i[u]);return r instanceof XMLHttpRequest&&void 0!==t.withCredentials&&(r.withCredentials=t.withCredentials),this._request=r,!0},e._clean=function(){clearTimeout(this._loadTimeout),null!=this._request.removeEventListener?(this._request.removeEventListener("loadstart",this._handleLoadStartProxy),this._request.removeEventListener("progress",this._handleProgressProxy),this._request.removeEventListener("abort",this._handleAbortProxy),this._request.removeEventListener("error",this._handleErrorProxy),this._request.removeEventListener("timeout",this._handleTimeoutProxy),this._request.removeEventListener("load",this._handleLoadProxy),this._request.removeEventListener("readystatechange",this._handleReadyStateChangeProxy)):(this._request.onloadstart=null,this._request.onprogress=null,this._request.onabort=null,this._request.onerror=null,this._request.ontimeout=null,this._request.onload=null,this._request.onreadystatechange=null)},e.toString=function(){return"[PreloadJS XHRRequest]"},createjs.XHRRequest=createjs.promote(t,"AbstractRequest")}(),this.createjs=this.createjs||{},function(){"use strict";function t(t,e,i){this.AbstractLoader_constructor(),this._plugins=[],this._typeCallbacks={},this._extensionCallbacks={},this.next=null,this.maintainScriptOrder=!0,this.stopOnError=!1,this._maxConnections=1,this._availableLoaders=[createjs.ImageLoader,createjs.JavaScriptLoader,createjs.CSSLoader,createjs.JSONLoader,createjs.JSONPLoader,createjs.SoundLoader,createjs.ManifestLoader,createjs.SpriteSheetLoader,createjs.XMLLoader,createjs.SVGLoader,createjs.BinaryLoader,createjs.VideoLoader,createjs.TextLoader],this._defaultLoaderLength=this._availableLoaders.length,this.init(t,e,i)}var e=createjs.extend(t,createjs.AbstractLoader),i=t;e.init=function(t,e,i){this.useXHR=!0,this.preferXHR=!0,this._preferXHR=!0,this.setPreferXHR(t),this._paused=!1,this._basePath=e,this._crossOrigin=i,this._loadStartWasDispatched=!1,this._currentlyLoadingScript=null,this._currentLoads=[],this._loadQueue=[],this._loadQueueBackup=[],this._loadItemsById={},this._loadItemsBySrc={},this._loadedResults={},this._loadedRawResults={},this._numItems=0,this._numItemsLoaded=0,this._scriptOrder=[],this._loadedScripts=[],this._lastProgress=NaN},i.loadTimeout=8e3,i.LOAD_TIMEOUT=0,i.BINARY=createjs.AbstractLoader.BINARY,i.CSS=createjs.AbstractLoader.CSS,i.IMAGE=createjs.AbstractLoader.IMAGE,i.JAVASCRIPT=createjs.AbstractLoader.JAVASCRIPT,i.JSON=createjs.AbstractLoader.JSON,i.JSONP=createjs.AbstractLoader.JSONP,i.MANIFEST=createjs.AbstractLoader.MANIFEST,i.SOUND=createjs.AbstractLoader.SOUND,i.VIDEO=createjs.AbstractLoader.VIDEO,i.SVG=createjs.AbstractLoader.SVG,i.TEXT=createjs.AbstractLoader.TEXT,i.XML=createjs.AbstractLoader.XML,i.POST=createjs.AbstractLoader.POST,i.GET=createjs.AbstractLoader.GET,e.registerLoader=function(t){if(!t||!t.canLoadItem)throw new Error("loader is of an incorrect type.");if(-1!=this._availableLoaders.indexOf(t))throw new Error("loader already exists.");this._availableLoaders.unshift(t)},e.unregisterLoader=function(t){var e=this._availableLoaders.indexOf(t);-1!=e&&e<this._defaultLoaderLength-1&&this._availableLoaders.splice(e,1)},e.setUseXHR=function(t){return this.setPreferXHR(t)},e.setPreferXHR=function(t){return this.preferXHR=0!=t&&null!=window.XMLHttpRequest,this.preferXHR},e.removeAll=function(){this.remove()},e.remove=function(t){var e=null;if(t&&!Array.isArray(t))e=[t];else if(t)e=t;else if(arguments.length>0)return;var i=!1;if(e){for(;e.length;){var s=e.pop(),r=this.getResult(s);for(n=this._loadQueue.length-1;n>=0;n--)if(a=this._loadQueue[n].getItem(),a.id==s||a.src==s){this._loadQueue.splice(n,1)[0].cancel();break}for(n=this._loadQueueBackup.length-1;n>=0;n--)if(a=this._loadQueueBackup[n].getItem(),a.id==s||a.src==s){this._loadQueueBackup.splice(n,1)[0].cancel();break}if(r)this._disposeItem(this.getItem(s));else for(var n=this._currentLoads.length-1;n>=0;n--){var a=this._currentLoads[n].getItem();if(a.id==s||a.src==s){this._currentLoads.splice(n,1)[0].cancel(),i=!0;break}}}i&&this._loadNext()}else{this.close();for(var o in this._loadItemsById)this._disposeItem(this._loadItemsById[o]);this.init(this.preferXHR,this._basePath)}},e.reset=function(){this.close();for(var t in this._loadItemsById)this._disposeItem(this._loadItemsById[t]);for(var e=[],i=0,s=this._loadQueueBackup.length;s>i;i++)e.push(this._loadQueueBackup[i].getItem());this.loadManifest(e,!1)},e.installPlugin=function(t){if(null!=t&&null!=t.getPreloadHandlers){this._plugins.push(t);var e=t.getPreloadHandlers();if(e.scope=t,null!=e.types)for(var i=0,s=e.types.length;s>i;i++)this._typeCallbacks[e.types[i]]=e;if(null!=e.extensions)for(i=0,s=e.extensions.length;s>i;i++)this._extensionCallbacks[e.extensions[i]]=e}},e.setMaxConnections=function(t){this._maxConnections=t,!this._paused&&this._loadQueue.length>0&&this._loadNext()},e.loadFile=function(t,e,i){if(null==t){var s=new createjs.ErrorEvent("PRELOAD_NO_FILE");return void this._sendError(s)}this._addItem(t,null,i),e!==!1?this.setPaused(!1):this.setPaused(!0)},e.loadManifest=function(t,e,s){var r=null,n=null;if(Array.isArray(t)){if(0==t.length){var a=new createjs.ErrorEvent("PRELOAD_MANIFEST_EMPTY");return void this._sendError(a)}r=t}else if("string"==typeof t)r=[{src:t,type:i.MANIFEST}];else{if("object"!=typeof t){var a=new createjs.ErrorEvent("PRELOAD_MANIFEST_NULL");return void this._sendError(a)}if(void 0!==t.src){if(null==t.type)t.type=i.MANIFEST;else if(t.type!=i.MANIFEST){var a=new createjs.ErrorEvent("PRELOAD_MANIFEST_TYPE");this._sendError(a)}r=[t]}else void 0!==t.manifest&&(r=t.manifest,n=t.path)}for(var o=0,h=r.length;h>o;o++)this._addItem(r[o],n,s);e!==!1?this.setPaused(!1):this.setPaused(!0)},e.load=function(){this.setPaused(!1)},e.getItem=function(t){return this._loadItemsById[t]||this._loadItemsBySrc[t]},e.getResult=function(t,e){var i=this._loadItemsById[t]||this._loadItemsBySrc[t];if(null==i)return null;var s=i.id;return e&&this._loadedRawResults[s]?this._loadedRawResults[s]:this._loadedResults[s]},e.getItems=function(t){var e=[];for(var i in this._loadItemsById){var s=this._loadItemsById[i],r=this.getResult(i);(t!==!0||null!=r)&&e.push({item:s,result:r,rawResult:this.getResult(i,!0)})}return e},e.setPaused=function(t){this._paused=t,this._paused||this._loadNext()},e.close=function(){for(;this._currentLoads.length;)this._currentLoads.pop().cancel();this._scriptOrder.length=0,this._loadedScripts.length=0,this.loadStartWasDispatched=!1,this._itemCount=0,this._lastProgress=NaN},e._addItem=function(t,e,i){var s=this._createLoadItem(t,e,i);if(null!=s){var r=this._createLoader(s);null!=r&&("plugins"in r&&(r.plugins=this._plugins),s._loader=r,this._loadQueue.push(r),this._loadQueueBackup.push(r),this._numItems++,this._updateProgress(),(this.maintainScriptOrder&&s.type==createjs.LoadQueue.JAVASCRIPT||s.maintainOrder===!0)&&(this._scriptOrder.push(s),this._loadedScripts.push(null)))}},e._createLoadItem=function(t,e,i){var s=createjs.LoadItem.create(t);if(null==s)return null;var r="",n=i||this._basePath;if(s.src instanceof Object){if(!s.type)return null;if(e){r=e;var a=createjs.RequestUtils.parseURI(e);null==n||a.absolute||a.relative||(r=n+r)}else null!=n&&(r=n)}else{var o=createjs.RequestUtils.parseURI(s.src);o.extension&&(s.ext=o.extension),null==s.type&&(s.type=createjs.RequestUtils.getTypeByExtension(s.ext));var h=s.src;if(!o.absolute&&!o.relative)if(e){r=e;var a=createjs.RequestUtils.parseURI(e);h=e+h,null==n||a.absolute||a.relative||(r=n+r)}else null!=n&&(r=n);s.src=r+s.src}s.path=r,(void 0===s.id||null===s.id||""===s.id)&&(s.id=h);var c=this._typeCallbacks[s.type]||this._extensionCallbacks[s.ext];if(c){var u=c.callback.call(c.scope,s,this);if(u===!1)return null;u===!0||null!=u&&(s._loader=u),o=createjs.RequestUtils.parseURI(s.src),null!=o.extension&&(s.ext=o.extension)}return this._loadItemsById[s.id]=s,this._loadItemsBySrc[s.src]=s,null==s.crossOrigin&&(s.crossOrigin=this._crossOrigin),s},e._createLoader=function(t){if(null!=t._loader)return t._loader;for(var e=this.preferXHR,i=0;i<this._availableLoaders.length;i++){var s=this._availableLoaders[i];if(s&&s.canLoadItem(t))return new s(t,e)}return null},e._loadNext=function(){if(!this._paused){this._loadStartWasDispatched||(this._sendLoadStart(),this._loadStartWasDispatched=!0),this._numItems==this._numItemsLoaded?(this.loaded=!0,this._sendComplete(),this.next&&this.next.load&&this.next.load()):this.loaded=!1;for(var t=0;t<this._loadQueue.length&&!(this._currentLoads.length>=this._maxConnections);t++){var e=this._loadQueue[t];this._canStartLoad(e)&&(this._loadQueue.splice(t,1),t--,this._loadItem(e))}}},e._loadItem=function(t){t.on("fileload",this._handleFileLoad,this),t.on("progress",this._handleProgress,this),t.on("complete",this._handleFileComplete,this),t.on("error",this._handleError,this),t.on("fileerror",this._handleFileError,this),this._currentLoads.push(t),this._sendFileStart(t.getItem()),t.load()},e._handleFileLoad=function(t){t.target=null,this.dispatchEvent(t)},e._handleFileError=function(t){var e=new createjs.ErrorEvent("FILE_LOAD_ERROR",null,t.item);this._sendError(e)},e._handleError=function(t){var e=t.target;this._numItemsLoaded++,this._finishOrderedItem(e,!0),this._updateProgress();var i=new createjs.ErrorEvent("FILE_LOAD_ERROR",null,e.getItem());this._sendError(i),this.stopOnError?this.setPaused(!0):(this._removeLoadItem(e),this._cleanLoadItem(e),this._loadNext())},e._handleFileComplete=function(t){var e=t.target,i=e.getItem(),s=e.getResult();this._loadedResults[i.id]=s;var r=e.getResult(!0);null!=r&&r!==s&&(this._loadedRawResults[i.id]=r),this._saveLoadedItems(e),this._removeLoadItem(e),this._finishOrderedItem(e)||this._processFinishedLoad(i,e),this._cleanLoadItem(e)},e._saveLoadedItems=function(t){var e=t.getLoadedItems();if(null!==e)for(var i=0;i<e.length;i++){var s=e[i].item;this._loadItemsBySrc[s.src]=s,this._loadItemsById[s.id]=s,this._loadedResults[s.id]=e[i].result,this._loadedRawResults[s.id]=e[i].rawResult}},e._finishOrderedItem=function(t,e){var i=t.getItem();if(this.maintainScriptOrder&&i.type==createjs.LoadQueue.JAVASCRIPT||i.maintainOrder){t instanceof createjs.JavaScriptLoader&&(this._currentlyLoadingScript=!1);var s=createjs.indexOf(this._scriptOrder,i);return-1!=s&&(this._loadedScripts[s]=e===!0||i,this._checkScriptLoadOrder(),!0)}return!1},e._checkScriptLoadOrder=function(){for(var t=this._loadedScripts.length,e=0;t>e;e++){var i=this._loadedScripts[e];if(null===i)break;if(i!==!0){var s=this._loadedResults[i.id];i.type==createjs.LoadQueue.JAVASCRIPT&&createjs.DomUtils.appendToHead(s);var r=i._loader;this._processFinishedLoad(i,r),this._loadedScripts[e]=!0}}},e._processFinishedLoad=function(t,e){if(this._numItemsLoaded++,!this.maintainScriptOrder&&t.type==createjs.LoadQueue.JAVASCRIPT){var i=e.getTag();createjs.DomUtils.appendToHead(i)}this._updateProgress(),this._sendFileComplete(t,e),this._loadNext()},e._canStartLoad=function(t){if(!this.maintainScriptOrder||t.preferXHR)return!0;var e=t.getItem();if(e.type!=createjs.LoadQueue.JAVASCRIPT)return!0;if(this._currentlyLoadingScript)return!1;for(var i=this._scriptOrder.indexOf(e),s=0;i>s;){var r=this._loadedScripts[s];if(null==r)return!1;s++}return this._currentlyLoadingScript=!0,!0},e._removeLoadItem=function(t){for(var e=this._currentLoads.length,i=0;e>i;i++)if(this._currentLoads[i]==t){this._currentLoads.splice(i,1);break}},e._cleanLoadItem=function(t){var e=t.getItem();e&&delete e._loader},e._handleProgress=function(t){var e=t.target;this._sendFileProgress(e.getItem(),e.progress),this._updateProgress()},e._updateProgress=function(){var t=this._numItemsLoaded/this._numItems,e=this._numItems-this._numItemsLoaded;if(e>0){for(var i=0,s=0,r=this._currentLoads.length;r>s;s++)i+=this._currentLoads[s].progress;t+=i/e*(e/this._numItems)}this._lastProgress!=t&&(this._sendProgress(t),this._lastProgress=t)},e._disposeItem=function(t){delete this._loadedResults[t.id],delete this._loadedRawResults[t.id],delete this._loadItemsById[t.id],delete this._loadItemsBySrc[t.src]},e._sendFileProgress=function(t,e){if(!this._isCanceled()&&!this._paused&&this.hasEventListener("fileprogress")){var i=new createjs.Event("fileprogress");i.progress=e,i.loaded=e,i.total=1,i.item=t,this.dispatchEvent(i)}},e._sendFileComplete=function(t,e){
if(!this._isCanceled()&&!this._paused){var i=new createjs.Event("fileload");i.loader=e,i.item=t,i.result=this._loadedResults[t.id],i.rawResult=this._loadedRawResults[t.id],t.completeHandler&&t.completeHandler(i),this.hasEventListener("fileload")&&this.dispatchEvent(i)}},e._sendFileStart=function(t){var e=new createjs.Event("filestart");e.item=t,this.hasEventListener("filestart")&&this.dispatchEvent(e)},e.toString=function(){return"[PreloadJS LoadQueue]"},createjs.LoadQueue=createjs.promote(t,"AbstractLoader")}(),this.createjs=this.createjs||{},function(){"use strict";function t(t){this.AbstractLoader_constructor(t,!0,createjs.AbstractLoader.TEXT)}var e=(createjs.extend(t,createjs.AbstractLoader),t);e.canLoadItem=function(t){return t.type==createjs.AbstractLoader.TEXT},createjs.TextLoader=createjs.promote(t,"AbstractLoader")}(),this.createjs=this.createjs||{},function(){"use strict";function t(t){this.AbstractLoader_constructor(t,!0,createjs.AbstractLoader.BINARY),this.on("initialize",this._updateXHR,this)}var e=createjs.extend(t,createjs.AbstractLoader),i=t;i.canLoadItem=function(t){return t.type==createjs.AbstractLoader.BINARY},e._updateXHR=function(t){t.loader.setResponseType("arraybuffer")},createjs.BinaryLoader=createjs.promote(t,"AbstractLoader")}(),this.createjs=this.createjs||{},function(){"use strict";function t(t,e){this.AbstractLoader_constructor(t,e,createjs.AbstractLoader.CSS),this.resultFormatter=this._formatResult,this._tagSrcAttribute="href",e?this._tag=document.createElement("style"):this._tag=document.createElement("link"),this._tag.rel="stylesheet",this._tag.type="text/css"}var e=createjs.extend(t,createjs.AbstractLoader),i=t;i.canLoadItem=function(t){return t.type==createjs.AbstractLoader.CSS},e._formatResult=function(t){if(this._preferXHR){var e=t.getTag();if(e.styleSheet)e.styleSheet.cssText=t.getResult(!0);else{var i=document.createTextNode(t.getResult(!0));e.appendChild(i)}}else e=this._tag;return createjs.DomUtils.appendToHead(e),e},createjs.CSSLoader=createjs.promote(t,"AbstractLoader")}(),this.createjs=this.createjs||{},function(){"use strict";function t(t,e){this.AbstractLoader_constructor(t,e,createjs.AbstractLoader.IMAGE),this.resultFormatter=this._formatResult,this._tagSrcAttribute="src",createjs.RequestUtils.isImageTag(t)?this._tag=t:createjs.RequestUtils.isImageTag(t.src)?this._tag=t.src:createjs.RequestUtils.isImageTag(t.tag)&&(this._tag=t.tag),null!=this._tag?this._preferXHR=!1:this._tag=document.createElement("img"),this.on("initialize",this._updateXHR,this)}var e=createjs.extend(t,createjs.AbstractLoader),i=t;i.canLoadItem=function(t){return t.type==createjs.AbstractLoader.IMAGE},e.load=function(){if(""!=this._tag.src&&this._tag.complete)return void this._sendComplete();var t=this._item.crossOrigin;1==t&&(t="Anonymous"),null==t||createjs.RequestUtils.isLocal(this._item.src)||(this._tag.crossOrigin=t),this.AbstractLoader_load()},e._updateXHR=function(t){t.loader.mimeType="text/plain; charset=x-user-defined-binary",t.loader.setResponseType&&t.loader.setResponseType("blob")},e._formatResult=function(t){return this._formatImage},e._formatImage=function(t,e){var i=this._tag,s=window.URL||window.webkitURL;if(this._preferXHR)if(s){var r=s.createObjectURL(this.getResult(!0));i.src=r,i.addEventListener("load",this._cleanUpURL,!1),i.addEventListener("error",this._cleanUpURL,!1)}else i.src=this._item.src;i.complete?t(i):(i.onload=createjs.proxy(function(){t(this._tag)},this),i.onerror=createjs.proxy(function(){e(_this._tag)},this))},e._cleanUpURL=function(t){var e=window.URL||window.webkitURL;e.revokeObjectURL(t.target.src)},createjs.ImageLoader=createjs.promote(t,"AbstractLoader")}(),this.createjs=this.createjs||{},function(){"use strict";function t(t,e){this.AbstractLoader_constructor(t,e,createjs.AbstractLoader.JAVASCRIPT),this.resultFormatter=this._formatResult,this._tagSrcAttribute="src",this.setTag(document.createElement("script"))}var e=createjs.extend(t,createjs.AbstractLoader),i=t;i.canLoadItem=function(t){return t.type==createjs.AbstractLoader.JAVASCRIPT},e._formatResult=function(t){var e=t.getTag();return this._preferXHR&&(e.text=t.getResult(!0)),e},createjs.JavaScriptLoader=createjs.promote(t,"AbstractLoader")}(),this.createjs=this.createjs||{},function(){"use strict";function t(t){this.AbstractLoader_constructor(t,!0,createjs.AbstractLoader.JSON),this.resultFormatter=this._formatResult}var e=createjs.extend(t,createjs.AbstractLoader),i=t;i.canLoadItem=function(t){return t.type==createjs.AbstractLoader.JSON},e._formatResult=function(t){var e=null;try{e=createjs.DataUtils.parseJSON(t.getResult(!0))}catch(i){var s=new createjs.ErrorEvent("JSON_FORMAT",null,i);return this._sendError(s),i}return e},createjs.JSONLoader=createjs.promote(t,"AbstractLoader")}(),this.createjs=this.createjs||{},function(){"use strict";function t(t){this.AbstractLoader_constructor(t,!1,createjs.AbstractLoader.JSONP),this.setTag(document.createElement("script")),this.getTag().type="text/javascript"}var e=createjs.extend(t,createjs.AbstractLoader),i=t;i.canLoadItem=function(t){return t.type==createjs.AbstractLoader.JSONP},e.cancel=function(){this.AbstractLoader_cancel(),this._dispose()},e.load=function(){if(null==this._item.callback)throw new Error("callback is required for loading JSONP requests.");if(null!=window[this._item.callback])throw new Error("JSONP callback '"+this._item.callback+"' already exists on window. You need to specify a different callback or re-name the current one.");window[this._item.callback]=createjs.proxy(this._handleLoad,this),window.document.body.appendChild(this._tag),this._loadTimeout=setTimeout(createjs.proxy(this._handleTimeout,this),this._item.loadTimeout),this._tag.src=this._item.src},e._handleLoad=function(t){this._result=this._rawResult=t,this._sendComplete(),this._dispose()},e._handleTimeout=function(){this._dispose(),this.dispatchEvent(new createjs.ErrorEvent("timeout"))},e._dispose=function(){window.document.body.removeChild(this._tag),delete window[this._item.callback],clearTimeout(this._loadTimeout)},createjs.JSONPLoader=createjs.promote(t,"AbstractLoader")}(),this.createjs=this.createjs||{},function(){"use strict";function t(t){this.AbstractLoader_constructor(t,null,createjs.AbstractLoader.MANIFEST),this.plugins=null,this._manifestQueue=null}var e=createjs.extend(t,createjs.AbstractLoader),i=t;i.MANIFEST_PROGRESS=.25,i.canLoadItem=function(t){return t.type==createjs.AbstractLoader.MANIFEST},e.load=function(){this.AbstractLoader_load()},e._createRequest=function(){var t=this._item.callback;null!=t?this._request=new createjs.JSONPLoader(this._item):this._request=new createjs.JSONLoader(this._item)},e.handleEvent=function(t){switch(t.type){case"complete":return this._rawResult=t.target.getResult(!0),this._result=t.target.getResult(),this._sendProgress(i.MANIFEST_PROGRESS),void this._loadManifest(this._result);case"progress":return t.loaded*=i.MANIFEST_PROGRESS,this.progress=t.loaded/t.total,(isNaN(this.progress)||this.progress==1/0)&&(this.progress=0),void this._sendProgress(t)}this.AbstractLoader_handleEvent(t)},e.destroy=function(){this.AbstractLoader_destroy(),this._manifestQueue.close()},e._loadManifest=function(t){if(t&&t.manifest){var e=this._manifestQueue=new createjs.LoadQueue;e.on("fileload",this._handleManifestFileLoad,this),e.on("progress",this._handleManifestProgress,this),e.on("complete",this._handleManifestComplete,this,!0),e.on("error",this._handleManifestError,this,!0);for(var i=0,s=this.plugins.length;s>i;i++)e.installPlugin(this.plugins[i]);e.loadManifest(t)}else this._sendComplete()},e._handleManifestFileLoad=function(t){t.target=null,this.dispatchEvent(t)},e._handleManifestComplete=function(t){this._loadedItems=this._manifestQueue.getItems(!0),this._sendComplete()},e._handleManifestProgress=function(t){this.progress=t.progress*(1-i.MANIFEST_PROGRESS)+i.MANIFEST_PROGRESS,this._sendProgress(this.progress)},e._handleManifestError=function(t){var e=new createjs.Event("fileerror");e.item=t.data,this.dispatchEvent(e)},createjs.ManifestLoader=createjs.promote(t,"AbstractLoader")}(),this.createjs=this.createjs||{},function(){"use strict";function t(t,e){this.AbstractMediaLoader_constructor(t,e,createjs.AbstractLoader.SOUND),createjs.RequestUtils.isAudioTag(t)?this._tag=t:createjs.RequestUtils.isAudioTag(t.src)?this._tag=t:createjs.RequestUtils.isAudioTag(t.tag)&&(this._tag=createjs.RequestUtils.isAudioTag(t)?t:t.src),null!=this._tag&&(this._preferXHR=!1)}var e=createjs.extend(t,createjs.AbstractMediaLoader),i=t;i.canLoadItem=function(t){return t.type==createjs.AbstractLoader.SOUND},e._createTag=function(t){var e=document.createElement("audio");return e.autoplay=!1,e.preload="none",e.src=t,e},createjs.SoundLoader=createjs.promote(t,"AbstractMediaLoader")}(),this.createjs=this.createjs||{},function(){"use strict";function t(t,e){this.AbstractMediaLoader_constructor(t,e,createjs.AbstractLoader.VIDEO),createjs.RequestUtils.isVideoTag(t)||createjs.RequestUtils.isVideoTag(t.src)?(this.setTag(createjs.RequestUtils.isVideoTag(t)?t:t.src),this._preferXHR=!1):this.setTag(this._createTag())}var e=createjs.extend(t,createjs.AbstractMediaLoader),i=t;e._createTag=function(){return document.createElement("video")},i.canLoadItem=function(t){return t.type==createjs.AbstractLoader.VIDEO},createjs.VideoLoader=createjs.promote(t,"AbstractMediaLoader")}(),this.createjs=this.createjs||{},function(){"use strict";function t(t,e){this.AbstractLoader_constructor(t,e,createjs.AbstractLoader.SPRITESHEET),this._manifestQueue=null}var e=createjs.extend(t,createjs.AbstractLoader),i=t;i.SPRITESHEET_PROGRESS=.25,i.canLoadItem=function(t){return t.type==createjs.AbstractLoader.SPRITESHEET},e.destroy=function(){this.AbstractLoader_destroy,this._manifestQueue.close()},e._createRequest=function(){var t=this._item.callback;null!=t?this._request=new createjs.JSONPLoader(this._item):this._request=new createjs.JSONLoader(this._item)},e.handleEvent=function(t){switch(t.type){case"complete":return this._rawResult=t.target.getResult(!0),this._result=t.target.getResult(),this._sendProgress(i.SPRITESHEET_PROGRESS),void this._loadManifest(this._result);case"progress":return t.loaded*=i.SPRITESHEET_PROGRESS,this.progress=t.loaded/t.total,(isNaN(this.progress)||this.progress==1/0)&&(this.progress=0),void this._sendProgress(t)}this.AbstractLoader_handleEvent(t)},e._loadManifest=function(t){if(t&&t.images){var e=this._manifestQueue=new createjs.LoadQueue(this._preferXHR,this._item.path,this._item.crossOrigin);e.on("complete",this._handleManifestComplete,this,!0),e.on("fileload",this._handleManifestFileLoad,this),e.on("progress",this._handleManifestProgress,this),e.on("error",this._handleManifestError,this,!0),e.loadManifest(t.images)}},e._handleManifestFileLoad=function(t){var e=t.result;if(null!=e){var i=this.getResult().images,s=i.indexOf(t.item.src);i[s]=e}},e._handleManifestComplete=function(t){this._result=new createjs.SpriteSheet(this._result),this._loadedItems=this._manifestQueue.getItems(!0),this._sendComplete()},e._handleManifestProgress=function(t){this.progress=t.progress*(1-i.SPRITESHEET_PROGRESS)+i.SPRITESHEET_PROGRESS,this._sendProgress(this.progress)},e._handleManifestError=function(t){var e=new createjs.Event("fileerror");e.item=t.data,this.dispatchEvent(e)},createjs.SpriteSheetLoader=createjs.promote(t,"AbstractLoader")}(),this.createjs=this.createjs||{},function(){"use strict";function t(t,e){this.AbstractLoader_constructor(t,e,createjs.AbstractLoader.SVG),this.resultFormatter=this._formatResult,this._tagSrcAttribute="data",e?this.setTag(document.createElement("svg")):(this.setTag(document.createElement("object")),this.getTag().type="image/svg+xml")}var e=createjs.extend(t,createjs.AbstractLoader),i=t;i.canLoadItem=function(t){return t.type==createjs.AbstractLoader.SVG},e._formatResult=function(t){var e=createjs.DataUtils.parseXML(t.getResult(!0),"text/xml"),i=t.getTag();return!this._preferXHR&&document.body.contains(i)&&document.body.removeChild(i),null!=e.documentElement?(i.appendChild(e.documentElement),i.style.visibility="visible",i):e},createjs.SVGLoader=createjs.promote(t,"AbstractLoader")}(),this.createjs=this.createjs||{},function(){"use strict";function t(t){this.AbstractLoader_constructor(t,!0,createjs.AbstractLoader.XML),this.resultFormatter=this._formatResult}var e=createjs.extend(t,createjs.AbstractLoader),i=t;i.canLoadItem=function(t){return t.type==createjs.AbstractLoader.XML},e._formatResult=function(t){return createjs.DataUtils.parseXML(t.getResult(!0),"text/xml")},createjs.XMLLoader=createjs.promote(t,"AbstractLoader")}(),this.createjs=this.createjs||{},function(){var t=createjs.SoundJS=createjs.SoundJS||{};t.version="0.6.2",t.buildDate="Thu, 26 Nov 2015 20:44:31 GMT"}(),this.createjs=this.createjs||{},createjs.indexOf=function(t,e){"use strict";for(var i=0,s=t.length;s>i;i++)if(e===t[i])return i;return-1},this.createjs=this.createjs||{},function(){"use strict";createjs.proxy=function(t,e){var i=Array.prototype.slice.call(arguments,2);return function(){return t.apply(e,Array.prototype.slice.call(arguments,0).concat(i))}}}(),this.createjs=this.createjs||{},function(){"use strict";function t(){throw"BrowserDetect cannot be instantiated"}var e=t.agent=window.navigator.userAgent;t.isWindowPhone=e.indexOf("IEMobile")>-1||e.indexOf("Windows Phone")>-1,t.isFirefox=e.indexOf("Firefox")>-1,t.isOpera=null!=window.opera,t.isChrome=e.indexOf("Chrome")>-1,t.isIOS=(e.indexOf("iPod")>-1||e.indexOf("iPhone")>-1||e.indexOf("iPad")>-1)&&!t.isWindowPhone,t.isAndroid=e.indexOf("Android")>-1&&!t.isWindowPhone,t.isBlackberry=e.indexOf("Blackberry")>-1,createjs.BrowserDetect=t}(),this.createjs=this.createjs||{},function(){"use strict";var t=function(){this.interrupt=null,this.delay=null,this.offset=null,this.loop=null,this.volume=null,this.pan=null,this.startTime=null,this.duration=null},e=t.prototype={},i=t;i.create=function(t){if(t instanceof i||t instanceof Object){var e=new createjs.PlayPropsConfig;return e.set(t),e}throw new Error("Type not recognized.")},e.set=function(t){for(var e in t)this[e]=t[e];return this},e.toString=function(){return"[PlayPropsConfig]"},createjs.PlayPropsConfig=i}(),this.createjs=this.createjs||{},function(){"use strict";function t(){throw"Sound cannot be instantiated"}function e(t,e){this.init(t,e)}var i=t;i.INTERRUPT_ANY="any",i.INTERRUPT_EARLY="early",i.INTERRUPT_LATE="late",i.INTERRUPT_NONE="none",i.PLAY_INITED="playInited",i.PLAY_SUCCEEDED="playSucceeded",i.PLAY_INTERRUPTED="playInterrupted",i.PLAY_FINISHED="playFinished",i.PLAY_FAILED="playFailed",i.SUPPORTED_EXTENSIONS=["mp3","ogg","opus","mpeg","wav","m4a","mp4","aiff","wma","mid"],i.EXTENSION_MAP={m4a:"mp4"},i.FILE_PATTERN=/^(?:(\w+:)\/{2}(\w+(?:\.\w+)*\/?))?([\/.]*?(?:[^?]+)?\/)?((?:[^\/?]+)\.(\w+))(?:\?(\S+)?)?$/,i.defaultInterruptBehavior=i.INTERRUPT_NONE,i.alternateExtensions=[],i.activePlugin=null,i._masterVolume=1,Object.defineProperty(i,"volume",{get:function(){return this._masterVolume},set:function(t){if(null==Number(t))return!1;if(t=Math.max(0,Math.min(1,t)),i._masterVolume=t,!this.activePlugin||!this.activePlugin.setVolume||!this.activePlugin.setVolume(t))for(var e=this._instances,s=0,r=e.length;r>s;s++)e[s].setMasterVolume(t)}}),i._masterMute=!1,Object.defineProperty(i,"muted",{get:function(){return this._masterMute},set:function(t){if(null==t)return!1;if(this._masterMute=t,!this.activePlugin||!this.activePlugin.setMute||!this.activePlugin.setMute(t))for(var e=this._instances,i=0,s=e.length;s>i;i++)e[i].setMasterMute(t);return!0}}),Object.defineProperty(i,"capabilities",{get:function(){return null==i.activePlugin?null:i.activePlugin._capabilities},set:function(t){return!1}}),i._pluginsRegistered=!1,i._lastID=0,i._instances=[],i._idHash={},i._preloadHash={},i._defaultPlayPropsHash={},i.addEventListener=null,i.removeEventListener=null,i.removeAllEventListeners=null,i.dispatchEvent=null,i.hasEventListener=null,i._listeners=null,createjs.EventDispatcher.initialize(i),i.getPreloadHandlers=function(){return{callback:createjs.proxy(i.initLoad,i),types:["sound"],extensions:i.SUPPORTED_EXTENSIONS}},i._handleLoadComplete=function(t){var e=t.target.getItem().src;if(i._preloadHash[e])for(var s=0,r=i._preloadHash[e].length;r>s;s++){var n=i._preloadHash[e][s];if(i._preloadHash[e][s]=!0,i.hasEventListener("fileload")){var t=new createjs.Event("fileload");t.src=n.src,t.id=n.id,t.data=n.data,t.sprite=n.sprite,i.dispatchEvent(t)}}},i._handleLoadError=function(t){var e=t.target.getItem().src;if(i._preloadHash[e])for(var s=0,r=i._preloadHash[e].length;r>s;s++){var n=i._preloadHash[e][s];if(i._preloadHash[e][s]=!1,i.hasEventListener("fileerror")){var t=new createjs.Event("fileerror");t.src=n.src,t.id=n.id,t.data=n.data,t.sprite=n.sprite,i.dispatchEvent(t)}}},i._registerPlugin=function(t){return!!t.isSupported()&&(i.activePlugin=new t,!0)},i.registerPlugins=function(t){i._pluginsRegistered=!0;for(var e=0,s=t.length;s>e;e++)if(i._registerPlugin(t[e]))return!0;return!1},i.initializeDefaultPlugins=function(){return null!=i.activePlugin||!i._pluginsRegistered&&!!i.registerPlugins([createjs.WebAudioPlugin,createjs.HTMLAudioPlugin])},i.isReady=function(){return null!=i.activePlugin},i.getCapabilities=function(){return null==i.activePlugin?null:i.activePlugin._capabilities},i.getCapability=function(t){return null==i.activePlugin?null:i.activePlugin._capabilities[t]},i.initLoad=function(t){return i._registerSound(t)},i._registerSound=function(t){if(!i.initializeDefaultPlugins())return!1;var s;if(t.src instanceof Object?(s=i._parseSrc(t.src),s.src=t.path+s.src):s=i._parsePath(t.src),null==s)return!1;t.src=s.src,t.type="sound";var r=t.data,n=null;if(null!=r&&(isNaN(r.channels)?isNaN(r)||(n=parseInt(r)):n=parseInt(r.channels),r.audioSprite))for(var a,o=r.audioSprite.length;o--;)a=r.audioSprite[o],i._idHash[a.id]={src:t.src,startTime:parseInt(a.startTime),duration:parseInt(a.duration)},a.defaultPlayProps&&(i._defaultPlayPropsHash[a.id]=createjs.PlayPropsConfig.create(a.defaultPlayProps));null!=t.id&&(i._idHash[t.id]={src:t.src});var h=i.activePlugin.register(t);return e.create(t.src,n),null!=r&&isNaN(r)?t.data.channels=n||e.maxPerChannel():t.data=n||e.maxPerChannel(),h.type&&(t.type=h.type),t.defaultPlayProps&&(i._defaultPlayPropsHash[t.src]=createjs.PlayPropsConfig.create(t.defaultPlayProps)),h},i.registerSound=function(t,e,s,r,n){var a={src:t,id:e,data:s,defaultPlayProps:n};t instanceof Object&&t.src&&(r=e,a=t),a=createjs.LoadItem.create(a),a.path=r,null==r||a.src instanceof Object||(a.src=r+t);var o=i._registerSound(a);if(!o)return!1;if(i._preloadHash[a.src]||(i._preloadHash[a.src]=[]),i._preloadHash[a.src].push(a),1==i._preloadHash[a.src].length)o.on("complete",createjs.proxy(this._handleLoadComplete,this)),o.on("error",createjs.proxy(this._handleLoadError,this)),i.activePlugin.preload(o);else if(1==i._preloadHash[a.src][0])return!0;return a},i.registerSounds=function(t,e){var i=[];t.path&&(e?e+=t.path:e=t.path,t=t.manifest);for(var s=0,r=t.length;r>s;s++)i[s]=createjs.Sound.registerSound(t[s].src,t[s].id,t[s].data,e,t[s].defaultPlayProps);return i},i.removeSound=function(t,s){if(null==i.activePlugin)return!1;t instanceof Object&&t.src&&(t=t.src);var r;if(t instanceof Object?r=i._parseSrc(t):(t=i._getSrcById(t).src,r=i._parsePath(t)),null==r)return!1;t=r.src,null!=s&&(t=s+t);for(var n in i._idHash)i._idHash[n].src==t&&delete i._idHash[n];return e.removeSrc(t),delete i._preloadHash[t],i.activePlugin.removeSound(t),!0},i.removeSounds=function(t,e){var i=[];t.path&&(e?e+=t.path:e=t.path,t=t.manifest);for(var s=0,r=t.length;r>s;s++)i[s]=createjs.Sound.removeSound(t[s].src,e);return i},i.removeAllSounds=function(){i._idHash={},i._preloadHash={},e.removeAll(),i.activePlugin&&i.activePlugin.removeAllSounds()},i.loadComplete=function(t){if(!i.isReady())return!1;var e=i._parsePath(t);return t=e?i._getSrcById(e.src).src:i._getSrcById(t).src,void 0!=i._preloadHash[t]&&1==i._preloadHash[t][0]},i._parsePath=function(t){"string"!=typeof t&&(t=t.toString());var e=t.match(i.FILE_PATTERN);if(null==e)return!1;for(var s=e[4],r=e[5],n=i.capabilities,a=0;!n[r];)if(r=i.alternateExtensions[a++],a>i.alternateExtensions.length)return null;t=t.replace("."+e[5],"."+r);var o={name:s,src:t,extension:r};return o},i._parseSrc=function(t){var e={name:void 0,src:void 0,extension:void 0},s=i.capabilities;for(var r in t)if(t.hasOwnProperty(r)&&s[r]){e.src=t[r],e.extension=r;break}if(!e.src)return!1;var n=e.src.lastIndexOf("/");return-1!=n?e.name=e.src.slice(n+1):e.name=e.src,e},i.play=function(t,e,s,r,n,a,o,h,c){var u;u=e instanceof Object||e instanceof createjs.PlayPropsConfig?createjs.PlayPropsConfig.create(e):createjs.PlayPropsConfig.create({interrupt:e,delay:s,offset:r,loop:n,volume:a,pan:o,startTime:h,duration:c});var l=i.createInstance(t,u.startTime,u.duration),d=i._playInstance(l,u);return d||l._playFailed(),l},i.createInstance=function(t,s,r){if(!i.initializeDefaultPlugins())return new createjs.DefaultSoundInstance(t,s,r);var n=i._defaultPlayPropsHash[t];t=i._getSrcById(t);var a=i._parsePath(t.src),o=null;return null!=a&&null!=a.src?(e.create(a.src),null==s&&(s=t.startTime),o=i.activePlugin.create(a.src,s,r||t.duration),n=n||i._defaultPlayPropsHash[a.src],n&&o.applyPlayProps(n)):o=new createjs.DefaultSoundInstance(t,s,r),o.uniqueId=i._lastID++,o},i.stop=function(){for(var t=this._instances,e=t.length;e--;)t[e].stop()},i.setVolume=function(t){if(null==Number(t))return!1;if(t=Math.max(0,Math.min(1,t)),i._masterVolume=t,!this.activePlugin||!this.activePlugin.setVolume||!this.activePlugin.setVolume(t))for(var e=this._instances,s=0,r=e.length;r>s;s++)e[s].setMasterVolume(t)},i.getVolume=function(){return this._masterVolume},i.setMute=function(t){if(null==t)return!1;if(this._masterMute=t,!this.activePlugin||!this.activePlugin.setMute||!this.activePlugin.setMute(t))for(var e=this._instances,i=0,s=e.length;s>i;i++)e[i].setMasterMute(t);return!0},i.getMute=function(){return this._masterMute},i.setDefaultPlayProps=function(t,e){t=i._getSrcById(t),i._defaultPlayPropsHash[i._parsePath(t.src).src]=createjs.PlayPropsConfig.create(e)},i.getDefaultPlayProps=function(t){return t=i._getSrcById(t),i._defaultPlayPropsHash[i._parsePath(t.src).src]},i._playInstance=function(t,e){var s=i._defaultPlayPropsHash[t.src]||{};if(null==e.interrupt&&(e.interrupt=s.interrupt||i.defaultInterruptBehavior),null==e.delay&&(e.delay=s.delay||0),null==e.offset&&(e.offset=t.getPosition()),null==e.loop&&(e.loop=t.loop),null==e.volume&&(e.volume=t.volume),null==e.pan&&(e.pan=t.pan),0==e.delay){var r=i._beginPlaying(t,e);if(!r)return!1}else{var n=setTimeout(function(){i._beginPlaying(t,e)},e.delay);t.delayTimeoutId=n}return this._instances.push(t),!0},i._beginPlaying=function(t,i){if(!e.add(t,i.interrupt))return!1;var s=t._beginPlaying(i);if(!s){var r=createjs.indexOf(this._instances,t);return r>-1&&this._instances.splice(r,1),!1}return!0},i._getSrcById=function(t){return i._idHash[t]||{src:t}},i._playFinished=function(t){e.remove(t);var i=createjs.indexOf(this._instances,t);i>-1&&this._instances.splice(i,1)},createjs.Sound=t,e.channels={},e.create=function(t,i){var s=e.get(t);return null==s&&(e.channels[t]=new e(t,i),!0)},e.removeSrc=function(t){var i=e.get(t);return null!=i&&(i._removeAll(),delete e.channels[t],!0)},e.removeAll=function(){for(var t in e.channels)e.channels[t]._removeAll();e.channels={}},e.add=function(t,i){var s=e.get(t.src);return null!=s&&s._add(t,i)},e.remove=function(t){var i=e.get(t.src);return null!=i&&(i._remove(t),!0)},e.maxPerChannel=function(){return s.maxDefault},e.get=function(t){return e.channels[t]};var s=e.prototype;s.constructor=e,s.src=null,s.max=null,s.maxDefault=100,s.length=0,s.init=function(t,e){this.src=t,this.max=e||this.maxDefault,-1==this.max&&(this.max=this.maxDefault),this._instances=[]},s._get=function(t){return this._instances[t]},s._add=function(t,e){return!!this._getSlot(e,t)&&(this._instances.push(t),this.length++,!0)},s._remove=function(t){var e=createjs.indexOf(this._instances,t);return-1!=e&&(this._instances.splice(e,1),this.length--,!0)},s._removeAll=function(){for(var t=this.length-1;t>=0;t--)this._instances[t].stop()},s._getSlot=function(e,i){var s,r;if(e!=t.INTERRUPT_NONE&&(r=this._get(0),null==r))return!0;for(var n=0,a=this.max;a>n;n++){if(s=this._get(n),null==s)return!0;if(s.playState==t.PLAY_FINISHED||s.playState==t.PLAY_INTERRUPTED||s.playState==t.PLAY_FAILED){r=s;break}e!=t.INTERRUPT_NONE&&(e==t.INTERRUPT_EARLY&&s.getPosition()<r.getPosition()||e==t.INTERRUPT_LATE&&s.getPosition()>r.getPosition())&&(r=s)}return null!=r&&(r._interrupt(),this._remove(r),!0)},s.toString=function(){return"[Sound SoundChannel]"}}(),this.createjs=this.createjs||{},function(){"use strict";var t=function(t,e,i,s){this.EventDispatcher_constructor(),this.src=t,this.uniqueId=-1,this.playState=null,this.delayTimeoutId=null,this._volume=1,Object.defineProperty(this,"volume",{get:this.getVolume,set:this.setVolume}),this._pan=0,Object.defineProperty(this,"pan",{get:this.getPan,set:this.setPan}),this._startTime=Math.max(0,e||0),Object.defineProperty(this,"startTime",{get:this.getStartTime,set:this.setStartTime}),this._duration=Math.max(0,i||0),Object.defineProperty(this,"duration",{get:this.getDuration,set:this.setDuration}),this._playbackResource=null,Object.defineProperty(this,"playbackResource",{get:this.getPlaybackResource,set:this.setPlaybackResource}),s!==!1&&s!==!0&&this.setPlaybackResource(s),this._position=0,Object.defineProperty(this,"position",{get:this.getPosition,set:this.setPosition}),this._loop=0,Object.defineProperty(this,"loop",{get:this.getLoop,set:this.setLoop}),this._muted=!1,Object.defineProperty(this,"muted",{get:this.getMuted,set:this.setMuted}),this._paused=!1,Object.defineProperty(this,"paused",{get:this.getPaused,set:this.setPaused})},e=createjs.extend(t,createjs.EventDispatcher);e.play=function(t,e,i,s,r,n){var a;return a=t instanceof Object||t instanceof createjs.PlayPropsConfig?createjs.PlayPropsConfig.create(t):createjs.PlayPropsConfig.create({interrupt:t,delay:e,offset:i,loop:s,volume:r,pan:n}),this.playState==createjs.Sound.PLAY_SUCCEEDED?(this.applyPlayProps(a),void(this._paused&&this.setPaused(!1))):(this._cleanUp(),createjs.Sound._playInstance(this,a),this)},e.stop=function(){return this._position=0,this._paused=!1,this._handleStop(),this._cleanUp(),this.playState=createjs.Sound.PLAY_FINISHED,this},e.destroy=function(){this._cleanUp(),this.src=null,this.playbackResource=null,this.removeAllEventListeners()},e.applyPlayProps=function(t){return null!=t.offset&&this.setPosition(t.offset),null!=t.loop&&this.setLoop(t.loop),null!=t.volume&&this.setVolume(t.volume),null!=t.pan&&this.setPan(t.pan),null!=t.startTime&&(this.setStartTime(t.startTime),this.setDuration(t.duration)),this},e.toString=function(){return"[AbstractSoundInstance]"},e.getPaused=function(){return this._paused},e.setPaused=function(t){return t!==!0&&t!==!1||this._paused==t||1==t&&this.playState!=createjs.Sound.PLAY_SUCCEEDED?void 0:(this._paused=t,t?this._pause():this._resume(),clearTimeout(this.delayTimeoutId),this)},e.setVolume=function(t){return t==this._volume?this:(this._volume=Math.max(0,Math.min(1,t)),this._muted||this._updateVolume(),this)},e.getVolume=function(){return this._volume},e.setMuted=function(t){return t===!0||t===!1?(this._muted=t,this._updateVolume(),this):void 0},e.getMuted=function(){return this._muted},e.setPan=function(t){return t==this._pan?this:(this._pan=Math.max(-1,Math.min(1,t)),this._updatePan(),this)},e.getPan=function(){return this._pan},e.getPosition=function(){return this._paused||this.playState!=createjs.Sound.PLAY_SUCCEEDED||(this._position=this._calculateCurrentPosition()),this._position},e.setPosition=function(t){return this._position=Math.max(0,t),this.playState==createjs.Sound.PLAY_SUCCEEDED&&this._updatePosition(),this},e.getStartTime=function(){return this._startTime},e.setStartTime=function(t){return t==this._startTime?this:(this._startTime=Math.max(0,t||0),this._updateStartTime(),this)},e.getDuration=function(){return this._duration},e.setDuration=function(t){return t==this._duration?this:(this._duration=Math.max(0,t||0),this._updateDuration(),this)},e.setPlaybackResource=function(t){return this._playbackResource=t,0==this._duration&&this._setDurationFromSource(),this},e.getPlaybackResource=function(){return this._playbackResource},e.getLoop=function(){return this._loop},e.setLoop=function(t){null!=this._playbackResource&&(0!=this._loop&&0==t?this._removeLooping(t):0==this._loop&&0!=t&&this._addLooping(t)),this._loop=t},e._sendEvent=function(t){var e=new createjs.Event(t);this.dispatchEvent(e)},e._cleanUp=function(){clearTimeout(this.delayTimeoutId),this._handleCleanUp(),this._paused=!1,createjs.Sound._playFinished(this)},e._interrupt=function(){this._cleanUp(),this.playState=createjs.Sound.PLAY_INTERRUPTED,this._sendEvent("interrupted")},e._beginPlaying=function(t){return this.setPosition(t.offset),this.setLoop(t.loop),this.setVolume(t.volume),this.setPan(t.pan),null!=t.startTime&&(this.setStartTime(t.startTime),this.setDuration(t.duration)),null!=this._playbackResource&&this._position<this._duration?(this._paused=!1,this._handleSoundReady(),this.playState=createjs.Sound.PLAY_SUCCEEDED,this._sendEvent("succeeded"),!0):(this._playFailed(),!1)},e._playFailed=function(){this._cleanUp(),this.playState=createjs.Sound.PLAY_FAILED,this._sendEvent("failed")},e._handleSoundComplete=function(t){return this._position=0,0!=this._loop?(this._loop--,this._handleLoop(),void this._sendEvent("loop")):(this._cleanUp(),this.playState=createjs.Sound.PLAY_FINISHED,void this._sendEvent("complete"))},e._handleSoundReady=function(){},e._updateVolume=function(){},e._updatePan=function(){},e._updateStartTime=function(){},e._updateDuration=function(){},e._setDurationFromSource=function(){},e._calculateCurrentPosition=function(){},e._updatePosition=function(){},e._removeLooping=function(t){},e._addLooping=function(t){},e._pause=function(){},e._resume=function(){},e._handleStop=function(){},e._handleCleanUp=function(){},e._handleLoop=function(){},createjs.AbstractSoundInstance=createjs.promote(t,"EventDispatcher"),createjs.DefaultSoundInstance=createjs.AbstractSoundInstance}(),this.createjs=this.createjs||{},function(){"use strict";var t=function(){this._capabilities=null,this._loaders={},this._audioSources={},this._soundInstances={},this._volume=1,this._loaderClass,this._soundInstanceClass},e=t.prototype;t._capabilities=null,t.isSupported=function(){return!0},e.register=function(t){var e=this._loaders[t.src];return e&&!e.canceled?this._loaders[t.src]:(this._audioSources[t.src]=!0,this._soundInstances[t.src]=[],e=new this._loaderClass(t),e.on("complete",this._handlePreloadComplete,this),this._loaders[t.src]=e,e)},e.preload=function(t){t.on("error",this._handlePreloadError,this),t.load()},e.isPreloadStarted=function(t){return null!=this._audioSources[t]},e.isPreloadComplete=function(t){return!(null==this._audioSources[t]||1==this._audioSources[t])},e.removeSound=function(t){if(this._soundInstances[t]){for(var e=this._soundInstances[t].length;e--;){var i=this._soundInstances[t][e];i.destroy()}delete this._soundInstances[t],delete this._audioSources[t],this._loaders[t]&&this._loaders[t].destroy(),delete this._loaders[t]}},e.removeAllSounds=function(){for(var t in this._audioSources)this.removeSound(t)},e.create=function(t,e,i){this.isPreloadStarted(t)||this.preload(this.register(t));var s=new this._soundInstanceClass(t,e,i,this._audioSources[t]);return this._soundInstances[t].push(s),s},e.setVolume=function(t){return this._volume=t,this._updateVolume(),!0},e.getVolume=function(){return this._volume},e.setMute=function(t){return this._updateVolume(),!0},e.toString=function(){return"[AbstractPlugin]"},e._handlePreloadComplete=function(t){var e=t.target.getItem().src;this._audioSources[e]=t.result;for(var i=0,s=this._soundInstances[e].length;s>i;i++){var r=this._soundInstances[e][i];r.setPlaybackResource(this._audioSources[e]);
}},e._handlePreloadError=function(t){},e._updateVolume=function(){},createjs.AbstractPlugin=t}(),this.createjs=this.createjs||{},function(){"use strict";function t(t){this.AbstractLoader_constructor(t,!0,createjs.AbstractLoader.SOUND)}var e=createjs.extend(t,createjs.AbstractLoader);t.context=null,e.toString=function(){return"[WebAudioLoader]"},e._createRequest=function(){this._request=new createjs.XHRRequest(this._item,(!1)),this._request.setResponseType("arraybuffer")},e._sendComplete=function(e){t.context.decodeAudioData(this._rawResult,createjs.proxy(this._handleAudioDecoded,this),createjs.proxy(this._sendError,this))},e._handleAudioDecoded=function(t){this._result=t,this.AbstractLoader__sendComplete()},createjs.WebAudioLoader=createjs.promote(t,"AbstractLoader")}(),this.createjs=this.createjs||{},function(){"use strict";function t(t,e,s,r){this.AbstractSoundInstance_constructor(t,e,s,r),this.gainNode=i.context.createGain(),this.panNode=i.context.createPanner(),this.panNode.panningModel=i._panningModel,this.panNode.connect(this.gainNode),this._updatePan(),this.sourceNode=null,this._soundCompleteTimeout=null,this._sourceNodeNext=null,this._playbackStartTime=0,this._endedHandler=createjs.proxy(this._handleSoundComplete,this)}var e=createjs.extend(t,createjs.AbstractSoundInstance),i=t;i.context=null,i._scratchBuffer=null,i.destinationNode=null,i._panningModel="equalpower",e.destroy=function(){this.AbstractSoundInstance_destroy(),this.panNode.disconnect(0),this.panNode=null,this.gainNode.disconnect(0),this.gainNode=null},e.toString=function(){return"[WebAudioSoundInstance]"},e._updatePan=function(){this.panNode.setPosition(this._pan,0,-.5)},e._removeLooping=function(t){this._sourceNodeNext=this._cleanUpAudioNode(this._sourceNodeNext)},e._addLooping=function(t){this.playState==createjs.Sound.PLAY_SUCCEEDED&&(this._sourceNodeNext=this._createAndPlayAudioNode(this._playbackStartTime,0))},e._setDurationFromSource=function(){this._duration=1e3*this.playbackResource.duration},e._handleCleanUp=function(){this.sourceNode&&this.playState==createjs.Sound.PLAY_SUCCEEDED&&(this.sourceNode=this._cleanUpAudioNode(this.sourceNode),this._sourceNodeNext=this._cleanUpAudioNode(this._sourceNodeNext)),0!=this.gainNode.numberOfOutputs&&this.gainNode.disconnect(0),clearTimeout(this._soundCompleteTimeout),this._playbackStartTime=0},e._cleanUpAudioNode=function(t){if(t){t.stop(0),t.disconnect(0);try{t.buffer=i._scratchBuffer}catch(e){}t=null}return t},e._handleSoundReady=function(t){this.gainNode.connect(i.destinationNode);var e=.001*this._duration,s=.001*this._position;s>e&&(s=e),this.sourceNode=this._createAndPlayAudioNode(i.context.currentTime-e,s),this._playbackStartTime=this.sourceNode.startTime-s,this._soundCompleteTimeout=setTimeout(this._endedHandler,1e3*(e-s)),0!=this._loop&&(this._sourceNodeNext=this._createAndPlayAudioNode(this._playbackStartTime,0))},e._createAndPlayAudioNode=function(t,e){var s=i.context.createBufferSource();s.buffer=this.playbackResource,s.connect(this.panNode);var r=.001*this._duration;return s.startTime=t+r,s.start(s.startTime,e+.001*this._startTime,r-e),s},e._pause=function(){this._position=1e3*(i.context.currentTime-this._playbackStartTime),this.sourceNode=this._cleanUpAudioNode(this.sourceNode),this._sourceNodeNext=this._cleanUpAudioNode(this._sourceNodeNext),0!=this.gainNode.numberOfOutputs&&this.gainNode.disconnect(0),clearTimeout(this._soundCompleteTimeout)},e._resume=function(){this._handleSoundReady()},e._updateVolume=function(){var t=this._muted?0:this._volume;t!=this.gainNode.gain.value&&(this.gainNode.gain.value=t)},e._calculateCurrentPosition=function(){return 1e3*(i.context.currentTime-this._playbackStartTime)},e._updatePosition=function(){this.sourceNode=this._cleanUpAudioNode(this.sourceNode),this._sourceNodeNext=this._cleanUpAudioNode(this._sourceNodeNext),clearTimeout(this._soundCompleteTimeout),this._paused||this._handleSoundReady()},e._handleLoop=function(){this._cleanUpAudioNode(this.sourceNode),this.sourceNode=this._sourceNodeNext,this._playbackStartTime=this.sourceNode.startTime,this._sourceNodeNext=this._createAndPlayAudioNode(this._playbackStartTime,0),this._soundCompleteTimeout=setTimeout(this._endedHandler,this._duration)},e._updateDuration=function(){this.playState==createjs.Sound.PLAY_SUCCEEDED&&(this._pause(),this._resume())},createjs.WebAudioSoundInstance=createjs.promote(t,"AbstractSoundInstance")}(),this.createjs=this.createjs||{},function(){"use strict";function t(){this.AbstractPlugin_constructor(),this._panningModel=i._panningModel,this.context=i.context,this.dynamicsCompressorNode=this.context.createDynamicsCompressor(),this.dynamicsCompressorNode.connect(this.context.destination),this.gainNode=this.context.createGain(),this.gainNode.connect(this.dynamicsCompressorNode),createjs.WebAudioSoundInstance.destinationNode=this.gainNode,this._capabilities=i._capabilities,this._loaderClass=createjs.WebAudioLoader,this._soundInstanceClass=createjs.WebAudioSoundInstance,this._addPropsToClasses()}var e=createjs.extend(t,createjs.AbstractPlugin),i=t;i._capabilities=null,i._panningModel="equalpower",i.context=null,i._scratchBuffer=null,i._unlocked=!1,i.isSupported=function(){var t=createjs.BrowserDetect.isIOS||createjs.BrowserDetect.isAndroid||createjs.BrowserDetect.isBlackberry;return!("file:"==location.protocol&&!t&&!this._isFileXHRSupported())&&(i._generateCapabilities(),null!=i.context)},i.playEmptySound=function(){if(null!=i.context){var t=i.context.createBufferSource();t.buffer=i._scratchBuffer,t.connect(i.context.destination),t.start(0,0,0)}},i._isFileXHRSupported=function(){var t=!0,e=new XMLHttpRequest;try{e.open("GET","WebAudioPluginTest.fail",!1)}catch(i){return t=!1}e.onerror=function(){t=!1},e.onload=function(){t=404==this.status||200==this.status||0==this.status&&""!=this.response};try{e.send()}catch(i){t=!1}return t},i._generateCapabilities=function(){if(null==i._capabilities){var t=document.createElement("audio");if(null==t.canPlayType)return null;if(null==i.context)if(window.AudioContext)i.context=new AudioContext;else{if(!window.webkitAudioContext)return null;i.context=new webkitAudioContext}null==i._scratchBuffer&&(i._scratchBuffer=i.context.createBuffer(1,1,22050)),i._compatibilitySetUp(),"ontouchstart"in window&&"running"!=i.context.state&&(i._unlock(),document.addEventListener("mousedown",i._unlock,!0),document.addEventListener("touchend",i._unlock,!0)),i._capabilities={panning:!0,volume:!0,tracks:-1};for(var e=createjs.Sound.SUPPORTED_EXTENSIONS,s=createjs.Sound.EXTENSION_MAP,r=0,n=e.length;n>r;r++){var a=e[r],o=s[a]||a;i._capabilities[a]="no"!=t.canPlayType("audio/"+a)&&""!=t.canPlayType("audio/"+a)||"no"!=t.canPlayType("audio/"+o)&&""!=t.canPlayType("audio/"+o)}i.context.destination.numberOfChannels<2&&(i._capabilities.panning=!1)}},i._compatibilitySetUp=function(){if(i._panningModel="equalpower",!i.context.createGain){i.context.createGain=i.context.createGainNode;var t=i.context.createBufferSource();t.__proto__.start=t.__proto__.noteGrainOn,t.__proto__.stop=t.__proto__.noteOff,i._panningModel=0}},i._unlock=function(){i._unlocked||(i.playEmptySound(),"running"==i.context.state&&(document.removeEventListener("mousedown",i._unlock,!0),document.removeEventListener("touchend",i._unlock,!0),i._unlocked=!0))},e.toString=function(){return"[WebAudioPlugin]"},e._addPropsToClasses=function(){var t=this._soundInstanceClass;t.context=this.context,t._scratchBuffer=i._scratchBuffer,t.destinationNode=this.gainNode,t._panningModel=this._panningModel,this._loaderClass.context=this.context},e._updateVolume=function(){var t=createjs.Sound._masterMute?0:this._volume;t!=this.gainNode.gain.value&&(this.gainNode.gain.value=t)},createjs.WebAudioPlugin=createjs.promote(t,"AbstractPlugin")}(),this.createjs=this.createjs||{},function(){"use strict";function t(){throw"HTMLAudioTagPool cannot be instantiated"}function e(t){this._tags=[]}var i=t;i._tags={},i._tagPool=new e,i._tagUsed={},i.get=function(t){var e=i._tags[t];return null==e?(e=i._tags[t]=i._tagPool.get(),e.src=t):i._tagUsed[t]?(e=i._tagPool.get(),e.src=t):i._tagUsed[t]=!0,e},i.set=function(t,e){e==i._tags[t]?i._tagUsed[t]=!1:i._tagPool.set(e)},i.remove=function(t){var e=i._tags[t];return null!=e&&(i._tagPool.set(e),delete i._tags[t],delete i._tagUsed[t],!0)},i.getDuration=function(t){var e=i._tags[t];return null!=e&&e.duration?1e3*e.duration:0},createjs.HTMLAudioTagPool=t;var s=e.prototype;s.constructor=e,s.get=function(){var t;return t=0==this._tags.length?this._createTag():this._tags.pop(),null==t.parentNode&&document.body.appendChild(t),t},s.set=function(t){var e=createjs.indexOf(this._tags,t);-1==e&&(this._tags.src=null,this._tags.push(t))},s.toString=function(){return"[TagPool]"},s._createTag=function(){var t=document.createElement("audio");return t.autoplay=!1,t.preload="none",t}}(),this.createjs=this.createjs||{},function(){"use strict";function t(t,e,i,s){this.AbstractSoundInstance_constructor(t,e,i,s),this._audioSpriteStopTime=null,this._delayTimeoutId=null,this._endedHandler=createjs.proxy(this._handleSoundComplete,this),this._readyHandler=createjs.proxy(this._handleTagReady,this),this._stalledHandler=createjs.proxy(this._playFailed,this),this._audioSpriteEndHandler=createjs.proxy(this._handleAudioSpriteLoop,this),this._loopHandler=createjs.proxy(this._handleSoundComplete,this),i?this._audioSpriteStopTime=.001*(e+i):this._duration=createjs.HTMLAudioTagPool.getDuration(this.src)}var e=createjs.extend(t,createjs.AbstractSoundInstance);e.setMasterVolume=function(t){this._updateVolume()},e.setMasterMute=function(t){this._updateVolume()},e.toString=function(){return"[HTMLAudioSoundInstance]"},e._removeLooping=function(){null!=this._playbackResource&&(this._playbackResource.loop=!1,this._playbackResource.removeEventListener(createjs.HTMLAudioPlugin._AUDIO_SEEKED,this._loopHandler,!1))},e._addLooping=function(){null==this._playbackResource||this._audioSpriteStopTime||(this._playbackResource.addEventListener(createjs.HTMLAudioPlugin._AUDIO_SEEKED,this._loopHandler,!1),this._playbackResource.loop=!0)},e._handleCleanUp=function(){var t=this._playbackResource;if(null!=t){t.pause(),t.loop=!1,t.removeEventListener(createjs.HTMLAudioPlugin._AUDIO_ENDED,this._endedHandler,!1),t.removeEventListener(createjs.HTMLAudioPlugin._AUDIO_READY,this._readyHandler,!1),t.removeEventListener(createjs.HTMLAudioPlugin._AUDIO_STALLED,this._stalledHandler,!1),t.removeEventListener(createjs.HTMLAudioPlugin._AUDIO_SEEKED,this._loopHandler,!1),t.removeEventListener(createjs.HTMLAudioPlugin._TIME_UPDATE,this._audioSpriteEndHandler,!1);try{t.currentTime=this._startTime}catch(e){}createjs.HTMLAudioTagPool.set(this.src,t),this._playbackResource=null}},e._beginPlaying=function(t){return this._playbackResource=createjs.HTMLAudioTagPool.get(this.src),this.AbstractSoundInstance__beginPlaying(t)},e._handleSoundReady=function(t){if(4!==this._playbackResource.readyState){var e=this._playbackResource;return e.addEventListener(createjs.HTMLAudioPlugin._AUDIO_READY,this._readyHandler,!1),e.addEventListener(createjs.HTMLAudioPlugin._AUDIO_STALLED,this._stalledHandler,!1),e.preload="auto",void e.load()}this._updateVolume(),this._playbackResource.currentTime=.001*(this._startTime+this._position),this._audioSpriteStopTime?this._playbackResource.addEventListener(createjs.HTMLAudioPlugin._TIME_UPDATE,this._audioSpriteEndHandler,!1):(this._playbackResource.addEventListener(createjs.HTMLAudioPlugin._AUDIO_ENDED,this._endedHandler,!1),0!=this._loop&&(this._playbackResource.addEventListener(createjs.HTMLAudioPlugin._AUDIO_SEEKED,this._loopHandler,!1),this._playbackResource.loop=!0)),this._playbackResource.play()},e._handleTagReady=function(t){this._playbackResource.removeEventListener(createjs.HTMLAudioPlugin._AUDIO_READY,this._readyHandler,!1),this._playbackResource.removeEventListener(createjs.HTMLAudioPlugin._AUDIO_STALLED,this._stalledHandler,!1),this._handleSoundReady()},e._pause=function(){this._playbackResource.pause()},e._resume=function(){this._playbackResource.play()},e._updateVolume=function(){if(null!=this._playbackResource){var t=this._muted||createjs.Sound._masterMute?0:this._volume*createjs.Sound._masterVolume;t!=this._playbackResource.volume&&(this._playbackResource.volume=t)}},e._calculateCurrentPosition=function(){return 1e3*this._playbackResource.currentTime-this._startTime},e._updatePosition=function(){this._playbackResource.removeEventListener(createjs.HTMLAudioPlugin._AUDIO_SEEKED,this._loopHandler,!1),this._playbackResource.addEventListener(createjs.HTMLAudioPlugin._AUDIO_SEEKED,this._handleSetPositionSeek,!1);try{this._playbackResource.currentTime=.001*(this._position+this._startTime)}catch(t){this._handleSetPositionSeek(null)}},e._handleSetPositionSeek=function(t){null!=this._playbackResource&&(this._playbackResource.removeEventListener(createjs.HTMLAudioPlugin._AUDIO_SEEKED,this._handleSetPositionSeek,!1),this._playbackResource.addEventListener(createjs.HTMLAudioPlugin._AUDIO_SEEKED,this._loopHandler,!1))},e._handleAudioSpriteLoop=function(t){this._playbackResource.currentTime<=this._audioSpriteStopTime||(this._playbackResource.pause(),0==this._loop?this._handleSoundComplete(null):(this._position=0,this._loop--,this._playbackResource.currentTime=.001*this._startTime,this._paused||this._playbackResource.play(),this._sendEvent("loop")))},e._handleLoop=function(t){0==this._loop&&(this._playbackResource.loop=!1,this._playbackResource.removeEventListener(createjs.HTMLAudioPlugin._AUDIO_SEEKED,this._loopHandler,!1))},e._updateStartTime=function(){this._audioSpriteStopTime=.001*(this._startTime+this._duration),this.playState==createjs.Sound.PLAY_SUCCEEDED&&(this._playbackResource.removeEventListener(createjs.HTMLAudioPlugin._AUDIO_ENDED,this._endedHandler,!1),this._playbackResource.addEventListener(createjs.HTMLAudioPlugin._TIME_UPDATE,this._audioSpriteEndHandler,!1))},e._updateDuration=function(){this._audioSpriteStopTime=.001*(this._startTime+this._duration),this.playState==createjs.Sound.PLAY_SUCCEEDED&&(this._playbackResource.removeEventListener(createjs.HTMLAudioPlugin._AUDIO_ENDED,this._endedHandler,!1),this._playbackResource.addEventListener(createjs.HTMLAudioPlugin._TIME_UPDATE,this._audioSpriteEndHandler,!1))},e._setDurationFromSource=function(){this._duration=createjs.HTMLAudioTagPool.getDuration(this.src),this._playbackResource=null},createjs.HTMLAudioSoundInstance=createjs.promote(t,"AbstractSoundInstance")}(),this.createjs=this.createjs||{},function(){"use strict";function t(){this.AbstractPlugin_constructor(),this.defaultNumChannels=2,this._capabilities=i._capabilities,this._loaderClass=createjs.SoundLoader,this._soundInstanceClass=createjs.HTMLAudioSoundInstance}var e=createjs.extend(t,createjs.AbstractPlugin),i=t;i.MAX_INSTANCES=30,i._AUDIO_READY="canplaythrough",i._AUDIO_ENDED="ended",i._AUDIO_SEEKED="seeked",i._AUDIO_STALLED="stalled",i._TIME_UPDATE="timeupdate",i._capabilities=null,i.isSupported=function(){return i._generateCapabilities(),null!=i._capabilities},i._generateCapabilities=function(){if(null==i._capabilities){var t=document.createElement("audio");if(null==t.canPlayType)return null;i._capabilities={panning:!1,volume:!0,tracks:-1};for(var e=createjs.Sound.SUPPORTED_EXTENSIONS,s=createjs.Sound.EXTENSION_MAP,r=0,n=e.length;n>r;r++){var a=e[r],o=s[a]||a;i._capabilities[a]="no"!=t.canPlayType("audio/"+a)&&""!=t.canPlayType("audio/"+a)||"no"!=t.canPlayType("audio/"+o)&&""!=t.canPlayType("audio/"+o)}}},e.register=function(t){var e=createjs.HTMLAudioTagPool.get(t.src),i=this.AbstractPlugin_register(t);return i.setTag(e),i},e.removeSound=function(t){this.AbstractPlugin_removeSound(t),createjs.HTMLAudioTagPool.remove(t)},e.create=function(t,e,i){var s=this.AbstractPlugin_create(t,e,i);return s.setPlaybackResource(null),s},e.toString=function(){return"[HTMLAudioPlugin]"},e.setVolume=e.getVolume=e.setMute=null,createjs.HTMLAudioPlugin=createjs.promote(t,"AbstractPlugin")}(),this.createjs=this.createjs||{},function(){"use strict";function t(e,i,s){this.ignoreGlobalPause=!1,this.loop=!1,this.duration=0,this.pluginData=s||{},this.target=e,this.position=null,this.passive=!1,this._paused=!1,this._curQueueProps={},this._initQueueProps={},this._steps=[],this._actions=[],this._prevPosition=0,this._stepPosition=0,this._prevPos=-1,this._target=e,this._useTicks=!1,this._inited=!1,this._registered=!1,i&&(this._useTicks=i.useTicks,this.ignoreGlobalPause=i.ignoreGlobalPause,this.loop=i.loop,i.onChange&&this.addEventListener("change",i.onChange),i.override&&t.removeTweens(e)),i&&i.paused?this._paused=!0:createjs.Tween._register(this,!0),i&&null!=i.position&&this.setPosition(i.position,t.NONE)}var e=createjs.extend(t,createjs.EventDispatcher);t.NONE=0,t.LOOP=1,t.REVERSE=2,t.IGNORE={},t._tweens=[],t._plugins={},t.get=function(e,i,s,r){return r&&t.removeTweens(e),new t(e,i,s)},t.tick=function(e,i){for(var s=t._tweens.slice(),r=s.length-1;r>=0;r--){var n=s[r];i&&!n.ignoreGlobalPause||n._paused||n.tick(n._useTicks?1:e)}},t.handleEvent=function(t){"tick"==t.type&&this.tick(t.delta,t.paused)},t.removeTweens=function(e){if(e.tweenjs_count){for(var i=t._tweens,s=i.length-1;s>=0;s--){var r=i[s];r._target==e&&(r._paused=!0,i.splice(s,1))}e.tweenjs_count=0}},t.removeAllTweens=function(){for(var e=t._tweens,i=0,s=e.length;s>i;i++){var r=e[i];r._paused=!0,r.target&&(r.target.tweenjs_count=0)}e.length=0},t.hasActiveTweens=function(e){return e?null!=e.tweenjs_count&&!!e.tweenjs_count:t._tweens&&!!t._tweens.length},t.installPlugin=function(e,i){var s=e.priority;null==s&&(e.priority=s=0);for(var r=0,n=i.length,a=t._plugins;n>r;r++){var o=i[r];if(a[o]){for(var h=a[o],c=0,u=h.length;u>c&&!(s<h[c].priority);c++);a[o].splice(c,0,e)}else a[o]=[e]}},t._register=function(e,i){var s=e._target,r=t._tweens;if(i&&!e._registered)s&&(s.tweenjs_count=s.tweenjs_count?s.tweenjs_count+1:1),r.push(e),!t._inited&&createjs.Ticker&&(createjs.Ticker.addEventListener("tick",t),t._inited=!0);else if(!i&&e._registered){s&&s.tweenjs_count--;for(var n=r.length;n--;)if(r[n]==e){r.splice(n,1);break}}e._registered=i},e.wait=function(t,e){if(null==t||0>=t)return this;var i=this._cloneProps(this._curQueueProps);return this._addStep({d:t,p0:i,e:this._linearEase,p1:i,v:e})},e.to=function(t,e,i){return(isNaN(e)||0>e)&&(e=0),this._addStep({d:e||0,p0:this._cloneProps(this._curQueueProps),e:i,p1:this._cloneProps(this._appendQueueProps(t))})},e.call=function(t,e,i){return this._addAction({f:t,p:e?e:[this],o:i?i:this._target})},e.set=function(t,e){return this._addAction({f:this._set,o:this,p:[t,e?e:this._target]})},e.play=function(t){return t||(t=this),this.call(t.setPaused,[!1],t)},e.pause=function(t){return t||(t=this),this.call(t.setPaused,[!0],t)},e.setPosition=function(t,e){0>t&&(t=0),null==e&&(e=1);var i=t,s=!1;if(i>=this.duration&&(this.loop?i%=this.duration:(i=this.duration,s=!0)),i==this._prevPos)return s;var r=this._prevPos;if(this.position=this._prevPos=i,this._prevPosition=t,this._target)if(s)this._updateTargetProps(null,1);else if(this._steps.length>0){for(var n=0,a=this._steps.length;a>n&&!(this._steps[n].t>i);n++);var o=this._steps[n-1];this._updateTargetProps(o,(this._stepPosition=i-o.t)/o.d)}return 0!=e&&this._actions.length>0&&(this._useTicks?this._runActions(i,i):1==e&&r>i?(r!=this.duration&&this._runActions(r,this.duration),this._runActions(0,i,!0)):this._runActions(r,i)),s&&this.setPaused(!0),this.dispatchEvent("change"),s},e.tick=function(t){this._paused||this.setPosition(this._prevPosition+t)},e.setPaused=function(e){return this._paused===!!e?this:(this._paused=!!e,t._register(this,!e),this)},e.w=e.wait,e.t=e.to,e.c=e.call,e.s=e.set,e.toString=function(){return"[Tween]"},e.clone=function(){throw"Tween can not be cloned."},e._updateTargetProps=function(e,i){var s,r,n,a,o,h;if(e||1!=i){if(this.passive=!!e.v,this.passive)return;e.e&&(i=e.e(i,0,1,1)),s=e.p0,r=e.p1}else this.passive=!1,s=r=this._curQueueProps;for(var c in this._initQueueProps){null==(a=s[c])&&(s[c]=a=this._initQueueProps[c]),null==(o=r[c])&&(r[c]=o=a),n=a==o||0==i||1==i||"number"!=typeof a?1==i?o:a:a+(o-a)*i;var u=!1;if(h=t._plugins[c])for(var l=0,d=h.length;d>l;l++){var _=h[l].tween(this,c,n,s,r,i,!!e&&s==r,!e);_==t.IGNORE?u=!0:n=_}u||(this._target[c]=n)}},e._runActions=function(t,e,i){var s=t,r=e,n=-1,a=this._actions.length,o=1;for(t>e&&(s=e,r=t,n=a,a=o=-1);(n+=o)!=a;){var h=this._actions[n],c=h.t;(c==r||c>s&&r>c||i&&c==t)&&h.f.apply(h.o,h.p)}},e._appendQueueProps=function(e){var i,s,r,n,a;for(var o in e)if(void 0===this._initQueueProps[o]){if(s=this._target[o],i=t._plugins[o])for(r=0,n=i.length;n>r;r++)s=i[r].init(this,o,s);this._initQueueProps[o]=this._curQueueProps[o]=void 0===s?null:s}else s=this._curQueueProps[o];for(var o in e){if(s=this._curQueueProps[o],i=t._plugins[o])for(a=a||{},r=0,n=i.length;n>r;r++)i[r].step&&i[r].step(this,o,s,e[o],a);this._curQueueProps[o]=e[o]}return a&&this._appendQueueProps(a),this._curQueueProps},e._cloneProps=function(t){var e={};for(var i in t)e[i]=t[i];return e},e._addStep=function(t){return t.d>0&&(this._steps.push(t),t.t=this.duration,this.duration+=t.d),this},e._addAction=function(t){return t.t=this.duration,this._actions.push(t),this},e._set=function(t,e){for(var i in t)e[i]=t[i]},createjs.Tween=createjs.promote(t,"EventDispatcher")}(),this.createjs=this.createjs||{},function(){"use strict";function t(t,e,i){this.EventDispatcher_constructor(),this.ignoreGlobalPause=!1,this.duration=0,this.loop=!1,this.position=null,this._paused=!1,this._tweens=[],this._labels=null,this._labelList=null,this._prevPosition=0,this._prevPos=-1,this._useTicks=!1,this._registered=!1,i&&(this._useTicks=i.useTicks,this.loop=i.loop,this.ignoreGlobalPause=i.ignoreGlobalPause,i.onChange&&this.addEventListener("change",i.onChange)),t&&this.addTween.apply(this,t),this.setLabels(e),i&&i.paused?this._paused=!0:createjs.Tween._register(this,!0),i&&null!=i.position&&this.setPosition(i.position,createjs.Tween.NONE)}var e=createjs.extend(t,createjs.EventDispatcher);e.addTween=function(t){var e=arguments.length;if(e>1){for(var i=0;e>i;i++)this.addTween(arguments[i]);return arguments[0]}return 0==e?null:(this.removeTween(t),this._tweens.push(t),t.setPaused(!0),t._paused=!1,t._useTicks=this._useTicks,t.duration>this.duration&&(this.duration=t.duration),this._prevPos>=0&&t.setPosition(this._prevPos,createjs.Tween.NONE),t)},e.removeTween=function(t){var e=arguments.length;if(e>1){for(var i=!0,s=0;e>s;s++)i=i&&this.removeTween(arguments[s]);return i}if(0==e)return!1;for(var r=this._tweens,s=r.length;s--;)if(r[s]==t)return r.splice(s,1),t.duration>=this.duration&&this.updateDuration(),!0;return!1},e.addLabel=function(t,e){this._labels[t]=e;var i=this._labelList;if(i){for(var s=0,r=i.length;r>s&&!(e<i[s].position);s++);i.splice(s,0,{label:t,position:e})}},e.setLabels=function(t){this._labels=t?t:{}},e.getLabels=function(){var t=this._labelList;if(!t){t=this._labelList=[];var e=this._labels;for(var i in e)t.push({label:i,position:e[i]});t.sort(function(t,e){return t.position-e.position})}return t},e.getCurrentLabel=function(){var t=this.getLabels(),e=this.position,i=t.length;if(i){for(var s=0;i>s&&!(e<t[s].position);s++);return 0==s?null:t[s-1].label}return null},e.gotoAndPlay=function(t){this.setPaused(!1),this._goto(t)},e.gotoAndStop=function(t){this.setPaused(!0),this._goto(t)},e.setPosition=function(t,e){var i=this._calcPosition(t),s=!this.loop&&t>=this.duration;if(i==this._prevPos)return s;this._prevPosition=t,this.position=this._prevPos=i;for(var r=0,n=this._tweens.length;n>r;r++)if(this._tweens[r].setPosition(i,e),i!=this._prevPos)return!1;return s&&this.setPaused(!0),this.dispatchEvent("change"),s},e.setPaused=function(t){this._paused=!!t,createjs.Tween._register(this,!t)},e.updateDuration=function(){this.duration=0;for(var t=0,e=this._tweens.length;e>t;t++){var i=this._tweens[t];i.duration>this.duration&&(this.duration=i.duration)}},e.tick=function(t){this.setPosition(this._prevPosition+t)},e.resolve=function(t){var e=Number(t);return isNaN(e)&&(e=this._labels[t]),e},e.toString=function(){return"[Timeline]"},e.clone=function(){throw"Timeline can not be cloned."},e._goto=function(t){var e=this.resolve(t);null!=e&&this.setPosition(e)},e._calcPosition=function(t){return 0>t?0:t<this.duration?t:this.loop?t%this.duration:this.duration},createjs.Timeline=createjs.promote(t,"EventDispatcher")}(),this.createjs=this.createjs||{},function(){"use strict";function t(){throw"Ease cannot be instantiated."}t.linear=function(t){return t},t.none=t.linear,t.get=function(t){return-1>t&&(t=-1),t>1&&(t=1),function(e){return 0==t?e:0>t?e*(e*-t+1+t):e*((2-e)*t+(1-t))}},t.getPowIn=function(t){return function(e){return Math.pow(e,t)}},t.getPowOut=function(t){return function(e){return 1-Math.pow(1-e,t)}},t.getPowInOut=function(t){return function(e){return(e*=2)<1?.5*Math.pow(e,t):1-.5*Math.abs(Math.pow(2-e,t))}},t.quadIn=t.getPowIn(2),t.quadOut=t.getPowOut(2),t.quadInOut=t.getPowInOut(2),t.cubicIn=t.getPowIn(3),t.cubicOut=t.getPowOut(3),t.cubicInOut=t.getPowInOut(3),t.quartIn=t.getPowIn(4),t.quartOut=t.getPowOut(4),t.quartInOut=t.getPowInOut(4),t.quintIn=t.getPowIn(5),t.quintOut=t.getPowOut(5),t.quintInOut=t.getPowInOut(5),t.sineIn=function(t){return 1-Math.cos(t*Math.PI/2)},t.sineOut=function(t){return Math.sin(t*Math.PI/2)},t.sineInOut=function(t){return-.5*(Math.cos(Math.PI*t)-1)},t.getBackIn=function(t){return function(e){return e*e*((t+1)*e-t)}},t.backIn=t.getBackIn(1.7),t.getBackOut=function(t){return function(e){return--e*e*((t+1)*e+t)+1}},t.backOut=t.getBackOut(1.7),t.getBackInOut=function(t){return t*=1.525,function(e){return(e*=2)<1?.5*(e*e*((t+1)*e-t)):.5*((e-=2)*e*((t+1)*e+t)+2)}},t.backInOut=t.getBackInOut(1.7),t.circIn=function(t){return-(Math.sqrt(1-t*t)-1)},t.circOut=function(t){return Math.sqrt(1- --t*t)},t.circInOut=function(t){return(t*=2)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1)},t.bounceIn=function(e){return 1-t.bounceOut(1-e)},t.bounceOut=function(t){return 1/2.75>t?7.5625*t*t:2/2.75>t?7.5625*(t-=1.5/2.75)*t+.75:2.5/2.75>t?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375},t.bounceInOut=function(e){return.5>e?.5*t.bounceIn(2*e):.5*t.bounceOut(2*e-1)+.5},t.getElasticIn=function(t,e){var i=2*Math.PI;return function(s){if(0==s||1==s)return s;var r=e/i*Math.asin(1/t);return-(t*Math.pow(2,10*(s-=1))*Math.sin((s-r)*i/e))}},t.elasticIn=t.getElasticIn(1,.3),t.getElasticOut=function(t,e){var i=2*Math.PI;return function(s){if(0==s||1==s)return s;var r=e/i*Math.asin(1/t);return t*Math.pow(2,-10*s)*Math.sin((s-r)*i/e)+1}},t.elasticOut=t.getElasticOut(1,.3),t.getElasticInOut=function(t,e){var i=2*Math.PI;return function(s){var r=e/i*Math.asin(1/t);return(s*=2)<1?-.5*(t*Math.pow(2,10*(s-=1))*Math.sin((s-r)*i/e)):t*Math.pow(2,-10*(s-=1))*Math.sin((s-r)*i/e)*.5+1}},t.elasticInOut=t.getElasticInOut(1,.3*1.5),createjs.Ease=t}(),this.createjs=this.createjs||{},function(){"use strict";function t(){throw"MotionGuidePlugin cannot be instantiated."}t.priority=0,t._rotOffS,t._rotOffE,t._rotNormS,t._rotNormE,t.install=function(){return createjs.Tween.installPlugin(t,["guide","x","y","rotation"]),createjs.Tween.IGNORE},t.init=function(t,e,i){var s=t.target;return s.hasOwnProperty("x")||(s.x=0),s.hasOwnProperty("y")||(s.y=0),s.hasOwnProperty("rotation")||(s.rotation=0),"rotation"==e&&(t.__needsRot=!0),"guide"==e?null:i},t.step=function(e,i,s,r,n){if("rotation"==i&&(e.__rotGlobalS=s,e.__rotGlobalE=r,t.testRotData(e,n)),"guide"!=i)return r;var a,o=r;o.hasOwnProperty("path")||(o.path=[]);var h=o.path;if(o.hasOwnProperty("end")||(o.end=1),o.hasOwnProperty("start")||(o.start=s&&s.hasOwnProperty("end")&&s.path===h?s.end:0),o.hasOwnProperty("_segments")&&o._length)return r;var c=h.length,u=10;if(!(c>=6&&(c-2)%4==0))throw"invalid 'path' data, please see documentation for valid paths";o._segments=[],o._length=0;for(var l=2;c>l;l+=4){for(var d,_,p=h[l-2],f=h[l-1],g=h[l+0],m=h[l+1],v=h[l+2],y=h[l+3],b=p,E=f,j=0,S=[],T=1;u>=T;T++){var P=T/u,w=1-P;d=w*w*p+2*w*P*g+P*P*v,_=w*w*f+2*w*P*m+P*P*y,j+=S[S.push(Math.sqrt((a=d-b)*a+(a=_-E)*a))-1],b=d,E=_}o._segments.push(j),o._segments.push(S),o._length+=j}a=o.orient,o.orient=!0;var x={};return t.calc(o,o.start,x),e.__rotPathS=Number(x.rotation.toFixed(5)),t.calc(o,o.end,x),e.__rotPathE=Number(x.rotation.toFixed(5)),o.orient=!1,t.calc(o,o.end,n),o.orient=a,o.orient?(e.__guideData=o,t.testRotData(e,n),r):r},t.testRotData=function(t,e){if(void 0===t.__rotGlobalS||void 0===t.__rotGlobalE){if(t.__needsRot)return;void 0!==t._curQueueProps.rotation?t.__rotGlobalS=t.__rotGlobalE=t._curQueueProps.rotation:t.__rotGlobalS=t.__rotGlobalE=e.rotation=t.target.rotation||0}if(void 0!==t.__guideData){var i=t.__guideData,s=t.__rotGlobalE-t.__rotGlobalS,r=t.__rotPathE-t.__rotPathS,n=s-r;if("auto"==i.orient)n>180?n-=360:-180>n&&(n+=360);else if("cw"==i.orient){for(;0>n;)n+=360;0==n&&s>0&&180!=s&&(n+=360)}else if("ccw"==i.orient){for(n=s-(r>180?360-r:r);n>0;)n-=360;0==n&&0>s&&-180!=s&&(n-=360)}i.rotDelta=n,i.rotOffS=t.__rotGlobalS-t.__rotPathS,t.__rotGlobalS=t.__rotGlobalE=t.__guideData=t.__needsRot=void 0}},t.tween=function(e,i,s,r,n,a,o,h){var c=n.guide;if(void 0==c||c===r.guide)return s;if(c.lastRatio!=a){var u=(c.end-c.start)*(o?c.end:a)+c.start;switch(t.calc(c,u,e.target),c.orient){case"cw":case"ccw":case"auto":e.target.rotation+=c.rotOffS+c.rotDelta*a;break;case"fixed":default:e.target.rotation+=c.rotOffS}c.lastRatio=a}return"rotation"!=i||c.orient&&"false"!=c.orient?e.target[i]:s},t.calc=function(t,e,i){if(void 0==t._segments)throw"Missing critical pre-calculated information, please file a bug";void 0==i&&(i={x:0,y:0,rotation:0});for(var s=t._segments,r=t.path,n=t._length*e,a=s.length-2,o=0;n>s[o]&&a>o;)n-=s[o],o+=2;var h=s[o+1],c=0;for(a=h.length-1;n>h[c]&&a>c;)n-=h[c],c++;var u=c/++a+n/(a*h[c]);o=2*o+2;var l=1-u;return i.x=l*l*r[o-2]+2*l*u*r[o+0]+u*u*r[o+2],i.y=l*l*r[o-1]+2*l*u*r[o+1]+u*u*r[o+3],t.orient&&(i.rotation=57.2957795*Math.atan2((r[o+1]-r[o-1])*l+(r[o+3]-r[o+1])*u,(r[o+0]-r[o-2])*l+(r[o+2]-r[o+0])*u)),i},createjs.MotionGuidePlugin=t}(),this.createjs=this.createjs||{},function(){"use strict";var t=createjs.TweenJS=createjs.TweenJS||{};t.version="0.6.2",t.buildDate="Thu, 26 Nov 2015 20:44:31 GMT"}();
!function(e,r){return"object"==typeof exports&&"object"==typeof module?r(exports):"function"==typeof define&&define.amd?define(["exports"],r):void r(e.filbert||(e.filbert={}))}(this,function(e){"use strict";function r(e){me=e||{};for(var r in ge)Object.prototype.hasOwnProperty.call(me,r)||(me[r]=ge[r]);ve=me.sourceFile||null}function t(e,r){var t=Ne(be,e),n=new SyntaxError(r);throw n.pos=e,n.loc=t,n.raisedAt=xe,n}function n(e){function r(e){if(1==e.length)return t+="return str === "+JSON.stringify(e[0])+";";t+="switch(str){";for(var r=0;r<e.length;++r)t+="case "+JSON.stringify(e[r])+":";t+="return true}return false;"}e=e.split(" ");var t="",n=[];e:for(var a=0;a<e.length;++a){for(var o=0;o<n.length;++o)if(n[o][0].length==e[a].length){n[o].push(e[a]);continue e}n.push([e[a]])}if(n.length>3){n.sort(function(e,r){return r.length-e.length}),t+="switch(str.length){";for(var a=0;a<n.length;++a){var i=n[a];t+="case "+i[0].length+":",r(i)}t+="}"}else r(e);return new Function("str",t)}function a(){this.line=Pe,this.column=xe-Oe}function o(){Pe=1,xe=Oe=0,ke=!0,Ve.init(),qe=0,Re.init()}function i(e,r){we=xe,me.locations&&(Ie=new a),Ce=e,e!==Fr&&e!==Ar&&e!==Pr||++Be,e!==Gr&&e!==Mr&&e!==Or||--Be,e!==ze&&p(),je=r,ke=e.beforeExpr}function s(){for(var e=be.charCodeAt(++xe);xe<ye&&!u(e);)++xe,e=be.charCodeAt(xe)}function c(){var e=xe,r=me.onComment&&me.locations&&new a;s(),me.onComment&&me.onComment(be.slice(e+1,xe),e,xe,r,me.locations&&new a)}function p(){for(;xe<ye;){var e=be.charCodeAt(xe);if(35===e)c();else if(92===e)++xe,u(be.charCodeAt(xe))?(13===be.charCodeAt(xe)&&10===be.charCodeAt(xe+1)&&++xe,++xe,me.location&&(Oe=xe,++Pe)):t(xe,"Unexpected character after line continuation character");else if(d(e))++xe;else{if(!(Be>0&&u(e)))break;13===e&&10===be.charCodeAt(xe+1)&&++xe,++xe,me.location&&(Oe=xe,++Pe)}}}function d(e){return!!(32===e||9===e||11===e||12===e||160===e||e>=5760&&it.test(String.fromCharCode(e)))}function u(e){return 10===e||13===e||8232===e||8233===e}function l(){var e=be.charCodeAt(xe+1);return e>=48&&e<=57?C(!0):(++xe,i(qr))}function f(){if(ke)return++xe,w();var e=be.charCodeAt(xe+1);return 47===e?E(Yr,2):61===e?E(Ur,2):E(Rr,1)}function h(e){var r=be.charCodeAt(xe+1);return 42===r&&r===e?E(rt,2):61===r?E(Ur,2):E(Qr,1)}function m(e){var r=be.charCodeAt(xe+1);return 61===r?E(Ur,2):E(124===e?Xr:$r,1)}function b(){var e=be.charCodeAt(xe+1);return 61===e?E(Ur,2):E(zr,1)}function y(e){var r=be.charCodeAt(xe+1);return 61===r?E(Ur,2):E(Kr,1)}function v(e){var r=be.charCodeAt(xe+1),t=1;return r===e?(t=2,61===be.charCodeAt(xe+t)?E(Ur,t+1):E(Hr,t)):(61===r&&(t=2),E(Wr,t))}function S(e){var r=be.charCodeAt(xe+1);return 61===r?E(Jr,2):E(Tr,1)}function g(){for(var e,r,t="",n=xe;n<ye;)if(e=be.charCodeAt(n),d(e))t+=String.fromCharCode(e),++n;else if(u(e))t="",13===e&&10===be.charCodeAt(n+1)&&++n,++n,xe=n,me.locations&&(Oe=n,++Pe);else{if(35!==e)break;do r=be.charCodeAt(++n);while(n<ye&&10!==r)}var o;if(t.length>0)if(Ve.isIndent(t))o=$e,Ve.count()>=1&&(Ee+=Ve.len(Ve.count()-1)),Ve.addIndent(t);else if(Ve.isDedent(t)){o=He,Ve.addDedent(t);var i=Ve.count()-Ve.dedentCount;i>=2&&(Ee+=Ve.len(i)-Ve.len(i-1))}else xe+=t.length;else n>=ye?o=Xe:Ve.count()>0&&(o=He,Ve.updateDedent());switch(o){case $e:case He:return E(o,n-++xe);case Xe:return xe=ye,me.locations&&(_e=new a),E(o,0);default:return Ce=null,x()}}function N(e){switch(e){case 13:case 10:case 8232:case 8233:return++xe,13===e&&10===be.charCodeAt(xe)&&++xe,me.locations&&(++Pe,Oe=xe),i(ze);case 35:return c(),x();case 46:return l();case 40:return++xe,i(Fr);case 41:return++xe,i(Gr);case 59:return++xe,i(Br);case 44:return++xe,i(Lr);case 91:return++xe,i(Pr);case 93:return++xe,i(Or);case 123:return++xe,i(Ar);case 125:return++xe,i(Mr);case 58:return++xe,i(Dr);case 63:return++xe,i(Vr);case 48:var r=be.charCodeAt(xe+1);if(120===r||88===r)return I();case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:return C(!1);case 34:case 39:return j(e);case 47:return f(e);case 42:case 37:return h(e);case 124:case 38:return m(e);case 94:return b();case 43:case 45:return y(e);case 60:case 62:return v(e);case 61:case 33:return S(e);case 126:return E(et,1)}return!1}function x(e){if(!(Ce===He&&(Ve.pop(),Ve.dedentCount>0))){if(e?xe=Ee+1:Ee=xe,me.locations&&(_e=new a),e)return w();if(xe>=ye)return i(Xe);if(Ce===ze)return g();var r=be.charCodeAt(xe);if(ft(r)||92===r)return O();var n=N(r);if(n===!1){var o=String.fromCharCode(r);if("\\"===o||pt.test(o))return O();t(xe,"Unexpected character '"+o+"'")}return n}}function E(e,r){var t=be.slice(xe,xe+r);xe+=r,i(e,t)}function w(){for(var e,r,n,a="",o=xe;;){xe>=ye&&t(o,"Unterminated regular expression");var s=be.charAt(xe);if(ut.test(s)&&t(o,"Unterminated regular expression"),e)e=!1;else{if("["===s)r=!0;else if("]"===s&&r)r=!1;else if("/"===s&&!r)break;e="\\"===s}++xe}a=be.slice(o,xe),++xe;var c=P();c&&!/^[gmsiy]*$/.test(c)&&t(o,"Invalid regular expression flag");try{n=new RegExp(a,c)}catch(p){p instanceof SyntaxError&&t(o,"Error parsing regular expression: "+p.message),t(p)}return i(Ue,n)}function _(e,r){for(var t=xe,n=0,a=0,o=null==r?1/0:r;a<o;++a){var i,s=be.charCodeAt(xe);if(i=s>=97?s-97+10:s>=65?s-65+10:s>=48&&s<=57?s-48:1/0,i>=e)break;++xe,n=n*e+i}return xe===t||null!=r&&xe-t!==r?null:n}function I(){xe+=2;var e=_(16);return null==e&&t(Ee+2,"Expected hexadecimal number"),ft(be.charCodeAt(xe))&&t(xe,"Identifier directly after number"),i(Te,e)}function C(e){var r=xe,n=!1,a=48===be.charCodeAt(xe);e||null!==_(10)||t(r,"Invalid number"),46===be.charCodeAt(xe)&&(++xe,_(10),n=!0);var o=be.charCodeAt(xe);69!==o&&101!==o||(o=be.charCodeAt(++xe),43!==o&&45!==o||++xe,null===_(10)&&t(r,"Invalid number"),n=!0),ft(be.charCodeAt(xe))&&t(xe,"Identifier directly after number");var s,c=be.slice(r,xe);return n?s=parseFloat(c):a&&1!==c.length?/[89]/.test(c)||Le?t(r,"Invalid number"):s=parseInt(c,8):s=parseInt(c,10),i(Te,s)}function j(e){xe++;var r=be.charCodeAt(xe),n=!1;r===e&&be.charCodeAt(xe+1)===e&&(n=!0,xe+=2);for(var a="";;){xe>=ye&&t(Ee,"Unterminated string constant");var r=be.charCodeAt(xe);if(r===e){if(!n)return++xe,i(Je,a);if(be.charCodeAt(xe+1)===e&&be.charCodeAt(xe+2)===e)return xe+=3,i(Je,a)}if(92===r){r=be.charCodeAt(++xe);var o=/^[0-7]+/.exec(be.slice(xe,xe+3));for(o&&(o=o[0]);o&&parseInt(o,8)>255;)o=o.slice(0,-1);if("0"===o&&(o=null),++xe,o)Le&&t(xe-2,"Octal literal in strict mode"),a+=String.fromCharCode(parseInt(o,8)),xe+=o.length-1;else switch(r){case 110:a+="\n";break;case 114:a+="\r";break;case 120:a+=String.fromCharCode(k(2));break;case 117:a+=String.fromCharCode(k(4));break;case 85:r=k(8),r<65535&&(r<55296||56319<r)?a+=String.fromCharCode(r):(r-=65536,a+=String.fromCharCode((r>>10)+55296)+String.fromCharCode(r%1024+56320));break;case 116:a+="\t";break;case 98:a+="\b";break;case 118:a+="\x0B";break;case 102:a+="\f";break;case 48:a+="\0";break;case 13:10===be.charCodeAt(xe)&&++xe;case 10:me.locations&&(Oe=xe,++Pe);break;default:a+="\\"+String.fromCharCode(r)}}else u(r)?n?(a+=String.fromCharCode(r),++xe,13===r&&10===be.charCodeAt(xe)&&(++xe,a+="\n"),me.location&&(Oe=xe,++Pe)):t(Ee,"Unterminated string constant"):(a+=String.fromCharCode(r),++xe)}}function k(e){var r=_(16,e);return null===r&&t(Ee,"Bad character escape sequence"),r}function P(){nt=!1;for(var e,r=!0,n=xe;;){var a=be.charCodeAt(xe);if(ht(a))nt&&(e+=be.charAt(xe)),++xe;else{if(92!==a)break;nt||(e=be.slice(n,xe)),nt=!0,117!=be.charCodeAt(++xe)&&t(xe,"Expecting Unicode escape sequence \\uXXXX"),++xe;var o=k(4),i=String.fromCharCode(o);i||t(xe-1,"Invalid Unicode escape"),(r?ft(o):ht(o))||t(xe-4,"Invalid Unicode escape"),e+=i}r=!1}return nt?e:be.slice(n,xe)}function O(){var e=P(),r=We;return!nt&&ot(e)&&(r=kr[e]),i(r,e)}function A(){Ae=Ee,Me=we,Fe=Ie,x()}function M(){this.type=null}function F(){this.start=_e,this.end=null,null!==ve&&(this.source=ve)}function G(){var e=new M;return me.locations&&(e.loc=new F),me.directSourceFile&&(e.sourceFile=me.directSourceFile),me.ranges&&(e.range=[Ee,0]),e}function L(e,r){return e.type=r,me.locations&&(e.loc.end=Fe),me.ranges&&(e.range[1]=Me),e}function B(e){var r=new M;return me.locations&&(r.loc=new F,r.loc.start=e.loc.start),me.ranges&&(r.range=[e.range[0],0]),r}function D(e){if(Ce===e)return A(),!0}function q(e){Ce===e?A():V()}function V(){t(Ee,"Unexpected token")}function R(e){"Identifier"!==e.type&&"MemberExpression"!==e.type&&t(e.start,"Assigning to rvalue"),Le&&"Identifier"===e.type&&at(e.name)&&t(e.start,"Assigning to "+e.name+" in strict mode")}function T(e){return e.callee&&e.callee.object&&e.callee.object.object&&e.callee.object.object.name===me.runtimeParamName&&e.callee.property&&"tuple"===e.callee.property.name?e.arguments:null}function U(e,r){(!e||e.length<1)&&V();var t=[],n=Se.createNodeSpan(r,r,"Identifier",{name:"__filbertTmp"+qe++}),a=Se.createVarDeclFromId(r,n,r);t.push(a);for(var o=0;o<e.length;o++){var i=e[o],s=T(i);if(s)for(var c=Se.createNodeSpan(r,r,"Literal",{value:o}),p=Se.createNodeSpan(r,r,"MemberExpression",{object:n,property:c,computed:!0}),d=U(s,p),u=0;u<d.length;u++)t.push(d[u]);else{R(i);var l=Se.createNodeSpan(r,r,"Literal",{value:o}),f=Se.createNodeSpan(r,r,"MemberExpression",{object:n,property:l,computed:!0});if("Identifier"!==i.type||Re.exists(i.name)){var h=B(i);h.left=i,h.operator="=",h.right=f,L(h,"AssignmentExpression"),t.push(Se.createNodeFrom(h,"ExpressionStatement",{expression:h}))}else{Re.addVar(i.name);var m=Se.createVarDeclFromId(i,i,f);t.push(m)}}}return t}function J(e){Ae=Me=xe,me.locations&&(Fe=new a),Ge=Le=null,Be=0,x();var r=e||G();for(e||(r.body=[]);Ce!==Xe;){var t=W();t&&r.body.push(t)}return L(r,"Program")}function W(){(Ce===Rr||Ce===Ur&&"/="==je)&&x(!0);var e=Ce,r=G();switch(e){case Ye:return A(),L(r,"BreakStatement");case er:return A(),L(r,"ContinueStatement");case Ze:return A(),se(r);case rr:return A(),de(r);case sr:return A(),$(r);case cr:return s(),A(),W();case dr:case nr:return A(),Ce===Fr?r.test=K():r.test=H(),q(Dr),r.consequent=z(),Ce===nr?r.alternate=W():r.alternate=D(ar)&&D(Dr)?z():null,L(r,"IfStatement");case ur:return s(),A(),W();case ze:return A(),null;case hr:return A(),L(r,"EmptyStatement");case br:return Ge||me.allowReturnOutsideFunction||t(Ee,"'return' outside of function"),A(),Ce===ze||Ce===Xe?r.argument=null:r.argument=H(),L(r,"ReturnStatement");case yr:if(A(),r.block=X(),r.handler=null,Ce===_catch){var n=G();A(),q(Fr),n.param=fe(),Le&&at(n.param.name)&&t(n.param.start,"Binding "+n.param.name+" in strict mode"),q(Gr),n.guard=null,n.body=X(),r.handler=L(n,"CatchClause")}return r.guardedHandlers=De,r.finalizer=D(ir)?X():null,r.handler||r.finalizer||t(r.start,"Missing catch or finally clause"),L(r,"TryStatement");case vr:return A(),Ce===Fr?r.test=K():r.test=H(),q(Dr),r.body=z(),L(r,"WhileStatement");case Sr:return Le&&t(Ee,"'with' in strict mode"),A(),r.object=K(),r.body=W(),L(r,"WithStatement");case Br:return A(),L(r,"EmptyStatement");default:var a=H();return Ce!==Br&&Ce!==ze&&Ce!==Xe&&V(),"VariableDeclaration"===a.type||"BlockStatement"===a.type?a:(r.expression=a,L(r,"ExpressionStatement"))}}function X(){var e=G();for(e.body=[];Ce!==He&&Ce!==Xe;){var r=W();r&&e.body.push(r)}return Ce===He&&A(),L(e,"BlockStatement")}function z(){var e=G();if(e.body=[],D(ze)){if(Ce===$e)for(q($e);!D(He)&&!D(Xe);){var r=W();r&&e.body.push(r)}}else Ce!==Xe&&(e.body.push(W()),A());return L(e,"BlockStatement")}function $(e){var r=H(!1,!0),t=T(r);t||R(r),q(Cr);var n=H();q(Dr);var a=z();return L(e,"BlockStatement"),Se.createFor(e,r,t,n,a)}function H(e,r){return Q(r)}function K(){q(Fr);var e=H();return q(Gr),e}function Q(e){var r=Y(e);if(Ce.isAssign){var t=T(r);if(t){A();var n=Y(e),a=B(r);return a.body=U(t,n),L(a,"BlockStatement")}if(Re.isClass()){var o=Se.createNodeFrom(r,"ThisExpression");r=Se.createNodeFrom(r,"MemberExpression",{object:o,property:r})}var i=B(r);if(i.operator=je,i.left=r,A(),i.right=Y(e),R(r),"+="===i.operator||"*="===i.operator){var n=Se.createNodeSpan(i.right,i.right,"CallExpression");n.callee=Se.createNodeOpsCallee(n,"+="===i.operator?"add":"multiply"),n.arguments=[r,i.right],i.right=n,i.operator="="}return"Identifier"!==r.type||Re.exists(r.name)?L(i,"AssignmentExpression"):((!i.operator||i.operator.length>1)&&V(),Re.addVar(r.name),Se.createVarDeclFromId(i.left,i.left,i.right))}return r}function Y(e){var r=Z(e);return Ce===Lr?he(e,r):r}function Z(e){return ee(re(e),-1,e)}function ee(e,r,n){var a,o,i,s=Ce,c=je,p=s===Ir?Cr.prec:s.prec;if(s===rt&&p>=r)return a=B(e),A(),i=ee(re(n),p,n),o=Se.createNodeMemberCall(a,"Math","pow",[e,i]),ee(o,r,n);if(null!=p&&(!n||s!==Cr)&&p>r){if(A(),a=B(e),s===Yr){i=ee(re(n),p,n),L(a);var d=Se.createNodeSpan(a,a,"BinaryExpression",{left:e,operator:"/",right:i});o=Se.createNodeMemberCall(a,"Math","floor",[d])}else if(s===Cr||s===Ir)if(s===Cr||D(Cr)){i=ee(re(n),p,n),L(a);var u=Se.createNodeSpan(a,a,"Literal",{value:s===Ir});o=Se.createNodeRuntimeCall(a,"ops","in",[e,i,u])}else t(xe,"Expected 'not in' comparison operator");else s===Kr&&"+"===c||s===Qr&&"*"===c?(a.arguments=[e],a.arguments.push(ee(re(n),p,n)),L(a,"CallExpression"),a.callee=Se.createNodeOpsCallee(a,s===Kr?"add":"multiply"),o=a):(s===jr?D(Ir)?a.operator="!==":a.operator="===":a.operator=null!=s.rep?s.rep:c,a.left=e,a.right=ee(re(n),p,n),o=L(a,s===wr||s===_r?"LogicalExpression":"BinaryExpression"));return ee(o,r,n)}return e}function re(e){if(Ce.prefix||Ce===Kr){var r=Ce===Kr?Zr.prec:Ce.prec,t=G();return t.operator=null!=Ce.rep?Ce.rep:je,t.prefix=!0,ke=!0,A(),t.argument=ee(re(e),r,e),L(t,"UnaryExpression")}return te(ae())}function te(e,r){var t=B(e);if(D(qr)){var n=fe(!0);if(bt.imports[e.name]&&bt.imports[e.name][n.name]){var a=Se.createNodeSpan(e,e,"Identifier",{name:me.runtimeParamName}),o=Se.createNodeSpan(e,e,"Identifier",{name:"imports"}),i=Se.createNodeSpan(e,e,"MemberExpression",{object:a,property:o,computed:!1});t.object=Se.createNodeSpan(e,e,"MemberExpression",{object:i,property:e,computed:!1})}else e.name&&e.name===Re.getThisReplace()?t.object=Se.createNodeSpan(e,e,"ThisExpression"):t.object=e;return t.property=n,t.computed=!1,te(L(t,"MemberExpression"),r)}if(D(Pr)){var s,c=!1;if(D(Dr)?c=!0:s=H(),!c&&D(Dr)&&(c=!0),c)return ne(t,e,s,r);var p=Se.createNodeSpan(s,s,"CallExpression");return p.callee=Se.createNodeOpsCallee(s,"subscriptIndex"),p.arguments=[e,s],t.object=e,t.property=p,t.computed=!0,q(Or),te(L(t,"MemberExpression"),r)}if(!r&&D(Fr)){if(Re.isUserFunction(e.name)){var d=Se.createNodeRuntimeCall(t,"utils","createParamsObj",le());t.arguments=[d]}else t.arguments=ue(Gr,!1);if(Re.isNewObj(e.name)?L(t,"NewExpression"):L(t,"CallExpression"),bt.functions[e.name]){"Identifier"!==e.type&&V();var a=Se.createNodeSpan(e,e,"Identifier",{name:me.runtimeParamName}),u=Se.createNodeSpan(e,e,"Identifier",{name:"functions"}),i=Se.createNodeSpan(e,e,"MemberExpression",{object:a,property:u,computed:!1});t.callee=Se.createNodeSpan(e,e,"MemberExpression",{object:i,property:e,computed:!1})}else t.callee=e;return te(t,r)}return e}function ne(e,r,t,n){var a,o;t||(t=Se.createNodeFrom(e,"Literal",{value:null})),Ce===Or||D(Dr)?a=Se.createNodeFrom(e,"Literal",{value:null}):(a=H(),Ce!==Or&&q(Dr)),o=Ce===Or?Se.createNodeFrom(e,"Literal",{value:null}):H(),q(Or),e.arguments=[t,a,o];var i=Se.createNodeFrom(r,"Identifier",{name:"_pySlice"}),s=Se.createNodeSpan(r,r,"MemberExpression",{object:r,property:i,computed:!1});return e.callee=s,te(L(e,"CallExpression"),n)}function ae(){switch(Ce){case Ke:return A(),ce(Gr);case We:return fe();case Te:case Je:case Ue:var e=G();return e.value=je,e.raw=be.slice(Ee,we),A(),L(e,"Literal");case Nr:case xr:case Er:var e=G();return e.value=Ce.atomValue,e.raw=Ce.keyword,A(),L(e,"Literal");case Fr:var r=_e,n=Ee;if(A(),Ce===Gr){var e=he(!1);return D(Gr),e}var a=Y(!1);return me.locations&&(a.loc.start=r,a.loc.end=Ie),me.ranges&&(a.range=[n,we]),q(Gr),a;case Pr:return oe();case Ar:return ce(Mr);case $e:t(Ee,"Unexpected indent");default:V()}}function oe(){var e=G();if(e.arguments=[],A(),!D(Or)){var r=Z(!1);if(Ce===sr||Ce===dr){var t=qe++;r=Se.createListCompPush(r,t);var n=ie(r,!0);return L(e),Se.createListCompIife(e,n,t)}D(Lr)?e.arguments=[r].concat(ue(Or,!0,!1)):(q(Or),e.arguments=[r])}L(e,"NewExpression");var a=Se.createNodeSpan(e,e,"Identifier",{name:me.runtimeParamName}),o=Se.createNodeSpan(e,e,"Identifier",{name:"objects"}),i=Se.createNodeSpan(e,e,"MemberExpression",{object:a,property:o,computed:!1}),s=Se.createNodeSpan(e,e,"Identifier",{name:"list"});return e.callee=Se.createNodeSpan(e,e,"MemberExpression",{object:i,property:s,computed:!1}),e}function ie(e,r){if(r&&Ce!==sr&&V(),D(Or))return e;var t=G();if(D(sr)){var n=H(!1,!0),a=T(n);a||R(n),q(Cr);var o=H(),i=ie(e,!1),s=Se.createNodeSpan(i,i,"BlockStatement",{body:[i]});return L(t,"BlockStatement"),Se.createFor(t,n,a,o,s)}return D(dr)?(Ce===Fr?t.test=K():t.test=H(),t.consequent=ie(e,!1),L(t,"IfStatement")):void V()}function se(e){var r=B(e);r.body=[],e.id=fe(),e.params=[];var n=[];if(D(Fr))for(var a=!0;!D(Gr);)a?a=!1:q(Lr),n.push(fe());n.length>1&&t(xe,"Multiple inheritance not supported"),q(Dr),Re.startClass(e.id.name);var o=L(G()),i=z(),s=Se.createClass(r,e,n,o,i);return Re.end(),s}function ce(e){var r,t,n=G(),a=!0;for(n.arguments=[],A();!D(e);){if(a?a=!1:q(Lr),e===Mr)r=pe(),q(Dr),t=Z(!1);else if(e===Gr){var o=fe(!0);r=B(o),r.value=o.name,L(r,"Literal"),q(Tr),t=Z(!1)}else V();n.arguments.push(Se.createNodeSpan(r,t,"ArrayExpression",{elements:[r,t]}))}L(n,"NewExpression");var i=Se.createNodeSpan(n,n,"Identifier",{name:me.runtimeParamName}),s=Se.createNodeSpan(n,n,"Identifier",{name:"objects"}),c=Se.createNodeSpan(n,n,"MemberExpression",{object:i,property:s,computed:!1}),p=Se.createNodeSpan(n,n,"Identifier",{name:"dict"});return n.callee=Se.createNodeSpan(n,n,"MemberExpression",{object:c,property:p,computed:!1}),n}function pe(){return Ce===Te||Ce===Je?ae():fe(!0)}function de(e){var r=qe++;e.id=fe(),e.params=[];var n=[],a=null,o=null,i=!1,s=!0;for(q(Fr);!D(Gr);)if(s?s=!1:q(Lr),"*"===je)o&&t(xe,"invalid syntax"),A(),a=fe();else if("**"===je)A(),o=fe();else{o&&t(xe,"invalid syntax");var c=fe();D(Tr)?(n.push({id:c,expr:Z(!1)}),i=!0):(i&&t(xe,"non-default argument follows default argument"),a&&t(xe,"missing required keyword-only argument"),n.push({id:c,expr:null}))}q(Dr);var p=Ge=!0;if(Re.startFn(e.id.name),Re.isParentClass()){var d=n.shift();Re.setThisReplace(d.id.name)}var u=z();if(e.body=Se.createNodeSpan(u,u,"BlockStatement",{body:[]}),(n.length>0||a||o)&&(e.body.body.push(Se.createNodeParamsCheck(e.id,r)),e.body.body.push(Se.createGeneratedVarDeclFromId(e.id,Se.createNodeSpan(e.id,e.id,"Identifier",{name:"__formalsIndex"+r}),Se.createNodeSpan(e.id,e.id,"Literal",{value:0}))),e.body.body.push(Se.createGeneratedVarDeclFromId(e.id,Se.createNodeSpan(e.id,e.id,"Identifier",{name:"__args"+r}),Se.createNodeSpan(e.id,e.id,"Identifier",{name:"arguments"})))),n.length>0){e.body.body.push(Se.createNodeGetParamFn(e.id,r));for(var l=0;l<n.length;l++){var f=Se.createNodeSpan(n[l].id,n[l].id,"CallExpression",{callee:Se.createNodeSpan(n[l].id,n[l].id,"Identifier",{name:"__getParam"+r}),arguments:[Se.createNodeSpan(n[l].id,n[l].id,"Literal",{value:n[l].id.name})]});n[l].expr&&f.arguments.push(n[l].expr),e.body.body.push(Se.createGeneratedVarDeclFromId(n[l].id,n[l].id,f))}}var h=a||o;if(h){if(a){var m=Se.createGeneratedVarDeclFromId(a,a,Se.createNodeSpan(a,a,"ArrayExpression",{elements:[]}));e.body.body.push(m)}if(o){var b=Se.createGeneratedVarDeclFromId(o,o,Se.createNodeSpan(o,o,"ObjectExpression",{properties:[]}));e.body.body.push(b)}var y=Se.createNodeSpan(h,h,"IfStatement",{test:Se.createNodeSpan(h,h,"Identifier",{name:"__params"+r}),consequent:Se.createNodeSpan(h,h,"BlockStatement",{body:[]})});a&&(y.consequent.body.push(Se.createNodeArgsWhileConsequent(a,r)),y.alternate=Se.createNodeArgsAlternate(a,r)),o&&y.consequent.body.push(Se.createNodeSpan(o,o,"ExpressionStatement",{expression:Se.createNodeSpan(o,o,"AssignmentExpression",{operator:"=",left:o,right:Se.createNodeMembIds(o,"__params"+r,"keywords")})})),e.body.body.push(y)}e.body.body.push(Se.createNodeFnBodyIife(u)),Ge=p;for(var l=0;l<n.length;++l)for(var v=0;v<l;++v)n[l].id.name===n[v].id.name&&t(n[l].id.start,"Argument name clash");var S;if(Re.isParentClass()){L(e);var g=Se.createNodeSpan(e,e,"Identifier",{name:Re.getParentClassName()}),N=Se.createNodeSpan(e,e,"Identifier",{name:"prototype"}),x=e.id,E=Se.createNodeSpan(e,e,"MemberExpression",{object:g,property:N,computed:!1}),w=Se.createNodeSpan(e,e,"MemberExpression",{object:E,property:x,computed:!1}),_=Se.createNodeSpan(e,e,"FunctionExpression",{body:e.body,params:e.params}),I=Se.createNodeSpan(e,e,"AssignmentExpression",{left:w,operator:"=",right:_});S=Se.createNodeSpan(e,e,"ExpressionStatement",{expression:I})}else S=L(e,"FunctionDeclaration");return Re.end(),S}function ue(e,r,t){for(var n=[],a=!0;!D(e);){if(a)a=!1;else if(q(Lr),r&&me.allowTrailingCommas&&D(e))break;t&&Ce===Lr?n.push(null):n.push(Z(!1))}return n}function le(){for(var e=[],r=!0;!D(Gr);){r?r=!1:q(Lr);var t=Z(!1);if(D(Tr)){var n=Z(!1),a=Se.createNodeSpan(t,n,"Identifier",{name:"__kwp"}),o=Se.createNodeSpan(t,n,"Literal",{value:!0}),i=Se.createNodeSpan(t,n,"ObjectExpression",{properties:[]});i.properties.push({type:"Property",key:t,value:n,kind:"init"}),i.properties.push({type:"Property",key:a,value:o,kind:"init"}),t=i}e.push(t)}return e}function fe(e){var r=G();return e&&(e=!1),Ce===We?(!e&&Le&&be.slice(Ee,we).indexOf("\\")==-1&&t(Ee,"The keyword '"+je+"' is reserved"),r.name=je):e&&Ce.keyword?r.name=Ce.keyword:V(),ke=!1,A(),L(r,"Identifier")}function he(e,r){var t=r?B(r):G();if(t.arguments=r?[r]:[],Ce===Lr){var n=xe;p();var a=xe;xe=n,(a>=ye||";"===be[a]||")"===be[a]||ut.test(be[a]))&&D(Lr)}for(;D(Lr);)t.arguments.push(Z(e));L(t,"NewExpression");var o=Se.createNodeSpan(t,t,"Identifier",{name:me.runtimeParamName}),i=Se.createNodeSpan(t,t,"Identifier",{name:"objects"}),s=Se.createNodeSpan(t,t,"MemberExpression",{object:o,property:i,computed:!1}),c=Se.createNodeSpan(t,t,"Identifier",{name:"tuple"});return t.callee=Se.createNodeSpan(t,t,"MemberExpression",{object:s,property:c,computed:!1}),t}e.version="0.5.1";var me,be,ye,ve,Se;e.parse=function(e,t){return be=String(e),ye=be.length,r(t),o(),Se=mt(G,B,L,U),J(me.program)};var ge=e.defaultOptions={languageVersion:3,allowTrailingCommas:!0,allowReturnOutsideFunction:!1,locations:!1,onComment:null,ranges:!1,program:null,sourceFile:null,directSourceFile:null,runtimeParamName:"__pythonRuntime"},Ne=e.getLineInfo=function(e,r){for(var t=1,n=0;;){lt.lastIndex=n;var a=lt.exec(e);if(!(a&&a.index<r))break;++t,n=a.index+a[0].length}return{line:t,column:r-n}};e.tokenize=function(e,t){function n(e){return Me=we,x(e),a.start=Ee,a.end=we,a.startLoc=_e,a.endLoc=Ie,a.type=Ce,a.value=je,a}be=String(e),ye=be.length,r(t),o();var a={};return n.jumpTo=function(e,r){if(xe=e,me.locations){Pe=1,Oe=lt.lastIndex=0;for(var t;(t=lt.exec(be))&&t.index<e;)++Pe,Oe=t.index+t[0].length}ke=r,p()},n};var xe,Ee,we,_e,Ie,Ce,je,ke,Pe,Oe,Ae,Me,Fe,Ge,Le,Be,De=[],qe=0,Ve=e.indentHist={indent:[],dedentCount:0,init:function(){this.indent=[],this.dedentCount=0},count:function(){return this.indent.length},len:function(e){return("undefined"==typeof e||e>=this.indent.length)&&(e=this.indent.length-1),this.indent[e].length},isIndent:function(e){return 0===this.indent.length||e.length>this.len()},isDedent:function(e){return this.indent.length>0&&e.length<this.len()},addIndent:function(e){this.indent.push(e)},addDedent:function(e){this.dedentCount=0;for(var r=this.indent.length-1;r>=0&&e.length<this.indent[r].length;--r)++this.dedentCount},updateDedent:function(){this.dedentCount=this.count()},pop:function(){--this.dedentCount,this.indent.pop()},undoIndent:function(){this.pop()}},Re=e.scope={namespaces:[],init:function(){this.namespaces=[{type:"g",map:{}}]},current:function(e){return e=e||0,this.namespaces[this.namespaces.length-e-1]},startClass:function(e){this.current().map[e]="c",this.namespaces.push({type:"c",map:{},className:e})},startFn:function(e){this.current().map[e]="f",this.namespaces.push({type:"f",map:{},fnName:e})},end:function(){this.namespaces.pop()},addVar:function(e){this.current().map[e]="v"},exists:function(e){return this.current().map.hasOwnProperty(e)},isClass:function(){return"c"===this.current().type},isUserFunction:function(e){for(var r=this.namespaces.length-1;r>=0;r--)for(var t in this.namespaces[r].map)if(t===e&&"f"===this.namespaces[r].map[t])return!0;return!1},isParentClass:function(){return"c"===this.current(1).type},isNewObj:function(e){for(var r=this.namespaces.length-1;r>=0;r--){if("c"===this.namespaces[r].map[e])return!0;if("f"===this.namespaces[r].map[e])break}return!1},getParentClassName:function(){return this.current(1).className},getThisReplace:function(){return this.current().thisReplace},setThisReplace:function(e){this.current().thisReplace=e}},Te={type:"num"},Ue={type:"regexp"},Je={type:"string"},We={type:"name"},Xe={type:"eof"},ze={type:"newline"},$e={type:"indent"},He={type:"dedent"},Ke={keyword:"dict"},Qe={keyword:"as"},Ye={keyword:"break"},Ze={keyword:"class"},er={keyword:"continue"},rr={keyword:"def"},tr={keyword:"del"},nr={keyword:"elif",beforeExpr:!0},ar={keyword:"else",beforeExpr:!0},or={keyword:"except",beforeExpr:!0},ir={keyword:"finally"},sr={keyword:"for"},cr={keyword:"from"},pr={keyword:"global"},dr={keyword:"if"},ur={keyword:"import"},lr={keyword:"lambda"},fr={keyword:"nonlocal"},hr={keyword:"pass"},mr={keyword:"raise"},br={keyword:"return",beforeExpr:!0},yr={keyword:"try"},vr={keyword:"while"},Sr={keyword:"with"},gr={keyword:"yield"},Nr={keyword:"None",atomValue:null},xr={keyword:"True",atomValue:!0},Er={keyword:"False",atomValue:!1},wr={keyword:"or",prec:1,beforeExpr:!0,rep:"||"},_r={keyword:"and",prec:2,beforeExpr:!0,rep:"&&"},Ir={keyword:"not",prec:3,prefix:!0,beforeExpr:!0,rep:"!"},Cr={keyword:"in",prec:4,beforeExpr:!0},jr={keyword:"is",prec:4,beforeExpr:!0},kr={dict:Ke,False:Er,None:Nr,True:xr,and:_r,as:Qe,"break":Ye,"class":Ze,"continue":er,def:rr,del:tr,elif:nr,"else":ar,except:or,"finally":ir,"for":sr,from:cr,global:pr,"if":dr,"import":ur,"in":Cr,is:jr,lambda:lr,nonlocal:fr,not:Ir,or:wr,pass:hr,raise:mr,"return":br,"try":yr,"while":vr,"with":Sr,"yield":gr},Pr={type:"[",beforeExpr:!0},Or={type:"]"},Ar={type:"{",beforeExpr:!0},Mr={type:"}"},Fr={type:"(",beforeExpr:!0},Gr={type:")"},Lr={type:",",beforeExpr:!0},Br={type:";",beforeExpr:!0},Dr={type:":",beforeExpr:!0},qr={type:"."},Vr={type:"?",beforeExpr:!0},Rr={prec:10,beforeExpr:!0},Tr={isAssign:!0,beforeExpr:!0},Ur={isAssign:!0,beforeExpr:!0},Jr={prec:4,beforeExpr:!0},Wr={prec:4,beforeExpr:!0},Xr={prec:5,beforeExpr:!0},zr={prec:6,beforeExpr:!0},$r={prec:7,beforeExpr:!0},Hr={prec:8,beforeExpr:!0},Kr={prec:9,beforeExpr:!0},Qr={prec:10,beforeExpr:!0},Yr={prec:10,beforeExpr:!0},Zr={prec:11,prefix:!0,beforeExpr:!0},et={prec:11,prefix:!0,beforeExpr:!0},rt={prec:12,beforeExpr:!0};e.tokTypes={bracketL:Pr,bracketR:Or,braceL:Ar,braceR:Mr,parenL:Fr,parenR:Gr,comma:Lr,semi:Br,colon:Dr,dot:qr,question:Vr,slash:Rr,eq:Tr,name:We,eof:Xe,num:Te,regexp:Ue,string:Je,newline:ze,indent:$e,dedent:He,exponentiation:rt,floorDiv:Yr,plusMin:Kr,posNegNot:Zr,multiplyModulo:Qr};for(var tt in kr)e.tokTypes["_"+tt]=kr[tt];var nt,at=n("eval arguments"),ot=n("dict False None True and as assert break class continue def del elif else except finally for from global if import in is lambda nonlocal not or pass raise return try while with yield"),it=/[\u1680\u180e\u2000-\u200a\u202f\u205f\u3000\ufeff]/,st="ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԧԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠࢢ-ࢬऄ-हऽॐक़-ॡॱ-ॷॹ-ॿঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-ళవ-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛰᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤜᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚗꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꪀ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ",ct="̀-ͯ҃-֑҇-ׇֽֿׁׂׅׄؐ-ؚؠ-ىٲ-ۓۧ-ۨۻ-ۼܰ-݊ࠀ-ࠔࠛ-ࠣࠥ-ࠧࠩ-࠭ࡀ-ࡗࣤ-ࣾऀ-ःऺ-़ा-ॏ॑-ॗॢ-ॣ०-९ঁ-ঃ়া-ৄেৈৗয়-ৠਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑ੦-ੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢ-ૣ૦-૯ଁ-ଃ଼ା-ୄେୈୋ-୍ୖୗୟ-ୠ୦-୯ஂா-ூெ-ைொ-்ௗ௦-௯ఁ-ఃె-ైొ-్ౕౖౢ-ౣ౦-౯ಂಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢ-ೣ೦-೯ംഃെ-ൈൗൢ-ൣ൦-൯ංඃ්ා-ුූෘ-ෟෲෳิ-ฺเ-ๅ๐-๙ິ-ູ່-ໍ໐-໙༘༙༠-༩༹༵༷ཁ-ཇཱ-྄྆-྇ྍ-ྗྙ-ྼ࿆က-ဩ၀-၉ၧ-ၭၱ-ၴႂ-ႍႏ-ႝ፝-፟ᜎ-ᜐᜠ-ᜰᝀ-ᝐᝲᝳក-ឲ៝០-៩᠋-᠍᠐-᠙ᤠ-ᤫᤰ-᤻ᥑ-ᥭᦰ-ᧀᧈ-ᧉ᧐-᧙ᨀ-ᨕᨠ-ᩓ᩠-᩿᩼-᪉᪐-᪙ᭆ-ᭋ᭐-᭙᭫-᭳᮰-᮹᯦-᯳ᰀ-ᰢ᱀-᱉ᱛ-ᱽ᳐-᳒ᴀ-ᶾḁ-ἕ‌‍‿⁀⁔⃐-⃥⃜⃡-⃰ⶁ-ⶖⷠ-ⷿ〡-〨゙゚Ꙁ-ꙭꙴ-꙽ꚟ꛰-꛱ꟸ-ꠀ꠆ꠋꠣ-ꠧꢀ-ꢁꢴ-꣄꣐-꣙ꣳ-ꣷ꤀-꤉ꤦ-꤭ꤰ-ꥅꦀ-ꦃ꦳-꧀ꨀ-ꨧꩀ-ꩁꩌ-ꩍ꩐-꩙ꩻꫠ-ꫩꫲ-ꫳꯀ-ꯡ꯬꯭꯰-꯹ﬠ-ﬨ︀-️︠-︦︳︴﹍-﹏０-９＿",pt=new RegExp("["+st+"]"),dt=new RegExp("["+st+ct+"]"),ut=/[\n\r\u2028\u2029]/,lt=/\r\n|[\n\r\u2028\u2029]/g,ft=e.isIdentifierStart=function(e){return e<65?36===e:e<91||(e<97?95===e:e<123||e>=170&&pt.test(String.fromCharCode(e)))},ht=e.isIdentifierChar=function(e){return e<48?36===e:e<58||!(e<65)&&(e<91||(e<97?95===e:e<123||e>=170&&dt.test(String.fromCharCode(e))))};e.Node=M;var mt=e.getNodeCreator=function(e,r,t,n){return{finishNodeFrom:function(e,r,t){return r.type=t,me.locations&&(r.loc.end=e.loc.end),me.ranges&&(r.range[1]=e.range[1]),r},createNodeFrom:function(e,n,a){var o=r(e);for(var i in a)o[i]=a[i];return t(o,n)},createNodeSpan:function(e,t,n,a){var o=r(e);for(var i in a)o[i]=a[i];return this.finishNodeFrom(t,o,n)},createGeneratedNodeSpan:function(e,t,n,a){var o=r(e);for(var i in a)o[i]=a[i];return o.userCode=!1,this.finishNodeFrom(t,o,n)},createNodeArgsWhileConsequent:function(e,r){var t=this.createNodeMembIds(e,"__params"+r,"formals"),n=this.createGeneratedNodeSpan(e,e,"Identifier",{name:"__formalsIndex"+r});return this.createGeneratedNodeSpan(e,e,"WhileStatement",{test:this.createGeneratedNodeSpan(e,e,"BinaryExpression",{operator:"<",left:n,right:this.createGeneratedNodeSpan(e,e,"MemberExpression",{computed:!1,object:t,property:this.createGeneratedNodeSpan(e,e,"Identifier",{name:"length"})})}),body:this.createGeneratedNodeSpan(e,e,"BlockStatement",{body:[this.createGeneratedNodeSpan(e,e,"ExpressionStatement",{expression:this.createGeneratedNodeSpan(e,e,"CallExpression",{callee:this.createNodeMembIds(e,e.name,"push"),arguments:[this.createGeneratedNodeSpan(e,e,"MemberExpression",{computed:!0,object:t,property:this.createGeneratedNodeSpan(e,e,"UpdateExpression",{operator:"++",prefix:!1,argument:n})})]})})]})})},createNodeArgsAlternate:function(e,r){var t="__args"+r,n=this.createGeneratedNodeSpan(e,e,"Identifier",{name:"__formalsIndex"+r});return this.createGeneratedNodeSpan(e,e,"BlockStatement",{body:[this.createGeneratedNodeSpan(e,e,"WhileStatement",{test:this.createGeneratedNodeSpan(e,e,"BinaryExpression",{operator:"<",left:n,right:this.createNodeMembIds(e,t,"length")}),body:this.createGeneratedNodeSpan(e,e,"BlockStatement",{body:[this.createGeneratedNodeSpan(e,e,"ExpressionStatement",{expression:this.createGeneratedNodeSpan(e,e,"CallExpression",{callee:this.createNodeMembIds(e,e.name,"push"),arguments:[this.createGeneratedNodeSpan(e,e,"MemberExpression",{computed:!0,object:this.createGeneratedNodeSpan(e,e,"Identifier",{name:t}),property:this.createGeneratedNodeSpan(e,e,"UpdateExpression",{operator:"++",prefix:!1,argument:n})})]})})]})})]})},createNodeFnBodyIife:function(e){var r=this.createGeneratedNodeSpan(e,e,"FunctionExpression",{params:[],defaults:[],body:e,generator:!1,expression:!1}),t=this.createGeneratedNodeSpan(e,e,"CallExpression",{callee:this.createGeneratedNodeSpan(e,e,"MemberExpression",{computed:!1,object:r,property:this.createGeneratedNodeSpan(e,e,"Identifier",{name:"call"})}),arguments:[this.createGeneratedNodeSpan(e,e,"ThisExpression")]});return this.createGeneratedNodeSpan(e,e,"ReturnStatement",{argument:t})},createNodeMemberCall:function(e,r,n,a){var o=this.createNodeFrom(e,"Identifier",{
name:r}),i=this.createNodeFrom(e,"Identifier",{name:n}),s=this.createNodeFrom(e,"MemberExpression",{object:o,property:i,computed:!1});return e.callee=s,e.arguments=a,t(e,"CallExpression")},createNodeMembIds:function(e,r,t){return this.createNodeSpan(e,e,"MemberExpression",{computed:!1,object:this.createNodeSpan(e,e,"Identifier",{name:r}),property:this.createNodeSpan(e,e,"Identifier",{name:t})})},createNodeMembIdLit:function(e,r,t){return this.createNodeSpan(e,e,"MemberExpression",{computed:!0,object:this.createNodeSpan(e,e,"Identifier",{name:r}),property:this.createNodeSpan(e,e,"Literal",{value:t})})},createNodeOpsCallee:function(e,r){var t=this.createGeneratedNodeSpan(e,e,"Identifier",{name:me.runtimeParamName}),n=this.createGeneratedNodeSpan(e,e,"Identifier",{name:"ops"}),a=this.createGeneratedNodeSpan(e,e,"Identifier",{name:r}),o=this.createGeneratedNodeSpan(e,e,"MemberExpression",{object:t,property:n,computed:!1});return this.createGeneratedNodeSpan(e,e,"MemberExpression",{object:o,property:a,computed:!1})},createNodeParamsCheck:function(e,r){var t=this.createNodeSpan(e,e,"Identifier",{name:"__params"+r}),n=this.createNodeMembIdLit(e,"arguments",0),a=this.createNodeSpan(e,e,"ConditionalExpression",{test:this.createNodeSpan(e,e,"LogicalExpression",{operator:"&&",left:this.createNodeSpan(e,e,"LogicalExpression",{operator:"&&",left:this.createNodeSpan(e,e,"BinaryExpression",{operator:"===",left:this.createNodeMembIds(e,"arguments","length"),right:this.createNodeSpan(e,e,"Literal",{value:1})}),right:this.createNodeSpan(e,e,"MemberExpression",{computed:!1,object:n,property:this.createNodeSpan(e,e,"Identifier",{name:"formals"})})}),right:this.createNodeSpan(e,e,"MemberExpression",{computed:!1,object:n,property:this.createNodeSpan(e,e,"Identifier",{name:"keywords"})})}),consequent:n,alternate:this.createNodeSpan(e,e,"Literal",{value:null})});return this.createGeneratedVarDeclFromId(e,t,a)},createNodeGetParamFn:function(e,r){var t=this.createNodeSpan(e,e,"Identifier",{name:"d"}),n=this.createNodeSpan(e,e,"Identifier",{name:"v"}),a=this.createNodeSpan(e,e,"Identifier",{name:"r"}),o=this.createNodeSpan(e,e,"Identifier",{name:"__formalsIndex"+r}),i="__params"+r,s="__getParam"+r,c="__args"+r,p=this.createNodeMembIds(e,i,"formals"),d=this.createNodeMembIds(e,i,"keywords"),u=this.createNodeSpan(e,e,"MemberExpression",{computed:!0,property:n,object:d});return this.createGeneratedNodeSpan(e,e,"FunctionDeclaration",{id:this.createNodeSpan(e,e,"Identifier",{name:s}),params:[n,t],defaults:[],body:this.createNodeSpan(e,e,"BlockStatement",{body:[this.createGeneratedVarDeclFromId(e,a,t),this.createGeneratedNodeSpan(e,e,"IfStatement",{test:this.createNodeSpan(e,e,"Identifier",{name:i}),consequent:this.createNodeSpan(e,e,"BlockStatement",{body:[this.createGeneratedNodeSpan(e,e,"IfStatement",{test:this.createNodeSpan(e,e,"BinaryExpression",{operator:"<",left:o,right:this.createNodeSpan(e,e,"MemberExpression",{computed:!1,object:p,property:this.createNodeSpan(e,e,"Identifier",{name:"length"})})}),consequent:this.createNodeSpan(e,e,"BlockStatement",{body:[this.createGeneratedNodeSpan(e,e,"ExpressionStatement",{expression:this.createGeneratedNodeSpan(e,e,"AssignmentExpression",{operator:"=",left:a,right:this.createNodeSpan(e,e,"MemberExpression",{computed:!0,object:p,property:this.createNodeSpan(e,e,"UpdateExpression",{operator:"++",argument:o,prefix:!1})})})})]}),alternate:this.createGeneratedNodeSpan(e,e,"IfStatement",{test:this.createNodeSpan(e,e,"BinaryExpression",{operator:"in",left:n,right:d}),consequent:this.createNodeSpan(e,e,"BlockStatement",{body:[this.createGeneratedNodeSpan(e,e,"ExpressionStatement",{expression:this.createGeneratedNodeSpan(e,e,"AssignmentExpression",{operator:"=",left:a,right:u})}),this.createGeneratedNodeSpan(e,e,"ExpressionStatement",{expression:this.createNodeSpan(e,e,"UnaryExpression",{operator:"delete",prefix:!0,argument:u})})]}),alternate:null})})]}),alternate:this.createGeneratedNodeSpan(e,e,"IfStatement",{test:this.createGeneratedNodeSpan(e,e,"BinaryExpression",{operator:"<",left:o,right:this.createNodeMembIds(e,c,"length")}),consequent:this.createGeneratedNodeSpan(e,e,"BlockStatement",{body:[this.createGeneratedNodeSpan(e,e,"ExpressionStatement",{expression:this.createGeneratedNodeSpan(e,e,"AssignmentExpression",{operator:"=",left:a,right:this.createGeneratedNodeSpan(e,e,"MemberExpression",{computed:!0,object:this.createGeneratedNodeSpan(e,e,"Identifier",{name:c}),property:this.createGeneratedNodeSpan(e,e,"UpdateExpression",{operator:"++",argument:o,prefix:!1})})})})]}),alternate:null})}),this.createGeneratedNodeSpan(e,e,"ReturnStatement",{argument:a})]}),rest:null,generator:!1,expression:!1})},createNodeRuntimeCall:function(e,r,t,n){return this.createNodeSpan(e,e,"CallExpression",{callee:this.createNodeSpan(e,e,"MemberExpression",{computed:!1,object:this.createNodeMembIds(e,me.runtimeParamName,r),property:this.createNodeSpan(e,e,"Identifier",{name:t})}),arguments:n})},createVarDeclFromId:function(e,t,n){var a=r(e);a.id=t,a.init=n,this.finishNodeFrom(e,a,"VariableDeclarator");var o=r(e);return o.kind="var",o.declarations=[a],this.finishNodeFrom(e,o,"VariableDeclaration")},createGeneratedVarDeclFromId:function(e,t,n){var a=r(e);a.id=t,a.init=n,this.finishNodeFrom(e,a,"VariableDeclarator");var o=r(e);return o.kind="var",o.declarations=[a],o.userCode=!1,this.finishNodeFrom(e,o,"VariableDeclaration")},createClass:function(e,n,a,o,i){function s(e){return e.expression&&e.expression.left&&e.expression.left.object&&e.expression.left.object.property&&"prototype"===e.expression.left.object.property.name?e.expression.left.property.name:null}var c=r(i);if(c.body=[],1===a.length){var p=this.createNodeSpan(o,o,"Identifier",{name:a[0].name}),d=this.createNodeSpan(o,o,"Identifier",{name:"call"}),u=this.createNodeSpan(o,o,"MemberExpression",{object:p,property:d,computed:!1}),l=this.createNodeSpan(o,o,"ThisExpression"),f=this.createNodeSpan(o,o,"CallExpression",{callee:u,arguments:[l]}),h=this.createNodeSpan(o,o,"ExpressionStatement",{expression:f});c.body.push(h)}for(var m in i.body){var b=i.body[m],y=s(b);if(y){if("__init__"===y){for(var v in b.expression.right.body.body)c.body.push(b.expression.right.body.body[v]);n.params=b.expression.right.params}}else c.body.push(b)}if(n.body=t(c,"BlockStatement"),t(n,"FunctionDeclaration"),e.body.push(n),1===a.length){var S=this.createNodeSpan(n,n,"Identifier",{name:n.id.name}),g=this.createNodeSpan(n,n,"Identifier",{name:"prototype"}),N=this.createNodeSpan(n,n,"MemberExpression",{object:S,property:g,computed:!1}),x=this.createNodeSpan(n,n,"Identifier",{name:a[0].name}),E=this.createNodeSpan(n,n,"Identifier",{name:"prototype"}),w=this.createNodeSpan(n,n,"MemberExpression",{object:x,property:E,computed:!1}),_=this.createNodeSpan(n,n,"Identifier",{name:"Object"}),I=this.createNodeSpan(n,n,"Identifier",{name:"create"}),C=this.createNodeSpan(n,n,"MemberExpression",{object:_,property:I,computed:!1}),f=this.createNodeSpan(n,n,"CallExpression",{callee:C,arguments:[w]}),j=this.createNodeSpan(n,n,"AssignmentExpression",{left:N,operator:"=",right:f}),k=this.createNodeSpan(n,n,"ExpressionStatement",{expression:j});e.body.push(k)}for(var m in i.body){var b=i.body[m],y=s(b);y&&"__init__"!==y&&e.body.push(b)}return t(e,"BlockStatement")},createFor:function(e,r,t,a,o){var i=o,s=JSON.parse(JSON.stringify(i)),c=qe++,p=this.createNodeSpan(e,e,"Identifier",{name:"Array"}),d=this.createNodeSpan(r,r,"Identifier",{name:"length"}),u=this.createNodeSpan(r,r,"Literal",{value:0}),l=this.createNodeSpan(a,a,"Identifier",{name:"__filbertRight"+c}),f=this.createVarDeclFromId(a,l,a),h=this.createNodeSpan(r,r,"Identifier",{name:"__filbertRight"+c}),m=this.createNodeSpan(r,r,"Identifier",{name:"__filbertIndex"+c}),b=this.createNodeSpan(r,r,"VariableDeclarator",{id:m,init:u}),y=this.createNodeSpan(r,r,"VariableDeclaration",{declarations:[b],kind:"var"}),v=this.createNodeSpan(r,r,"MemberExpression",{object:h,property:d,computed:!1}),S=this.createNodeSpan(r,r,"BinaryExpression",{left:m,operator:"<",right:v}),g=this.createNodeSpan(r,r,"UpdateExpression",{operator:"++",prefix:!0,argument:m}),N=this.createNodeSpan(r,r,"MemberExpression",{object:h,property:m,computed:!0});if(t)for(var x=n(t,N),E=x.length-1;E>=0;E--)i.body.unshift(x[E]);else if("Identifier"!==r.type||Re.exists(r.name)){var w=this.createNodeSpan(r,r,"AssignmentExpression",{operator:"=",left:r,right:N}),_=this.createNodeSpan(r,r,"ExpressionStatement",{expression:w});i.body.unshift(_)}else Re.addVar(r.name),i.body.unshift(this.createVarDeclFromId(r,r,N));var I=this.createNodeSpan(e,e,"ForStatement",{init:y,test:S,update:g,body:i}),C=this.createNodeSpan(e,e,"BlockStatement",{body:[I]}),j=r;if(t){var x=n(t,a);j=x[0];for(var E=x.length-1;E>0;E--)s.body.unshift(x[E])}else"Identifier"!==r.type||Re.exists(r.name)||(Re.addVar(r.name),j=this.createVarDeclFromId(r,r,null));var k=this.createNodeSpan(e,e,"ForInStatement",{left:j,right:h,body:s}),P=this.createNodeSpan(e,e,"BlockStatement",{body:[k]}),O=this.createNodeSpan(e,e,"Identifier",{name:"__filbertRight"+c}),A=this.createNodeSpan(e,e,"BinaryExpression",{left:O,operator:"instanceof",right:p}),M=this.createNodeSpan(e,e,"IfStatement",{test:A,consequent:C,alternate:P});return e.body=[f,M],e},createListCompPush:function(e,r){var t=this.createNodeSpan(e,e,"Identifier",{name:"__tmpList"+r}),n=this.createNodeSpan(e,e,"Identifier",{name:"push"}),a=this.createNodeSpan(e,e,"MemberExpression",{object:t,property:n,computed:!1}),o=this.createNodeSpan(e,e,"CallExpression",{callee:a,arguments:[e]});return this.createNodeSpan(e,e,"ExpressionStatement",{expression:o})},createListCompIife:function(e,r,t){var n=this.createNodeSpan(e,e,"Identifier",{name:me.runtimeParamName}),a=this.createNodeSpan(e,e,"Identifier",{name:"objects"}),o=this.createNodeSpan(e,e,"MemberExpression",{object:n,property:a,computed:!1}),i=this.createNodeSpan(e,e,"Identifier",{name:"list"}),s=this.createNodeSpan(e,e,"MemberExpression",{object:o,property:i,computed:!1}),c=this.createNodeSpan(e,e,"NewExpression",{callee:s,arguments:[]}),i=this.createNodeSpan(e,e,"Identifier",{name:"__tmpList"+t}),p=this.createVarDeclFromId(e,i,c),d=this.createNodeSpan(e,e,"Identifier",{name:"__tmpList"+t}),u=this.createNodeSpan(e,e,"ReturnStatement",{argument:d}),l=this.createNodeSpan(e,e,"BlockStatement",{body:[p,r,u]}),f=this.createNodeSpan(e,e,"FunctionExpression",{params:[],defaults:[],body:l,generator:!1,expression:!1});return this.createNodeSpan(e,e,"CallExpression",{callee:f,arguments:[]})}}},bt=e.pythonRuntime={internal:{isSeq:function(e){return e&&("list"===e._type||"tuple"===e._type)},slice:function(e,r,t,n){null!=n&&0!==n||(n=1),null==r?r=n<0?e.length-1:0:r<0&&(r+=e.length),null==t?t=n<0?-1:e.length:t<0&&(t+=e.length);var a,o,i=new bt.objects.list;if(n<0)for(a=e.slice(t+1,r+1),o=a.length-1;o>=0;o+=n)i.append(a[o]);else if(a=e.slice(r,t),1===n)i=bt.utils.createList(a);else for(o=0;o<a.length;o+=n)i.append(a[o]);return i},isJSArray:Array.isArray||function(e){return"[object Array]"===toString.call(e)}},utils:{convertToDict:function(e){e.hasOwnProperty("_type")||Object.defineProperty(e,"_type",{get:function(){return"dict"},enumerable:!1}),e.hasOwnProperty("_isPython")||Object.defineProperty(e,"_isPython",{get:function(){return!0},enumerable:!1}),e.hasOwnProperty("items")||Object.defineProperty(e,"items",{value:function(){var e=new bt.objects.list;for(var r in this)e.append(new bt.objects.tuple(r,this[r]));return e},enumerable:!1}),e.hasOwnProperty("length")||Object.defineProperty(e,"length",{get:function(){return Object.keys(this).length},enumerable:!1}),e.hasOwnProperty("clear")||Object.defineProperty(e,"clear",{value:function(){for(var e in this)delete this[e]},enumerable:!1}),e.hasOwnProperty("get")||Object.defineProperty(e,"get",{value:function(e,r){return e in this?this[e]:void 0!==r?r:null},enumerable:!1}),e.hasOwnProperty("keys")||Object.defineProperty(e,"keys",{value:function(){return Object.keys(this)},enumerable:!1}),e.hasOwnProperty("pop")||Object.defineProperty(e,"pop",{value:function(e,r){var t;if(e in this)t=this[e],delete this[e];else{if(void 0===r)return new Error("KeyError");t=r}return t},enumerable:!1}),e.hasOwnProperty("values")||Object.defineProperty(e,"values",{value:function(){var e=new bt.objects.list;for(var r in this)e.append(this[r]);return e},enumerable:!1})},createDict:function(){var e=new bt.objects.dict;if(!(1===arguments.length&&arguments[0]instanceof Object))throw TypeError("createDict expects a single JavaScript object");for(var r in arguments[0])e[r]=arguments[0][r];return e},createParamsObj:function(){for(var e={formals:new bt.objects.list,keywords:new bt.objects.dict},r=0;r<arguments.length;r++)if(arguments[r]&&arguments[r].__kwp===!0)for(var t in arguments[r])"__kwp"!==t&&(e.keywords[t]=arguments[r][t]);else e.formals.push(arguments[r]);return e},convertToList:function(e){e.hasOwnProperty("_type")||Object.defineProperty(e,"_type",{get:function(){return"list"},enumerable:!1}),e.hasOwnProperty("_isPython")||Object.defineProperty(e,"_isPython",{get:function(){return!0},enumerable:!1}),e.hasOwnProperty("append")||Object.defineProperty(e,"append",{value:function(e){this.push(e)},enumerable:!1}),e.hasOwnProperty("clear")||Object.defineProperty(e,"clear",{value:function(){this.splice(0,this.length)},enumerable:!1}),e.hasOwnProperty("copy")||Object.defineProperty(e,"copy",{value:function(){return this.slice(0)},enumerable:!1}),e.hasOwnProperty("count")||Object.defineProperty(e,"count",{value:function(e){for(var r=0,t=0;t<this.length;t++)this[t]===e&&r++;return r},enumerable:!1}),e.hasOwnProperty("equals")||Object.defineProperty(e,"equals",{value:function(e){try{if(this.length!==e.length)return!1;for(var r=0;r<this.length;r++)if(this[r].hasOwnProperty("equals")){if(!this[r].equals(e[r]))return!1}else if(this[r]!==e[r])return!1;return!0}catch(t){}return!1},enumerable:!1}),e.hasOwnProperty("extend")||Object.defineProperty(e,"extend",{value:function(e){for(var r=0;r<e.length;r++)this.push(e[r])},enumerable:!1}),e.hasOwnProperty("index")||Object.defineProperty(e,"index",{value:function(e){return this.indexOf(e)},enumerable:!1}),e.hasOwnProperty("indexOf")||Object.defineProperty(e,"indexOf",{value:function(e,r){try{for(var t=r?r:0;t<this.length;t++)if(this[t].hasOwnProperty("equals")){if(this[t].equals(e))return t}else if(this[t]===e)return t}catch(n){}return-1},enumerable:!1}),e.hasOwnProperty("insert")||Object.defineProperty(e,"insert",{value:function(e,r){this.splice(e,0,r)},enumerable:!1}),e.hasOwnProperty("pop")||Object.defineProperty(e,"pop",{value:function(e){e||(e=this.length-1);var r=this[e];return this.splice(e,1),r},enumerable:!1}),e.hasOwnProperty("_pySlice")||Object.defineProperty(e,"_pySlice",{value:function(e,r,t){return bt.internal.slice(this,e,r,t)},enumerable:!1}),e.hasOwnProperty("remove")||Object.defineProperty(e,"remove",{value:function(e){this.splice(this.indexOf(e),1)},enumerable:!1}),e.hasOwnProperty("sort")||Object.defineProperty(e,"sort",{value:function(e,r){var t=this.slice(0),n=function(r,n){var a=t.map(e),o={};for(var i in a)o[a[i]]=t[i];n?a.sort(function(e,r){return e-r}):a.sort();for(var i in r)r[i]=o[a[i]]};for(var a in this)if("number"!=typeof this[a]||!isFinite(this[a])){if("undefined"!=typeof e)n(this,!1);else{t.sort();for(var o in this)this[o]=t[o]}return void(r&&this.reverse())}if("undefined"!=typeof e)n(this,!0);else{t.sort(function(e,r){return e-r});for(var a in this)this[a]=t[a]}r&&this.reverse()},enumerable:!1}),e.hasOwnProperty("toString")||Object.defineProperty(e,"toString",{value:function(){return"["+this.join(", ")+"]"},enumerable:!1})},createList:function(){var e=new bt.objects.list;if(1===arguments.length&&arguments[0]instanceof Array)for(var r in arguments[0])e.push(arguments[0][r]);else for(var r in arguments)e.push(arguments[r]);return e}},ops:{add:function(e,r){if(bt.internal.isSeq(e)&&bt.internal.isSeq(r)){if(e._type!==r._type)throw TypeError("can only concatenate "+e._type+" (not '"+r._type+"') to "+e._type);var t;if("list"===e._type?t=new bt.objects.list:"tuple"===e._type&&(t=new bt.objects.tuple),t){for(var n=0;n<e.length;n++)t.push(e[n]);for(var n=0;n<r.length;n++)t.push(r[n]);return t}}return e+r},"in":function(e,r,t){var n=r.hasOwnProperty("indexOf")?r.indexOf(e)>=0:e in r;return t?!n:n},multiply:function(e,r){if(bt.internal.isSeq(e)&&!isNaN(parseInt(r))){var t;if("list"===e._type?t=new bt.objects.list:"tuple"===e._type&&(t=new bt.objects.tuple),t){for(var n=0;n<r;n++)for(var a=0;a<e.length;a++)t.push(e[a]);return t}}else if(bt.internal.isSeq(r)&&!isNaN(parseInt(e))){var t;if("list"===r._type?t=new bt.objects.list:"tuple"===r._type&&(t=new bt.objects.tuple),t){for(var n=0;n<e;n++)for(var a=0;a<r.length;a++)t.push(r[a]);return t}}return e*r},subscriptIndex:function(e,r){return bt.internal.isSeq(e)&&r<0?e.length+r:bt.internal.isJSArray(e)&&r<0?e.length+r:"string"==typeof e&&r<0?e.length+r:r}},objects:{dict:function(){var e={};for(var r in arguments)e[arguments[r][0]]=arguments[r][1];return bt.utils.convertToDict(e),e},list:function(){var e=[];return e.push.apply(e,arguments),bt.utils.convertToList(e),e},tuple:function(){var e=[];return e.push.apply(e,arguments),Object.defineProperty(e,"_type",{get:function(){return"tuple"},enumerable:!1}),Object.defineProperty(e,"_isPython",{get:function(){return!0},enumerable:!1}),Object.defineProperty(e,"count",{value:function(e){for(var r=0,t=0;t<this.length;t++)this[t]===e&&r++;return r},enumerable:!1}),Object.defineProperty(e,"equals",{value:function(e){try{if(this.length!==e.length)return!1;for(var r=0;r<this.length;r++)if(this[r].hasOwnProperty("equals")){if(!this[r].equals(e[r]))return!1}else if(this[r]!==e[r])return!1;return!0}catch(t){}return!1},enumerable:!1}),Object.defineProperty(e,"index",{value:function(e){return this.indexOf(e)},enumerable:!1}),Object.defineProperty(e,"indexOf",{value:function(e,r){try{for(var t=r?r:0;t<this.length;t++)if(this[t].hasOwnProperty("equals")){if(this[t].equals(e))return t}else if(this[t]===e)return t}catch(n){}return-1},enumerable:!1}),Object.defineProperty(e,"_pySlice",{value:function(e,r,t){return bt.internal.slice(this,e,r,t)},enumerable:!1}),Object.defineProperty(e,"toString",{value:function(){var e="("+this.join(", ");return 1===this.length&&(e+=","),e+=")"},enumerable:!1}),e}},functions:{abs:function(e){return Math.abs(e)},all:function(e){for(var r in e)if(bt.functions.bool(e[r])!==!0)return!1;return!0},any:function(e){for(var r in e)if(bt.functions.bool(e[r])===!0)return!0;return!1},ascii:function(e){for(var r,t=bt.functions.repr(e),n="",a=0;a<t.length;a++)r=t.charCodeAt(a),r<=127?n+=t[a]:r<=255?n+="\\x"+r.toString(16):55296<=r&&r<=56319?(r=1024*(r-55296)+(t.charCodeAt(++a)-56320)+65536,n+="\\U"+("000"+r.toString(16)).slice(-8)):r<=65535?n+="\\u"+("0"+r.toString(16)).slice(-4):r<=1114111&&(n+="\\U"+("000"+r.toString(16)).slice(-8));return n},bool:function(e){return!(void 0===e||null===e||e===!1||0===e||0===e.length||void 0!==e.__bool__&&e.__bool__()===!1||void 0!==e.__len__&&(e.__len__()===!1||0===e.__len__()))},chr:function(e){return String.fromCharCode(e)},divmod:function(e,r){return bt.objects.tuple(Math.floor(e/r),e%r)},enumerate:function(e,r){r=r||0;var t=new bt.objects.list;for(var n in e)t.push(new bt.objects.tuple((r++),e[n]));return t},filter:function(e,r){e=e||function(){return!0};var t=new bt.objects.list;for(var n in r)e(r[n])&&t.push(r[n]);return t},"float":function(e){return void 0===e?0:"string"==typeof e?(e=e.trim().toLowerCase(),null!==/^[+-]?inf(inity)?$/i.exec(e)?1/0*("-"===e[0]?-1:1):null!==/^nan$/i.exec(e)?NaN:parseFloat(e)):"number"==typeof e?e:void 0!==e.__float__?e.__float__():null},hex:function(e){return e.toString(16)},"int":function(e){return parseInt(e)},len:function(e){return e.length},list:function(e){var r=new bt.objects.list;if(e instanceof Array)for(var t in e)r.push(e[t]);else for(var t in e)r.push(t);return r},map:function(e,r){var t=new bt.objects.list;for(var n in r)t.push(e(r[n]));return t},max:function(e,r){if(r)return e>=r?e:r;var t=null;for(var n in e)(null===t||e[n]>t)&&(t=e[n]);return t},min:function(e,r){if(r)return e<=r?e:r;var t=null;for(var n in e)(null===t||e[n]<t)&&(t=e[n]);return t},oct:function(e){return e.toString(8)},ord:function(e){return e.charCodeAt(0)},pow:function(e,r,t){return t?Math.pow(e,r)%t:Math.pow(e,r)},print:function(){for(var e="",r=0;r<arguments.length;r++)e+=0===r?arguments[r]:" "+arguments[r];console.log(e)},range:function(e,r,t){void 0===r?(r=e,e=0,t=1):void 0===t&&(t=1);var n=new bt.objects.list;if(e<r&&t>0||e>r&&t<0)for(var a=e;a<r&&t>0||a>r&&t<0;)n.append(a),a+=t;return n},repr:function(e){return"string"==typeof e?"'"+e+"'":void 0!==e.__repr__?e.__repr__():void 0!==e.__class__&&void 0!==e.__class__.module&&e.__class__.__name__?"<"+e.__class__.__module__+"."+e.__class__.__name__+" object>":e.toString()},reversed:function(e){var r=new bt.objects.list;for(var t in e)r.push(e[t]);return r.reverse()},round:function(e,r){if(r){var t=Math.pow(10,r);return Math.round(e*t)/t}return Math.round(e)},sorted:function(e,r,t){var n=new bt.objects.list;for(var a in e)n.push(e[a]);return r?n.sort(r):n.sort(),t&&n.reverse(),n},str:function(e){return e.toString()},sum:function(e,r){var t=r||0;for(var n in e)t+=e[n];return t},tuple:function(e){var r=new bt.objects.tuple;for(var t in e)r.push(e[t]);return r}},imports:{random:{random:function(){return Math.random()}}}}});
!function(e,r){return"object"==typeof exports&&"object"==typeof module?r(exports,require("./filbert")):"function"==typeof define&&define.amd?define(["exports","./filbert_loose"],r):void r(e.filbert_loose||(e.filbert_loose={}),e.filbert)}(this,function(e,r){"use strict";function t(e){K=e||{};for(var t in r.defaultOptions)Object.prototype.hasOwnProperty.call(K,t)||(K[t]=r.defaultOptions[t]);oe=K.sourceFile||null}function n(){ne=ie.end,K.locations&&(ae=ie.endLoc),ie=se.length?se.shift():a()}function a(){for(;;)try{return Y()}catch(e){if(!(e instanceof SyntaxError))throw e;var t=e.message,n=e.raisedAt,a=!0;if(/unterminated/i.test(t))if(n=u(e.pos),/string/.test(t))a={start:e.pos,end:n,type:ee.string,value:Q.slice(e.pos+1,n)};else if(/regular expr/i.test(t)){var i=Q.slice(e.pos,n);try{i=new RegExp(i)}catch(e){}a={start:e.pos,end:n,type:ee.regexp,value:i}}else a=!1;else if(/invalid (unicode|regexp|number)|expecting unicode|octal literal|is reserved|directly after number/i.test(t))for(;n<Q.length&&!c(Q.charCodeAt(n))&&!p(Q.charCodeAt(n));)++n;else if(/character escape|expected hexadecimal/i.test(t))for(;n<Q.length;){var s=Q.charCodeAt(n++);if(34===s||39===s||p(s))break}else if(/unexpected character/i.test(t))n++,a=!1;else{if(!/regular expression/i.test(t))throw e;a=!0}if(o(n),a===!0&&(a={start:n,end:n,type:ee.name,value:"✖"}),a)return K.locations&&(a.startLoc=r.getLineInfo(Q,a.start),a.endLoc=r.getLineInfo(Q,a.end)),a}}function o(e){var r=Q.charAt(e-1),t=!r||/[\[\{\(,;:?\/*=+\-~!|&%^<>]/.test(r)||/[enwfd]/.test(r)&&/\b(keywords|case|else|return|throw|new|in|(instance|type)of|delete|void)$/.test(Q.slice(e-10,e));Y.jumpTo(e,t)}function i(e){var r={start:e.start,end:e.end,type:e.type,value:e.value};return K.locations&&(r.startLoc=e.startLoc,r.endLoc=e.endLoc),r}function s(e){for(se.length||(ie=i(ie));e>se.length;)se.push(i(a()));return se[e-1]}function p(e){return 10===e||13===e||8232===e||8329===e}function c(e){return 9===e||11===e||12===e||32===e||35===e||160===e||e>=5760&&ce.test(String.fromCharCode(e))}function u(e){for(;e<Q.length&&!p(Q.charCodeAt(e));)++e;return e}function l(){Y.jumpTo(u(ie.start),!1)}function d(e){this.type=null}function m(e){this.start=e||ie.startLoc||{line:1,column:0},this.end=null,null!==oe&&(this.source=oe)}function f(){var e=new d(ie.start);return K.locations&&(e.loc=new m),K.directSourceFile&&(e.sourceFile=K.directSourceFile),K.ranges&&(e.range=[ie.start,0]),e}function y(e){var r=new d(e.start);return K.locations&&(r.loc=new m(e.loc.start)),K.ranges&&(r.range=[e.range[0],0]),r}function v(e,r){return e.type=r,K.locations&&(e.loc.end=ae),K.ranges&&(e.range[1]=ne),e}function b(){if(K.locations){var e=new m;return e.end=e.start,e}}function N(){var e=new d(ie.start);return e.type="Identifier",e.end=ie.start,e.name="dummy"+ue++,e.loc=b(),e}function h(e){return e.name&&0===e.name.indexOf("dummy")}function S(e){if(ie.type===e)return n(),!0}function g(e){return!!S(e)||(s(1).type==e?(n(),n(),!0):s(2).type==e?(n(),n(),n(),!0):void 0)}function x(e){return"Identifier"===e.type||"MemberExpression"===e.type?e:N()}function _(e){return e.callee&&e.callee.object&&e.callee.object.object&&e.callee.object.object.name===K.runtimeParamName&&e.callee.property&&"tuple"===e.callee.property.name?e.arguments:null}function E(e,r){var t=[],n=Z.createNodeSpan(r,r,"Identifier",{name:"__filbertTmp"+pe++}),a=Z.createVarDeclFromId(r,n,r);if(t.push(a),e&&e.length>0)for(var o=0;o<e.length;o++){var i=e[o],s=_(i);if(s)for(var p=Z.createNodeSpan(r,r,"Literal",{value:o}),c=Z.createNodeSpan(r,r,"MemberExpression",{object:n,property:p,computed:!0}),u=E(s,c),l=0;l<u.length;l++)t.push(u[l]);else{x(i);var d=Z.createNodeSpan(r,r,"Literal",{value:o}),m=Z.createNodeSpan(r,r,"MemberExpression",{object:n,property:d,computed:!0});if("Identifier"!==i.type||re.exists(i.name)){var f=y(i);f.left=i,f.operator="=",f.right=m,v(f,"AssignmentExpression"),t.push(Z.createNodeFrom(f,"ExpressionStatement",{expression:f}))}else{re.addVar(i.name);var b=Z.createVarDeclFromId(i,i,m);t.push(b)}}}return t}function I(){var e=f();for(e.body=[];ie.type!==ee.eof;){var r=L();r&&e.body.push(r)}return v(e,"Program")}function L(){var e=ie.type,r=f();switch(e){case ee._break:return n(),v(r,"BreakStatement");case ee._continue:return n(),v(r,"ContinueStatement");case ee._class:return n(),T(r);case ee._def:return n(),G(r);case ee._for:return n(),w(r);case ee._from:return l(),n(),L();case ee._if:case ee._elif:return n(),ie.type===ee.parenL?r.test=C():r.test=k(),g(ee.colon),r.consequent=j(),ie.type===ee._elif?r.alternate=L():r.alternate=S(ee._else)&&S(ee.colon)?j():null,v(r,"IfStatement");case ee._import:return l(),n(),L();case ee.newline:return n(),null;case ee._pass:return n(),v(r,"EmptyStatement");case ee._return:return n(),ie.type===ee.newline||ie.type===ee.eof?r.argument=null:r.argument=k(),v(r,"ReturnStatement");case ee._while:return n(),ie.type===ee.parenL?r.test=C():r.test=k(),g(ee.colon),r.body=j(),v(r,"WhileStatement");case ee.semi:return n(),v(r,"EmptyStatement");case ee.indent:return te.undoIndent(),n(),L();default:var t=k();return h(t)?(n(),ie.type===ee.eof?v(r,"EmptyStatement"):L()):"VariableDeclaration"===t.type||"BlockStatement"===t.type?t:(r.expression=t,v(r,"ExpressionStatement"))}}function j(){var e=f();if(e.body=[],S(ee.newline))for(S(ee.indent);!S(ee.dedent)&&ie.type!==ee.eof;){var r=L();r&&e.body.push(r)}else e.body.push(L()),n();return v(e,"BlockStatement")}function w(e){var r=k(!1,!0),t=_(r);t||x(r),g(ee._in);var n=k();g(ee.colon);var a=j();return v(e,"BlockStatement"),Z.createFor(e,r,t,n,a)}function k(e,r){return R(r)}function C(){g(ee.parenL);var e=k();return g(ee.parenR),e}function R(e){var r=M(e);if(ie.type.isAssign){var t=_(r);if(t){n();var a=M(e),o=y(r);return o.body=E(t,a),v(o,"BlockStatement")}if(re.isClass()){var i=Z.createNodeFrom(r,"ThisExpression");r=Z.createNodeFrom(r,"MemberExpression",{object:i,property:r})}var s=y(r);if(s.operator=ie.value,s.left=x(r),n(),s.right=M(e),"+="===s.operator||"*="===s.operator){var a=Z.createNodeSpan(s.right,s.right,"CallExpression");a.callee=Z.createNodeOpsCallee(a,"+="===s.operator?"add":"multiply"),a.arguments=[r,s.right],s.right=a,s.operator="="}return"Identifier"!==r.type||re.exists(r.name)?v(s,"AssignmentExpression"):(re.addVar(r.name),Z.createVarDeclFromId(s.left,s.left,s.right))}return r}function M(e){var r=F(e);return ie.type===ee.comma?J(e,r):r}function F(e){return A(P(e),-1,e)}function A(e,r,t){var a,o,i,s=ie.type,p=ie.value,c=s===ee._not?ee._in.prec:s.prec;if(s===ee.exponentiation&&c>=r)return a=y(e),n(),i=A(P(t),c,t),o=Z.createNodeMemberCall(a,"Math","pow",[e,i]),A(o,r,t);if(null!=c&&(!t||s!==ee._in)&&c>r){if(n(),a=y(e),s===ee.floorDiv){i=A(P(t),c,t),v(a);var u=Z.createNodeSpan(a,a,"BinaryExpression",{left:e,operator:"/",right:i});o=Z.createNodeMemberCall(a,"Math","floor",[u])}else if(s===ee._in||s===ee._not)if(s===ee._in||S(ee._in)){i=A(P(t),c,t),v(a);var l=Z.createNodeSpan(a,a,"Literal",{value:s===ee._not});o=Z.createNodeRuntimeCall(a,"ops","in",[e,i,l])}else o=N();else s===ee.plusMin&&"+"===p||s===ee.multiplyModulo&&"*"===p?(a.arguments=[e],a.arguments.push(A(P(t),c,t)),v(a,"CallExpression"),a.callee=Z.createNodeOpsCallee(a,s===ee.plusMin?"add":"multiply"),o=a):(s===ee._is?S(ee._not)?a.operator="!==":a.operator="===":a.operator=null!=s.rep?s.rep:p,"="===Q[ie.start-1]&&"="===Q[ie.start-2]&&n(),a.left=e,a.right=A(P(t),c,t),o=v(a,s===ee._or||s===ee._and?"LogicalExpression":"BinaryExpression"));return A(o,r,t)}return e}function P(e){if(ie.type.prefix||ie.type===ee.plusMin){var r=ie.type===ee.plusMin?ee.posNegNot.prec:ie.type.prec,t=f();return t.operator=null!=ie.type.rep?ie.type.rep:ie.value,t.prefix=!0,n(),t.argument=A(P(e),r,e),v(t,"UnaryExpression")}return B(V(),!1)}function B(e,t){var n=y(e);if(S(ee.dot)){var a=W(!0);if(r.pythonRuntime.imports[e.name]&&r.pythonRuntime.imports[e.name][a.name]){var o=Z.createNodeSpan(e,e,"Identifier",{name:K.runtimeParamName}),i=Z.createNodeSpan(e,e,"Identifier",{name:"imports"}),s=Z.createNodeSpan(e,e,"MemberExpression",{object:o,property:i,computed:!1});n.object=Z.createNodeSpan(e,e,"MemberExpression",{object:s,property:e,computed:!1})}else e.name&&e.name===re.getThisReplace()?n.object=Z.createNodeSpan(e,e,"ThisExpression"):n.object=e;return n.property=a,n.computed=!1,B(v(n,"MemberExpression"),t)}if(S(ee.bracketL)){var p,c=!1;if(S(ee.colon)?c=!0:p=k(),!c&&S(ee.colon)&&(c=!0),c)return O(n,e,p,t);var u=Z.createNodeSpan(p,p,"CallExpression");return u.callee=Z.createNodeOpsCallee(p,"subscriptIndex"),u.arguments=[e,p],n.object=e,n.property=u,n.computed=!0,g(ee.bracketR),B(v(n,"MemberExpression"),t)}if(!t&&S(ee.parenL)){if(re.isUserFunction(e.name)){var l=Z.createNodeRuntimeCall(n,"utils","createParamsObj",$());n.arguments=[l]}else n.arguments=H(ee.parenR,!1);if(re.isNewObj(e.name)?v(n,"NewExpression"):v(n,"CallExpression"),r.pythonRuntime.functions[e.name]){var o=Z.createNodeSpan(e,e,"Identifier",{name:K.runtimeParamName}),d=Z.createNodeSpan(e,e,"Identifier",{name:"functions"}),s=Z.createNodeSpan(e,e,"MemberExpression",{object:o,property:d,computed:!1});n.callee=Z.createNodeSpan(e,e,"MemberExpression",{object:s,property:e,computed:!1})}else n.callee=e;return B(n,t)}return e}function O(e,r,t,n){var a,o;t||(t=Z.createNodeFrom(e,"Literal",{value:null})),ie.type===ee.bracketR||S(ee.colon)?a=Z.createNodeFrom(e,"Literal",{value:null}):(a=k(),ie.type!==ee.bracketR&&g(ee.colon)),o=ie.type===ee.bracketR?Z.createNodeFrom(e,"Literal",{value:null}):k(),g(ee.bracketR),e.arguments=[t,a,o];var i=Z.createNodeFrom(r,"Identifier",{name:"_pySlice"}),s=Z.createNodeSpan(r,r,"MemberExpression",{object:r,property:i,computed:!1});return e.callee=s,B(v(e,"CallExpression"),n)}function V(){switch(ie.type){case ee._dict:return n(),z(ee.parenR);case ee.name:return W();case ee.num:case ee.string:case ee.regexp:var e=f();return e.value=ie.value,e.raw=Q.slice(ie.start,ie.end),n(),v(e,"Literal");case ee._None:case ee._True:case ee._False:var e=f();return e.value=ie.type.atomValue,e.raw=ie.type.keyword,n(),v(e,"Literal");case ee.parenL:var r=ie.startLoc,t=ie.start;if(n(),ie.type===ee.parenR){var e=J(!0);return S(ee.parenR),e}var a=M(!0);return K.locations&&(a.loc.start=r,a.loc.end=ie.endLoc),K.ranges&&(a.range=[t,ie.end]),g(ee.parenR),a;case ee.bracketL:return D();case ee.braceL:return z(ee.braceR);default:return N()}}function D(){var e=f();if(e.arguments=[],n(),!S(ee.bracketR)){var r=F(!1);if(ie.type===ee._for||ie.type===ee._if){var t=pe++;r=Z.createListCompPush(r,t);var a=q(r,!0);return v(e),Z.createListCompIife(e,a,t)}S(ee.comma)?e.arguments=[r].concat(H(ee.bracketR,!0,!1)):(g(ee.bracketR),e.arguments=[r])}v(e,"NewExpression");var o=Z.createNodeSpan(e,e,"Identifier",{name:K.runtimeParamName}),i=Z.createNodeSpan(e,e,"Identifier",{name:"objects"}),s=Z.createNodeSpan(e,e,"MemberExpression",{object:o,property:i,computed:!1}),p=Z.createNodeSpan(e,e,"Identifier",{name:"list"});return e.callee=Z.createNodeSpan(e,e,"MemberExpression",{object:s,property:p,computed:!1}),e}function q(e,r){if(r&&ie.type!==ee._for)return N();if(S(ee.bracketR))return e;var t=f();if(S(ee._for)){var n=k(!1,!0),a=_(n);a||x(n),g(ee._in);var o=k(),i=q(e,!1),s=Z.createNodeSpan(i,i,"BlockStatement",{body:[i]});return v(t,"BlockStatement"),Z.createFor(t,n,a,o,s)}return S(ee._if)?(ie.type===ee.parenL?t.test=C():t.test=k(),t.consequent=q(e,!1),v(t,"IfStatement")):N()}function T(e){var r=y(e);r.body=[],e.id=W(),e.params=[];var t=[];if(S(ee.parenL))for(var n=!0;!S(ee.parenR)&&ie.type!==ee.eof;)n?n=!1:g(ee.comma),t.push(W());g(ee.colon),re.startClass(e.id.name);var a=v(f()),o=j(),i=Z.createClass(r,e,t,a,o);return re.end(),i}function z(e){var r,t,a=f(),o=!0;for(a.arguments=[],n();!S(e)&&!S(ee.newline)&&ie.type!==ee.eof;){if(o?o=!1:g(ee.comma),e===ee.braceR)r=U(),g(ee.colon),t=F(!1);else if(e===ee.parenR){var i=W(!0);r=y(i),r.value=i.name,v(r,"Literal"),g(ee.eq),t=F(!1)}a.arguments.push(Z.createNodeSpan(r,t,"ArrayExpression",{elements:[r,t]}))}v(a,"NewExpression");var s=Z.createNodeSpan(a,a,"Identifier",{name:K.runtimeParamName}),p=Z.createNodeSpan(a,a,"Identifier",{name:"objects"}),c=Z.createNodeSpan(a,a,"MemberExpression",{object:s,property:p,computed:!1}),u=Z.createNodeSpan(a,a,"Identifier",{name:"dict"});return a.callee=Z.createNodeSpan(a,a,"MemberExpression",{object:c,property:u,computed:!1}),a}function U(){return ie.type===ee.num||ie.type===ee.string?V():ie.type===ee.name||ie.type.keyword?W():void 0}function W(){var e=f();return e.name=ie.type===ee.name?ie.value:ie.type.keyword,e.name||(e=N()),n(),v(e,"Identifier")}function G(e){var r=pe++;e.id=W(),e.params=[];var t=[],a=null,o=null,i=!0;for(g(ee.parenL);!S(ee.parenR)&&ie.type!==ee.eof;)if(i?i=!1:g(ee.comma),"*"===ie.value)n(),a=W();else if("**"===ie.value)n(),o=W();else{var s=W();S(ee.eq)?t.push({id:s,expr:F(!1)}):t.push({id:s,expr:null})}if(g(ee.colon),re.startFn(e.id.name),re.isParentClass()){var p=t.shift();re.setThisReplace(p.id.name)}var c=j();if(e.body=Z.createNodeSpan(c,c,"BlockStatement",{body:[]}),(t.length>0||a||o)&&(e.body.body.push(Z.createNodeParamsCheck(e.id,r)),e.body.body.push(Z.createVarDeclFromId(e.id,Z.createNodeSpan(e.id,e.id,"Identifier",{name:"__formalsIndex"+r}),Z.createNodeSpan(e.id,e.id,"Literal",{value:0}))),e.body.body.push(Z.createVarDeclFromId(e.id,Z.createNodeSpan(e.id,e.id,"Identifier",{name:"__args"+r}),Z.createNodeSpan(e.id,e.id,"Identifier",{name:"arguments"})))),t.length>0){e.body.body.push(Z.createNodeGetParamFn(e.id,r));for(var u=0;u<t.length;u++){var l=Z.createNodeSpan(t[u].id,t[u].id,"CallExpression",{callee:Z.createNodeSpan(t[u].id,t[u].id,"Identifier",{name:"__getParam"+r}),arguments:[Z.createNodeSpan(t[u].id,t[u].id,"Literal",{value:t[u].id.name})]});t[u].expr&&l.arguments.push(t[u].expr),e.body.body.push(Z.createVarDeclFromId(t[u].id,t[u].id,l))}}var d=a||o;if(d){if(a){var m=Z.createVarDeclFromId(a,a,Z.createNodeSpan(a,a,"ArrayExpression",{elements:[]}));e.body.body.push(m)}if(o){var f=Z.createVarDeclFromId(o,o,Z.createNodeSpan(o,o,"ObjectExpression",{properties:[]}));e.body.body.push(f)}var y=Z.createNodeSpan(d,d,"IfStatement",{test:Z.createNodeSpan(d,d,"Identifier",{name:"__params"+r}),consequent:Z.createNodeSpan(d,d,"BlockStatement",{body:[]})});a&&(y.consequent.body.push(Z.createNodeArgsWhileConsequent(a,r)),y.alternate=Z.createNodeArgsAlternate(a)),o&&y.consequent.body.push(Z.createNodeSpan(o,o,"ExpressionStatement",{expression:Z.createNodeSpan(o,o,"AssignmentExpression",{operator:"=",left:o,right:Z.createNodeMembIds(o,"__params"+r,"keywords")})})),e.body.body.push(y)}e.body.body.push(Z.createNodeFnBodyIife(c));var b;if(re.isParentClass()){v(e);var N=Z.createNodeSpan(e,e,"Identifier",{name:re.getParentClassName()}),h=Z.createNodeSpan(e,e,"Identifier",{name:"prototype"}),x=e.id,_=Z.createNodeSpan(e,e,"MemberExpression",{object:N,property:h,computed:!1}),E=Z.createNodeSpan(e,e,"MemberExpression",{object:_,property:x,computed:!1}),I=Z.createNodeSpan(e,e,"FunctionExpression",{body:e.body,params:e.params}),L=Z.createNodeSpan(e,e,"AssignmentExpression",{left:E,operator:"=",right:I});b=Z.createNodeSpan(e,e,"ExpressionStatement",{expression:L})}else b=v(e,"FunctionDeclaration");return re.end(),b}function H(e){for(var r=[];!S(e)&&!S(ee.newline)&&ie.type!==ee.eof;){var t=F(!1);for(h(t)?n():r.push(t);S(ee.comma););}return r}function $(){for(var e=[],r=!0;!S(ee.parenR)&&!S(ee.newline)&&ie.type!==ee.eof;){r?r=!1:g(ee.comma);var t=F(!1);if(S(ee.eq)){var n=F(!1),a=Z.createNodeSpan(t,n,"Identifier",{name:"__kwp"}),o=Z.createNodeSpan(t,n,"Literal",{value:!0}),i=Z.createNodeSpan(t,n,"ObjectExpression",{properties:[]});i.properties.push({type:"Property",key:t,value:n,kind:"init"}),i.properties.push({type:"Property",key:a,value:o,kind:"init"}),t=i}e.push(t)}return e}function J(e,r){var t=r?y(r):f();if(t.arguments=r?[r]:[],ie.type===ee.comma){for(var n=ie.start+1;c(Q.charCodeAt(n));)++n;(n>=X||";"===Q[n]||")"===Q[n]||p(Q.charCodeAt(n)))&&S(ee.comma)}for(;S(ee.comma);)t.arguments.push(F(e));v(t,"NewExpression");var a=Z.createNodeSpan(t,t,"Identifier",{name:K.runtimeParamName}),o=Z.createNodeSpan(t,t,"Identifier",{name:"objects"}),i=Z.createNodeSpan(t,t,"MemberExpression",{object:a,property:o,computed:!1}),s=Z.createNodeSpan(t,t,"Identifier",{name:"tuple"});return t.callee=Z.createNodeSpan(t,t,"MemberExpression",{object:i,property:s,computed:!1}),t}var K,Q,X,Y,Z,ee=r.tokTypes,re=r.scope,te=r.indentHist;e.parse_dammit=function(e,a){return Q=String(e),X=Q.length,t(a),K.tabSize||(K.tabSize=4),Y=r.tokenize(e,K),se.length=0,pe=0,re.init(),Z=r.getNodeCreator(f,y,v,E),n(),I()};var ne,ae,oe,ie={start:0,end:0},se=[],pe=0,ce=/[\u1680\u180e\u2000-\u200a\u202f\u205f\u3000\ufeff]/;d.prototype=r.Node.prototype;var ue=0});
TarGZ=function(){},TarGZ.load=function(t,e,n,r){var i=new TarGZ;return i.onload=e,i.onerror=r,i.onstream=n,i.load(t),i},TarGZ.stream=function(t,e,n,r){var i=new TarGZ;return i.onload=n,i.onerror=r,i.onstream=e,i.load(t),i},TarGZ.prototype={onerror:null,onload:null,onstream:null,ondata:null,load:function(t){var e=this,n=0;this.files=[],GZip.load(t,function(t){n=e.processTarChunks(t.data,n,t.outputSize),e.onload&&e.onload(e.files,t)},function(t){e.gzip=t,e.ondata&&e.ondata(t),n=e.processTarChunks(t.data,n,t.outputSize)},function(t,n,r){e.onerror&&e.onerror(t,n,r)})},cleanHighByte:function(t){return t.replace(/./g,function(t){return String.fromCharCode(255&t.charCodeAt(0))})},parseTar:function(t){this.files=[],this.processTarChunks([t],0,t.length)},processTarChunks:function(t,e,n){for(;n>=e+512;){var r=0==this.files.length?null:this.files[this.files.length-1];if(r&&null==r.data){if(!(e+r.length<=n))break;r.data=this.chunkSubstring(t,e,e+r.length),r.toDataURL=this.__toDataURL,e+=512*Math.ceil(r.length/512),this.onstream&&this.onstream(r,this.gzip)}else{var i=this.chunkSubstring(t,e,e+512),r=this.parseTarHeader(i,0);r.length>0||""!=r.filename?(this.files.push(r),e+=512,r.offset=e):e=n}}return e},parseTarHeader:function(t,e){var n=e||0,r={};return r.filename=t.substring(n,n+=100).split("\0",1)[0],r.mode=t.substring(n,n+=8).split("\0",1)[0],r.uid=t.substring(n,n+=8).split("\0",1)[0],r.gid=t.substring(n,n+=8).split("\0",1)[0],r.length=this.parseTarNumber(t.substring(n,n+=12)),r.lastModified=t.substring(n,n+=12).split("\0",1)[0],r.checkSum=t.substring(n,n+=8).split("\0",1)[0],r.fileType=t.substring(n,n+=1).split("\0",1)[0],r.linkName=t.substring(n,n+=100).split("\0",1)[0],r},parseTarNumber:function(t){return parseInt(t.replace(/[^\d]/g,""),8)},chunkSubstring:function(t,e,n){var r=0,i=0,a=0,o=0;for(a=0;a<t.length&&!(r+t[a].length>e);a++)r+=t[a].length;var s=[];for(i=r,o=a;o<t.length&&(s.push(t[o]),!(i+t[o].length>n));o++)i+=t[o].length;var B=s.join("");return B.substring(e-r,e-r+(n-e))},__toDataURL:function(){return this.data.substring(0,40).match(/^data:[^\/]+\/[^,]+,/)?this.data:TarGZ.prototype.cleanHighByte(this.data.substring(0,10)).match(/\377\330\377\340..JFIF/)?"data:image/jpeg;base64,"+btoa(TarGZ.prototype.cleanHighByte(this.data)):"PNG\r\n"==TarGZ.prototype.cleanHighByte(this.data.substring(0,6))?"data:image/png;base64,"+btoa(TarGZ.prototype.cleanHighByte(this.data)):TarGZ.prototype.cleanHighByte(this.data.substring(0,6)).match(/GIF8[79]a/)?"data:image/gif;base64,"+btoa(TarGZ.prototype.cleanHighByte(this.data)):"data:audio/wav;base64,"+btoa(TarGZ.prototype.cleanHighByte(this.data))}},Bin={"byte":function(t,e){return 255&t.charCodeAt(e)},UInt16BE:function(t,e){return Bin["byte"](t,e)<<8|Bin["byte"](t,e+1)},UInt32BE:function(t,e){return Bin["byte"](t,e)<<24|Bin["byte"](t,e+1)<<16|Bin["byte"](t,e+2)<<8|Bin["byte"](t,e+3)},UInt16LE:function(t,e){return Bin["byte"](t,e+1)<<8|Bin["byte"](t,e)},UInt32LE:function(t,e){return Bin["byte"](t,e+3)<<24|Bin["byte"](t,e+2)<<16|Bin["byte"](t,e+1)<<8|Bin["byte"](t,e)},CString:function(t,e){for(var n=e;n<t.length&&0!=Bin["byte"](t,n);n++);if(n==t.length)throw"No null byte encountered";return t.substring(e,n)},CRC16:function(t,e,n,r){return 65535&crc32(t,e,n,r)},CRC32:function(t,e,n,r){return crc32(t,e,n,r)}},GZip={DEFLATE:8,FTEXT:1,FHCRC:2,FEXTRA:4,FNAME:8,FCOMMENT:16,loadlocal:function(t,e,n,r){var i=this,a=null,o=t;try{var s=new Date;a||(a=i.parseHeader(o)),i.parseAllBody(o,a,n),i.parseFooter(o,a);var B=new Date-s;a.decompressionTime+=B}catch(u){return void console.log("error")}e&&e(a,null)},load:function(t,e,n,r,i){var a=new XMLHttpRequest,o=this,s=null;a.onreadystatechange=function(){if(4==a.readyState)if(200==a.status||0==a.status){var t=a.responseText;console.log("data"),console.log(t);try{var e=new Date;s||(s=o.parseHeader(t)),o.parseAllBody(t,s,r),o.parseFooter(t,s);var B=new Date-e;s.decompressionTime+=B}catch(u){return void i(a,u,s)}n&&n(s,a)}else i&&i(a);else if(3==a.readyState&&(200==a.status||0==a.status)){var t=a.responseText;if(t.length<1024)return;try{var e=new Date;s||(s=o.parseHeader(t)),o.parseBody(t,s,r);var B=new Date-e;s.decompressionTime+=B}catch(u){return}}},a.open("GET",e,!0),a.overrideMimeType("text/plain; charset=x-user-defined"),a.setRequestHeader("Content-Type","text/plain"),console.log("send"),a.send(null)},parseHeader:function(t){var e={};if(e.decompressionTime=0,e.id1=Bin["byte"](t,0),e.id2=Bin["byte"](t,1),e.compressionMethod=Bin["byte"](t,2),31!=e.id1||139!=e.id2||e.compressionMethod!=GZip.DEFLATE)throw"Not a GZip file: "+e.id1+","+e.id2+","+e.compressionMethod;e.flags=Bin["byte"](t,3),e.mtime=Bin.UInt32LE(t,4),e.extraFlags=Bin["byte"](t,8),e.operatingSystem=Bin["byte"](t,9);var n=10;if(e.flags&GZip.FEXTRA){var r=Bin.UInt16LE(t,n);n+=2,e.extraField=t.substring(n,n+r),n+=r}if(e.flags&GZip.FNAME&&(e.filename=Bin.CString(t,n),n+=e.filename.length+1),e.flags&GZip.FCOMMENT&&(e.comment=Bin.CString(t,n),n+=e.comment.length+1),e.computedHeaderCRC16=Bin.CRC16(t,0,n,0),e.flags&GZip.FHCRC){if(e.headerCRC16=Bin.UInt16LE(t,n),null!=e.computedHeaderCRC16&&e.headerCRC16!=e.computedHeaderCRC16)throw"Header CRC16 check failed";n+=2}return e.offset=n,e.data=[],e.outputSize=0,e.inflater=new Inflater,e.inflater.start_inflate(e),e},parseBody:function(t,e,n){return e.inflater.continue_inflate(t,e,n),e},parseAllBody:function(t,e,n){return e.inflater.final_inflate(t,e,n),e},parseFooter:function(t,e){if(e.CRC32=Bin.UInt32LE(t,t.length-8),e.computedCRC32&&e.computedCRC32!=e.CRC32)throw"Data CRC32 check failed";if(e.inputSize=Bin.UInt32LE(t,t.length-4),null!=e.data&&e.inputSize!=e.outputSize%4294967295)throw"Data length check failed";return e}},function(){for(var t="00000000 77073096 EE0E612C 990951BA 076DC419 706AF48F E963A535 9E6495A3 0EDB8832 79DCB8A4 E0D5E91E 97D2D988 09B64C2B 7EB17CBD E7B82D07 90BF1D91 1DB71064 6AB020F2 F3B97148 84BE41DE 1ADAD47D 6DDDE4EB F4D4B551 83D385C7 136C9856 646BA8C0 FD62F97A 8A65C9EC 14015C4F 63066CD9 FA0F3D63 8D080DF5 3B6E20C8 4C69105E D56041E4 A2677172 3C03E4D1 4B04D447 D20D85FD A50AB56B 35B5A8FA 42B2986C DBBBC9D6 ACBCF940 32D86CE3 45DF5C75 DCD60DCF ABD13D59 26D930AC 51DE003A C8D75180 BFD06116 21B4F4B5 56B3C423 CFBA9599 B8BDA50F 2802B89E 5F058808 C60CD9B2 B10BE924 2F6F7C87 58684C11 C1611DAB B6662D3D 76DC4190 01DB7106 98D220BC EFD5102A 71B18589 06B6B51F 9FBFE4A5 E8B8D433 7807C9A2 0F00F934 9609A88E E10E9818 7F6A0DBB 086D3D2D 91646C97 E6635C01 6B6B51F4 1C6C6162 856530D8 F262004E 6C0695ED 1B01A57B 8208F4C1 F50FC457 65B0D9C6 12B7E950 8BBEB8EA FCB9887C 62DD1DDF 15DA2D49 8CD37CF3 FBD44C65 4DB26158 3AB551CE A3BC0074 D4BB30E2 4ADFA541 3DD895D7 A4D1C46D D3D6F4FB 4369E96A 346ED9FC AD678846 DA60B8D0 44042D73 33031DE5 AA0A4C5F DD0D7CC9 5005713C 270241AA BE0B1010 C90C2086 5768B525 206F85B3 B966D409 CE61E49F 5EDEF90E 29D9C998 B0D09822 C7D7A8B4 59B33D17 2EB40D81 B7BD5C3B C0BA6CAD EDB88320 9ABFB3B6 03B6E20C 74B1D29A EAD54739 9DD277AF 04DB2615 73DC1683 E3630B12 94643B84 0D6D6A3E 7A6A5AA8 E40ECF0B 9309FF9D 0A00AE27 7D079EB1 F00F9344 8708A3D2 1E01F268 6906C2FE F762575D 806567CB 196C3671 6E6B06E7 FED41B76 89D32BE0 10DA7A5A 67DD4ACC F9B9DF6F 8EBEEFF9 17B7BE43 60B08ED5 D6D6A3E8 A1D1937E 38D8C2C4 4FDFF252 D1BB67F1 A6BC5767 3FB506DD 48B2364B D80D2BDA AF0A1B4C 36034AF6 41047A60 DF60EFC3 A867DF55 316E8EEF 4669BE79 CB61B38C BC66831A 256FD2A0 5268E236 CC0C7795 BB0B4703 220216B9 5505262F C5BA3BBE B2BD0B28 2BB45A92 5CB36A04 C2D7FFA7 B5D0CF31 2CD99E8B 5BDEAE1D 9B64C2B0 EC63F226 756AA39C 026D930A 9C0906A9 EB0E363F 72076785 05005713 95BF4A82 E2B87A14 7BB12BAE 0CB61B38 92D28E9B E5D5BE0D 7CDCEFB7 0BDBDF21 86D3D2D4 F1D4E242 68DDB3F8 1FDA836E 81BE16CD F6B9265B 6FB077E1 18B74777 88085AE6 FF0F6A70 66063BCA 11010B5C 8F659EFF F862AE69 616BFFD3 166CCF45 A00AE278 D70DD2EE 4E048354 3903B3C2 A7672661 D06016F7 4969474D 3E6E77DB AED16A4A D9D65ADC 40DF0B66 37D83BF0 A9BCAE53 DEBB9EC5 47B2CF7F 30B5FFE9 BDBDF21C CABAC28A 53B39330 24B4A3A6 BAD03605 CDD70693 54DE5729 23D967BF B3667A2E C4614AB8 5D681B02 2A6F2B94 B40BBE37 C30C8EA1 5A05DF1B 2D02EF8D",e=[],n=0;n<t.length/9;n++)e.push(parseInt(t.substr(9*n,8),16));crc32=function(t,n,r,i){i^=-1;for(var a=Math.min(t.length,n+r),o=n;o<a;o++){var s=255&(i^t.charCodeAt(o));i=i>>>8^e[s]}return i^-1}}(),Inflater=function(){var t,e,n,r,i,a,o,s,B,u,l,f,D,C,A,h,E=32768,F=0,c=9,d=6,p=null,g=new Array(0,1,3,7,15,31,63,127,255,511,1023,2047,4095,8191,16383,32767,65535),b=new Array(3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0),y=new Array(0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,99,99),m=new Array(1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577),w=new Array(0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13),v=new Array(16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15),T=function(){this.next=null,this.list=null},R=function(){this.e=0,this.b=0,this.n=0,this.t=null},G=function(t,e,n,r,i,a){this.BMAX=16,this.N_MAX=288,this.status=0,this.root=null,this.m=0;var o,s,B,u,l,f,D,C,A,h,E,F,c,d,p,g,b,y=new Array(this.BMAX+1),m=new Array(this.BMAX+1),w=new R,v=new Array(this.BMAX),G=new Array(this.N_MAX),H=new Array(this.BMAX+1);for(b=this.root=null,f=0;f<y.length;f++)y[f]=0;for(f=0;f<m.length;f++)m[f]=0;for(f=0;f<v.length;f++)v[f]=null;for(f=0;f<G.length;f++)G[f]=0;for(f=0;f<H.length;f++)H[f]=0;s=e>256?t[256]:this.BMAX,A=t,h=0,f=e;do y[A[h]]++,h++;while(--f>0);if(y[0]==e)return this.root=null,this.m=0,void(this.status=0);for(D=1;D<=this.BMAX&&0==y[D];D++);for(C=D,a<D&&(a=D),f=this.BMAX;0!=f&&0==y[f];f--);for(u=f,a>f&&(a=f),d=1<<D;D<f;D++,d<<=1)if((d-=y[D])<0)return this.status=2,void(this.m=a);if((d-=y[f])<0)return this.status=2,void(this.m=a);for(y[f]+=d,H[1]=D=0,A=y,h=1,c=2;--f>0;)H[c++]=D+=A[h++];A=t,h=0,f=0;do 0!=(D=A[h++])&&(G[H[D]++]=f);while(++f<e);for(e=H[u],H[0]=f=0,A=G,h=0,l=-1,F=m[0]=0,E=null,p=0;C<=u;C++)for(o=y[C];o-- >0;){for(;C>F+m[1+l];){if(F+=m[1+l],l++,p=(p=u-F)>a?a:p,(B=1<<(D=C-F))>o+1)for(B-=o+1,c=C;++D<p&&!((B<<=1)<=y[++c]);)B-=y[c];for(F+D>s&&F<s&&(D=s-F),p=1<<D,m[1+l]=D,E=new Array(p),g=0;g<p;g++)E[g]=new R;b=null==b?this.root=new T:b.next=new T,b.next=null,b.list=E,v[l]=E,l>0&&(H[l]=f,w.b=m[l],w.e=16+D,w.t=E,D=(f&(1<<F)-1)>>F-m[l],v[l-1][D].e=w.e,v[l-1][D].b=w.b,v[l-1][D].n=w.n,v[l-1][D].t=w.t)}for(w.b=C-F,h>=e?w.e=99:A[h]<n?(w.e=A[h]<256?16:15,w.n=A[h++]):(w.e=i[A[h]-n],w.n=r[A[h++]-n]),B=1<<C-F,D=f>>F;D<p;D+=B)E[D].e=w.e,E[D].b=w.b,E[D].n=w.n,E[D].t=w.t;for(D=1<<C-1;0!=(f&D);D>>=1)f^=D;for(f^=D;(f&(1<<F)-1)!=H[l];)F-=m[l],l--}this.m=m[1],this.status=0!=d&&1!=u?1:0},H=function(){return A.length<=h?-1:255&A.charCodeAt(h++)},M=function(t){for(;a<t;)i|=H()<<a,a+=8},Z=function(t){return i&g[t]},_=function(t){i>>=t,a-=t},k=function(n,r,i){var a,s,A;if(0==i)return 0;for(A=0;;){for(M(D),s=l.list[Z(D)],a=s.e;a>16;){if(99==a)return-1;_(s.b),a-=16,M(a),s=s.t[Z(a)],a=s.e}if(_(s.b),16!=a){if(15==a)break;for(M(a),B=s.n+Z(a),_(a),M(C),s=f.list[Z(C)],a=s.e;a>16;){if(99==a)return-1;_(s.b),a-=16,M(a),s=s.t[Z(a)],a=s.e}for(_(s.b),M(a),u=e-s.n-Z(a),_(a);B>0&&A<i;)B--,u&=E-1,e&=E-1,n[r+A++]=t[e++]=t[u++];if(A==i)return i}else if(e&=E-1,n[r+A++]=t[e++]=s.n,A==i)return i}return o=-1,A},S=function(n,r,s){var u;if(u=7&a,_(u),M(16),u=Z(16),_(16),M(16),u!=(65535&~i))return-1;for(_(16),B=u,u=0;B>0&&u<s;)B--,e&=E-1,M(8),n[r+u++]=t[e++]=Z(8),_(8);return 0==B&&(o=-1),u},I=function(t,e,i){if(null==p){var a,o,s=new Array(288);for(a=0;a<144;a++)s[a]=8;for(;a<256;a++)s[a]=9;for(;a<280;a++)s[a]=7;for(;a<288;a++)s[a]=8;if(r=7,o=new G(s,288,257,b,y,r),0!=o.status)return alert("HufBuild error: "+o.status),-1;for(p=o.root,r=o.m,a=0;a<30;a++)s[a]=5;if(zip_fixed_bd=5,o=new G(s,30,0,m,w,zip_fixed_bd),o.status>1)throw p=null,"HufBuild error: "+o.status;n=o.root,zip_fixed_bd=o.m}return l=p,f=n,D=r,C=zip_fixed_bd,k(t,e,i)},x=function(t,e,n){var r,i,a,o,s,B,u,A,h,E=new Array(316);for(r=0;r<E.length;r++)E[r]=0;if(M(5),u=257+Z(5),_(5),M(5),A=1+Z(5),_(5),M(4),B=4+Z(4),_(4),u>286||A>30)return-1;for(i=0;i<B;i++)M(3),E[v[i]]=Z(3),_(3);for(;i<19;i++)E[v[i]]=0;if(D=7,h=new G(E,19,19,null,null,D),0!=h.status)return-1;for(l=h.root,D=h.m,o=u+A,r=a=0;r<o;)if(M(D),s=l.list[Z(D)],i=s.b,_(i),i=s.n,i<16)E[r++]=a=i;else if(16==i){if(M(2),i=3+Z(2),_(2),r+i>o)return-1;for(;i-- >0;)E[r++]=a}else if(17==i){if(M(3),i=3+Z(3),_(3),r+i>o)return-1;for(;i-- >0;)E[r++]=0;a=0}else{if(M(7),i=11+Z(7),_(7),r+i>o)return-1;for(;i-- >0;)E[r++]=0;a=0}if(D=c,h=new G(E,u,257,b,y,D),0==D&&(h.status=1),0!=h.status)return 1==h.status,-1;for(l=h.root,D=h.m,r=0;r<A;r++)E[r]=E[r+u];return C=d,h=new G(E,A,0,m,w,C),f=h.root,C=h.m,0==C&&u>257?-1:(1==h.status,0!=h.status?-1:k(t,e,n))},X=function(){null==t&&(t=new Array(2*E)),e=0,i=0,a=0,o=-1,s=!1,B=u=0,l=null},z=function(n,r,i){var a,f;for(a=0;a<i;){if(s&&o==-1)return a;if(B>0){if(o!=F)for(;B>0&&a<i;)B--,u&=E-1,e&=E-1,n[r+a++]=t[e++]=t[u++];else{for(;B>0&&a<i;)B--,e&=E-1,M(8),n[r+a++]=t[e++]=Z(8),_(8);0==B&&(o=-1)}if(a==i)return a}if(o==-1){if(s)break;M(1),0!=Z(1)&&(s=!0),_(1),M(2),o=Z(2),_(2),l=null,B=0}switch(o){case 0:f=S(n,r+a,i-a);break;case 1:f=null!=l?k(n,r+a,i-a):I(n,r+a,i-a);break;case 2:f=null!=l?k(n,r+a,i-a):x(n,r+a,i-a);break;default:f=-1}if(f==-1)return s?0:-1;a+=f}return a},L=!1,N=function(t){L=!1,X(),h=t.offset,t.computedCRC32=0},U=function(t,e,n){var r,i,a=4096;if(A=t,!L&&t.length<=h+a+64)return e;for(var o=new Array(a);(r=z(o,0,o.length))>0;){var s=new Array(r);for(i=0;i<r;i++)s[i]=String.fromCharCode(o[i]);var B=s.join("");if(e.data.push(B),e.outputSize+=B.length,e.offset=h,e.computedCRC32=Bin.CRC32(B,0,B.length,e.computedCRC32),!L&&t.length<=h+a+64)break}return A=null,n&&n(e),e},j=function(t,e,n){L=!0,U(t,e,n)};this.inflate=function(t,e,n){return N(e),j(t,e,n)},this.start_inflate=N,this.continue_inflate=U,this.final_inflate=j};
function $A(e){if(!e)return[];if("toArray"in Object(e))return e.toArray();for(var t=e.length||0,n=new Array(t);t--;)n[t]=e[t];return n}function $w(e){return Object.isString(e)?(e=e.strip(),e?e.split(/\s+/):[]):[]}function $H(e){return new Hash(e)}function $R(e,t,n){return new ObjectRange(e,t,n)}var Prototype={Version:"1.7.2",Browser:function(){var e=navigator.userAgent,t="[object Opera]"==Object.prototype.toString.call(window.opera);return{IE:!!window.attachEvent&&!t,Opera:t,WebKit:e.indexOf("AppleWebKit/")>-1,Gecko:e.indexOf("Gecko")>-1&&e.indexOf("KHTML")===-1,MobileSafari:/Apple.*Mobile/.test(e)}}(),BrowserFeatures:{XPath:!!document.evaluate,SelectorsAPI:!!document.querySelector,ElementExtensions:function(){var e=window.Element||window.HTMLElement;return!(!e||!e.prototype)}(),SpecificElementExtensions:function(){if("undefined"!=typeof window.HTMLDivElement)return!0;var e=document.createElement("div"),t=document.createElement("form"),n=!1;return e.__proto__&&e.__proto__!==t.__proto__&&(n=!0),e=t=null,n}()},ScriptFragment:"<script[^>]*>([\\S\\s]*?)</script\\s*>",JSONFilter:/^\/\*-secure-([\s\S]*)\*\/\s*$/,emptyFunction:function(){},K:function(e){return e}};Prototype.Browser.MobileSafari&&(Prototype.BrowserFeatures.SpecificElementExtensions=!1);var Class=function(){function e(){}function t(){function t(){this.initialize.apply(this,arguments)}var n=null,r=$A(arguments);Object.isFunction(r[0])&&(n=r.shift()),Object.extend(t,Class.Methods),t.superclass=n,t.subclasses=[],n&&(e.prototype=n.prototype,t.prototype=new e,n.subclasses.push(t));for(var i=0,o=r.length;i<o;i++)t.addMethods(r[i]);return t.prototype.initialize||(t.prototype.initialize=Prototype.emptyFunction),t.prototype.constructor=t,t}function n(e){var t=this.superclass&&this.superclass.prototype,n=Object.keys(e);r&&(e.toString!=Object.prototype.toString&&n.push("toString"),e.valueOf!=Object.prototype.valueOf&&n.push("valueOf"));for(var i=0,o=n.length;i<o;i++){var s=n[i],a=e[s];if(t&&Object.isFunction(a)&&"$super"==a.argumentNames()[0]){var u=a;a=function(e){return function(){return t[e].apply(this,arguments)}}(s).wrap(u),a.valueOf=function(e){return function(){return e.valueOf.call(e)}}(u),a.toString=function(e){return function(){return e.toString.call(e)}}(u)}this.prototype[s]=a}return this}var r=function(){for(var e in{toString:1})if("toString"===e)return!1;return!0}();return{create:t,Methods:{addMethods:n}}}();!function(){function e(e){switch(e){case null:return O;case void 0:return S}var t=typeof e;switch(t){case"boolean":return w;case"number":return x;case"string":return T}return N}function t(e,t){for(var n in t)e[n]=t[n];return e}function n(e){try{return y(e)?"undefined":null===e?"null":e.inspect?e.inspect():String(e)}catch(t){if(t instanceof RangeError)return"...";throw t}}function r(e){return i("",{"":e},[])}function i(t,n,r){var o=n[t];e(o)===N&&"function"==typeof o.toJSON&&(o=o.toJSON(t));var s=b.call(o);switch(s){case A:case j:case _:o=o.valueOf()}switch(o){case null:return"null";case!0:return"true";case!1:return"false"}var a=typeof o;switch(a){case"string":return o.inspect(!0);case"number":return isFinite(o)?String(o):"null";case"object":for(var u=0,c=r.length;u<c;u++)if(r[u]===o)throw new TypeError("Cyclic reference to '"+o+"' in object");r.push(o);var l=[];if(s===P){for(var u=0,c=o.length;u<c;u++){var f=i(u,o,r);l.push("undefined"==typeof f?"null":f)}l="["+l.join(",")+"]"}else{for(var d=Object.keys(o),u=0,c=d.length;u<c;u++){var t=d[u],f=i(t,o,r);"undefined"!=typeof f&&l.push(t.inspect(!0)+":"+f)}l="{"+l.join(",")+"}"}return r.pop(),l}}function o(e){return JSON.stringify(e)}function s(e){return $H(e).toQueryString()}function a(e){return e&&e.toHTML?e.toHTML():String.interpret(e)}function u(t){if(e(t)!==N)throw new TypeError;var n=[];for(var r in t)E.call(t,r)&&n.push(r);if($)for(var i=0;r=R[i];i++)E.call(t,r)&&n.push(r);return n}function c(e){var t=[];for(var n in e)t.push(e[n]);return t}function l(e){return t({},e)}function f(e){return!(!e||1!=e.nodeType)}function d(e){return b.call(e)===P}function p(e){return e instanceof Hash}function h(e){return b.call(e)===C}function m(e){return b.call(e)===_}function g(e){return b.call(e)===A}function v(e){return b.call(e)===L}function y(e){return"undefined"==typeof e}var b=Object.prototype.toString,E=Object.prototype.hasOwnProperty,O="Null",S="Undefined",w="Boolean",x="Number",T="String",N="Object",C="[object Function]",j="[object Boolean]",A="[object Number]",_="[object String]",P="[object Array]",L="[object Date]",M=window.JSON&&"function"==typeof JSON.stringify&&"0"===JSON.stringify(0)&&"undefined"==typeof JSON.stringify(Prototype.K),R=["toString","toLocaleString","valueOf","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","constructor"],$=function(){for(var e in{toString:1})if("toString"===e)return!1;return!0}(),H="function"==typeof Array.isArray&&Array.isArray([])&&!Array.isArray({});H&&(d=Array.isArray),t(Object,{extend:t,inspect:n,toJSON:M?o:r,toQueryString:s,toHTML:a,keys:Object.keys||u,values:c,clone:l,isElement:f,isArray:d,isHash:p,isFunction:h,isString:m,isNumber:g,isDate:v,isUndefined:y})}(),Object.extend(Function.prototype,function(){function e(e,t){for(var n=e.length,r=t.length;r--;)e[n+r]=t[r];return e}function t(t,n){return t=l.call(t,0),e(t,n)}function n(){var e=this.toString().match(/^[\s\(]*function[^(]*\(([^)]*)\)/)[1].replace(/\/\/.*?[\r\n]|\/\*(?:.|[\r\n])*?\*\//g,"").replace(/\s+/g,"").split(",");return 1!=e.length||e[0]?e:[]}function r(e){if(arguments.length<2&&Object.isUndefined(arguments[0]))return this;if(!Object.isFunction(this))throw new TypeError("The object is not callable.");var n=function(){},r=this,i=l.call(arguments,1),o=function(){var n=t(i,arguments),s=this instanceof o?this:e;return r.apply(s,n)};return n.prototype=this.prototype,o.prototype=new n,o}function i(t){var n=this,r=l.call(arguments,1);return function(i){var o=e([i||window.event],r);return n.apply(t,o)}}function o(){if(!arguments.length)return this;var e=this,n=l.call(arguments,0);return function(){var r=t(n,arguments);return e.apply(this,r)}}function s(e){var t=this,n=l.call(arguments,1);return e=1e3*e,window.setTimeout(function(){return t.apply(t,n)},e)}function a(){var t=e([.01],arguments);return this.delay.apply(this,t)}function u(t){var n=this;return function(){var r=e([n.bind(this)],arguments);return t.apply(this,r)}}function c(){if(this._methodized)return this._methodized;var t=this;return this._methodized=function(){var n=e([this],arguments);return t.apply(null,n)}}var l=Array.prototype.slice,f={argumentNames:n,bindAsEventListener:i,curry:o,delay:s,defer:a,wrap:u,methodize:c};return Function.prototype.bind||(f.bind=r),f}()),function(e){function t(){return this.getUTCFullYear()+"-"+(this.getUTCMonth()+1).toPaddedString(2)+"-"+this.getUTCDate().toPaddedString(2)+"T"+this.getUTCHours().toPaddedString(2)+":"+this.getUTCMinutes().toPaddedString(2)+":"+this.getUTCSeconds().toPaddedString(2)+"Z"}function n(){return this.toISOString()}e.toISOString||(e.toISOString=t),e.toJSON||(e.toJSON=n)}(Date.prototype),RegExp.prototype.match=RegExp.prototype.test,RegExp.escape=function(e){return String(e).replace(/([.*+?^=!:${}()|[\]\/\\])/g,"\\$1")};var PeriodicalExecuter=Class.create({initialize:function(e,t){this.callback=e,this.frequency=t,this.currentlyExecuting=!1,this.registerCallback()},registerCallback:function(){this.timer=setInterval(this.onTimerEvent.bind(this),1e3*this.frequency)},execute:function(){this.callback(this)},stop:function(){this.timer&&(clearInterval(this.timer),this.timer=null)},onTimerEvent:function(){if(!this.currentlyExecuting)try{this.currentlyExecuting=!0,this.execute(),this.currentlyExecuting=!1}catch(e){throw this.currentlyExecuting=!1,e}}});Object.extend(String,{interpret:function(e){return null==e?"":String(e)},specialChar:{"\b":"\\b","\t":"\\t","\n":"\\n","\f":"\\f","\r":"\\r","\\":"\\\\"}}),Object.extend(String.prototype,function(){function prepareReplacement(e){if(Object.isFunction(e))return e;var t=new Template(e);return function(e){return t.evaluate(e)}}function isNonEmptyRegExp(e){return e.source&&"(?:)"!==e.source}function gsub(e,t){var n,r="",i=this;if(t=prepareReplacement(t),Object.isString(e)&&(e=RegExp.escape(e)),!e.length&&!isNonEmptyRegExp(e))return t=t(""),t+i.split("").join(t)+t;for(;i.length>0;)n=i.match(e),n&&n[0].length>0?(r+=i.slice(0,n.index),r+=String.interpret(t(n)),i=i.slice(n.index+n[0].length)):(r+=i,i="");return r}function sub(e,t,n){return t=prepareReplacement(t),n=Object.isUndefined(n)?1:n,this.gsub(e,function(e){return--n<0?e[0]:t(e)})}function scan(e,t){return this.gsub(e,t),String(this)}function truncate(e,t){return e=e||30,t=Object.isUndefined(t)?"...":t,this.length>e?this.slice(0,e-t.length)+t:String(this)}function strip(){return this.replace(/^\s+/,"").replace(/\s+$/,"")}function stripTags(){return this.replace(/<\w+(\s+("[^"]*"|'[^']*'|[^>])+)?>|<\/\w+>/gi,"")}function stripScripts(){return this.replace(new RegExp(Prototype.ScriptFragment,"img"),"")}function extractScripts(){var e=new RegExp(Prototype.ScriptFragment,"img"),t=new RegExp(Prototype.ScriptFragment,"im");return(this.match(e)||[]).map(function(e){return(e.match(t)||["",""])[1]})}function evalScripts(){return this.extractScripts().map(function(script){return eval(script)})}function escapeHTML(){return this.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;")}function unescapeHTML(){return this.stripTags().replace(/&lt;/g,"<").replace(/&gt;/g,">").replace(/&amp;/g,"&")}function toQueryParams(e){var t=this.strip().match(/([^?#]*)(#.*)?$/);return t?t[1].split(e||"&").inject({},function(e,t){if((t=t.split("="))[0]){var n=decodeURIComponent(t.shift()),r=t.length>1?t.join("="):t[0];void 0!=r&&(r=r.gsub("+"," "),r=decodeURIComponent(r)),n in e?(Object.isArray(e[n])||(e[n]=[e[n]]),e[n].push(r)):e[n]=r}return e}):{}}function toArray(){return this.split("")}function succ(){return this.slice(0,this.length-1)+String.fromCharCode(this.charCodeAt(this.length-1)+1)}function times(e){return e<1?"":new Array(e+1).join(this)}function camelize(){return this.replace(/-+(.)?/g,function(e,t){return t?t.toUpperCase():""})}function capitalize(){return this.charAt(0).toUpperCase()+this.substring(1).toLowerCase()}function underscore(){return this.replace(/::/g,"/").replace(/([A-Z]+)([A-Z][a-z])/g,"$1_$2").replace(/([a-z\d])([A-Z])/g,"$1_$2").replace(/-/g,"_").toLowerCase()}function dasherize(){return this.replace(/_/g,"-")}function inspect(e){var t=this.replace(/[\x00-\x1f\\]/g,function(e){return e in String.specialChar?String.specialChar[e]:"\\u00"+e.charCodeAt().toPaddedString(2,16)});return e?'"'+t.replace(/"/g,'\\"')+'"':"'"+t.replace(/'/g,"\\'")+"'"}function unfilterJSON(e){return this.replace(e||Prototype.JSONFilter,"$1")}function isJSON(){var e=this;return!e.blank()&&(e=e.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,"@"),e=e.replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,"]"),e=e.replace(/(?:^|:|,)(?:\s*\[)+/g,""),/^[\],:{}\s]*$/.test(e))}function evalJSON(sanitize){var json=this.unfilterJSON(),cx=/[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;cx.test(json)&&(json=json.replace(cx,function(e){return"\\u"+("0000"+e.charCodeAt(0).toString(16)).slice(-4)}));try{if(!sanitize||json.isJSON())return eval("("+json+")")}catch(e){}throw new SyntaxError("Badly formed JSON string: "+this.inspect())}function parseJSON(){var e=this.unfilterJSON();return JSON.parse(e)}function include(e){return this.indexOf(e)>-1}function startsWith(e,t){return t=Object.isNumber(t)?t:0,this.lastIndexOf(e,t)===t}function endsWith(e,t){e=String(e),t=Object.isNumber(t)?t:this.length,t<0&&(t=0),t>this.length&&(t=this.length);var n=t-e.length;return n>=0&&this.indexOf(e,n)===n}function empty(){return""==this}function blank(){return/^\s*$/.test(this)}function interpolate(e,t){return new Template(this,t).evaluate(e)}var NATIVE_JSON_PARSE_SUPPORT=window.JSON&&"function"==typeof JSON.parse&&JSON.parse('{"test": true}').test;return{gsub:gsub,sub:sub,scan:scan,truncate:truncate,strip:String.prototype.trim||strip,stripTags:stripTags,stripScripts:stripScripts,extractScripts:extractScripts,evalScripts:evalScripts,escapeHTML:escapeHTML,unescapeHTML:unescapeHTML,toQueryParams:toQueryParams,parseQuery:toQueryParams,toArray:toArray,succ:succ,times:times,camelize:camelize,capitalize:capitalize,underscore:underscore,dasherize:dasherize,inspect:inspect,unfilterJSON:unfilterJSON,isJSON:isJSON,evalJSON:NATIVE_JSON_PARSE_SUPPORT?parseJSON:evalJSON,include:include,startsWith:String.prototype.startsWith||startsWith,endsWith:String.prototype.endsWith||endsWith,empty:empty,blank:blank,interpolate:interpolate}}());var Template=Class.create({initialize:function(e,t){this.template=e.toString(),this.pattern=t||Template.Pattern},evaluate:function(e){return e&&Object.isFunction(e.toTemplateReplacements)&&(e=e.toTemplateReplacements()),this.template.gsub(this.pattern,function(t){if(null==e)return t[1]+"";var n=t[1]||"";if("\\"==n)return t[2];var r=e,i=t[3],o=/^([^.[]+|\[((?:.*?[^\\])?)\])(\.|\[|$)/;if(t=o.exec(i),null==t)return n;for(;null!=t;){var s=t[1].startsWith("[")?t[2].replace(/\\\\]/g,"]"):t[1];if(r=r[s],null==r||""==t[3])break;i=i.substring("["==t[3]?t[1].length:t[0].length),t=o.exec(i)}return n+String.interpret(r)})}});Template.Pattern=/(^|.|\r|\n)(#\{(.*?)\})/;var $break={},Enumerable=function(){function e(e,t){try{this._each(e,t)}catch(n){if(n!=$break)throw n}return this}function t(e,t,n){var r=-e,i=[],o=this.toArray();if(e<1)return o;for(;(r+=e)<o.length;)i.push(o.slice(r,r+e));return i.collect(t,n)}function n(e,t){e=e||Prototype.K;var n=!0;return this.each(function(r,i){if(n=n&&!!e.call(t,r,i,this),!n)throw $break},this),n}function r(e,t){e=e||Prototype.K;var n=!1;return this.each(function(r,i){if(n=!!e.call(t,r,i,this))throw $break},this),n}function i(e,t){e=e||Prototype.K;var n=[];return this.each(function(r,i){n.push(e.call(t,r,i,this))},this),n}function o(e,t){var n;return this.each(function(r,i){if(e.call(t,r,i,this))throw n=r,$break},this),n}function s(e,t){var n=[];return this.each(function(r,i){e.call(t,r,i,this)&&n.push(r)},this),n}function a(e,t,n){t=t||Prototype.K;var r=[];return Object.isString(e)&&(e=new RegExp(RegExp.escape(e))),this.each(function(i,o){e.match(i)&&r.push(t.call(n,i,o,this))},this),r}function u(e){if(Object.isFunction(this.indexOf)&&this.indexOf(e)!=-1)return!0;var t=!1;return this.each(function(n){if(n==e)throw t=!0,$break}),t}function c(e,t){return t=Object.isUndefined(t)?null:t,this.eachSlice(e,function(n){for(;n.length<e;)n.push(t);return n})}function l(e,t,n){return this.each(function(r,i){e=t.call(n,e,r,i,this)},this),e}function f(e){var t=$A(arguments).slice(1);return this.map(function(n){return n[e].apply(n,t)})}function d(e,t){e=e||Prototype.K;var n;return this.each(function(r,i){r=e.call(t,r,i,this),(null==n||r>=n)&&(n=r)},this),n}function p(e,t){e=e||Prototype.K;var n;return this.each(function(r,i){r=e.call(t,r,i,this),(null==n||r<n)&&(n=r)},this),n}function h(e,t){e=e||Prototype.K;var n=[],r=[];return this.each(function(i,o){(e.call(t,i,o,this)?n:r).push(i)},this),[n,r]}function m(e){var t=[];return this.each(function(n){t.push(n[e])}),t}function g(e,t){var n=[];return this.each(function(r,i){e.call(t,r,i,this)||n.push(r)},this),n}function v(e,t){return this.map(function(n,r){return{value:n,criteria:e.call(t,n,r,this)}},this).sort(function(e,t){var n=e.criteria,r=t.criteria;return n<r?-1:n>r?1:0}).pluck("value")}function y(){return this.map()}function b(){var e=Prototype.K,t=$A(arguments);Object.isFunction(t.last())&&(e=t.pop());var n=[this].concat(t).map($A);return this.map(function(t,r){return e(n.pluck(r))})}function E(){return this.toArray().length}function O(){return"#<Enumerable:"+this.toArray().inspect()+">"}return{each:e,eachSlice:t,all:n,every:n,any:r,some:r,collect:i,map:i,detect:o,findAll:s,select:s,filter:s,grep:a,include:u,member:u,inGroupsOf:c,inject:l,invoke:f,max:d,min:p,partition:h,pluck:m,reject:g,sortBy:v,toArray:y,entries:y,zip:b,size:E,inspect:O,find:o}}();Array.from=$A,function(){function e(e,t){for(var n=0,r=this.length>>>0;n<r;n++)n in this&&e.call(t,this[n],n,this)}function t(){return this.length=0,this}function n(){return this[0]}function r(){return this[this.length-1]}function i(){return this.select(function(e){return null!=e})}function o(){return this.inject([],function(e,t){return Object.isArray(t)?e.concat(t.flatten()):(e.push(t),e)})}function s(){var e=w.call(arguments,0);return this.select(function(t){return!e.include(t)})}function a(e){return(e===!1?this.toArray():this)._reverse()}function u(e){return this.inject([],function(t,n,r){return 0!=r&&(e?t.last()==n:t.include(n))||t.push(n),t})}function c(e){return this.uniq().findAll(function(t){return e.indexOf(t)!==-1})}function l(){return w.call(this,0)}function f(){return this.length}function d(){return"["+this.map(Object.inspect).join(", ")+"]"}function p(e,t){if(null==this)throw new TypeError;var n=Object(this),r=n.length>>>0;if(0===r)return-1;if(t=Number(t),isNaN(t)?t=0:0!==t&&isFinite(t)&&(t=(t>0?1:-1)*Math.floor(Math.abs(t))),t>r)return-1;for(var i=t>=0?t:Math.max(r-Math.abs(t),0);i<r;i++)if(i in n&&n[i]===e)return i;return-1}function h(e,t){if(null==this)throw new TypeError;var n=Object(this),r=n.length>>>0;if(0===r)return-1;Object.isUndefined(t)?t=r:(t=Number(t),isNaN(t)?t=0:0!==t&&isFinite(t)&&(t=(t>0?1:-1)*Math.floor(Math.abs(t))));for(var i=t>=0?Math.min(t,r-1):r-Math.abs(t);i>=0;i--)if(i in n&&n[i]===e)return i;return-1}function m(e){var t,n=[],r=w.call(arguments,0),i=0;r.unshift(this);for(var o=0,s=r.length;o<s;o++)if(t=r[o],!Object.isArray(t)||"callee"in t)n[i++]=t;else for(var a=0,u=t.length;a<u;a++)a in t&&(n[i]=t[a]),i++;return n.length=i,n}function g(e){return function(){if(0===arguments.length)return e.call(this,Prototype.K);if(void 0===arguments[0]){var t=w.call(arguments,1);return t.unshift(Prototype.K),e.apply(this,t)}return e.apply(this,arguments)}}function v(e){if(null==this)throw new TypeError;e=e||Prototype.K;for(var t=Object(this),n=[],r=arguments[1],i=0,o=0,s=t.length>>>0;o<s;o++)o in t&&(n[i]=e.call(r,t[o],o,t)),i++;return n.length=i,n}function y(e){if(null==this||!Object.isFunction(e))throw new TypeError;for(var t,n=Object(this),r=[],i=arguments[1],o=0,s=n.length>>>0;o<s;o++)o in n&&(t=n[o],e.call(i,t,o,n)&&r.push(t));return r}function b(e){if(null==this)throw new TypeError;e=e||Prototype.K;for(var t=arguments[1],n=Object(this),r=0,i=n.length>>>0;r<i;r++)if(r in n&&e.call(t,n[r],r,n))return!0;return!1}function E(e){if(null==this)throw new TypeError;e=e||Prototype.K;for(var t=arguments[1],n=Object(this),r=0,i=n.length>>>0;r<i;r++)if(r in n&&!e.call(t,n[r],r,n))return!1;return!0}function O(e,t){t=t||Prototype.K;var n=arguments[2];return T.call(this,t.bind(n),e)}var S=Array.prototype,w=S.slice,x=S.forEach;if(x||(x=e),S.map&&(v=g(Array.prototype.map)),S.filter&&(y=Array.prototype.filter),S.some)var b=g(Array.prototype.some);if(S.every)var E=g(Array.prototype.every);var T=S.reduce;if(!S.reduce)var O=Enumerable.inject;Object.extend(S,Enumerable),S._reverse||(S._reverse=S.reverse),Object.extend(S,{_each:x,map:v,collect:v,select:y,filter:y,findAll:y,some:b,any:b,every:E,all:E,inject:O,clear:t,first:n,last:r,compact:i,flatten:o,without:s,reverse:a,uniq:u,intersect:c,clone:l,toArray:l,size:f,inspect:d});var N=function(){return 1!==[].concat(arguments)[0][0]}(1,2);N&&(S.concat=m),S.indexOf||(S.indexOf=p),S.lastIndexOf||(S.lastIndexOf=h)}();var Hash=Class.create(Enumerable,function(){function e(e){this._object=Object.isHash(e)?e.toObject():Object.clone(e)}function t(e,t){var n=0;for(var r in this._object){var i=this._object[r],o=[r,i];o.key=r,o.value=i,e.call(t,o,n),n++}}function n(e,t){return this._object[e]=t}function r(e){if(this._object[e]!==Object.prototype[e])return this._object[e]}function i(e){var t=this._object[e];return delete this._object[e],t}function o(){return Object.clone(this._object)}function s(){return this.pluck("key")}function a(){return this.pluck("value")}function u(e){var t=this.detect(function(t){return t.value===e});return t&&t.key}function c(e){return this.clone().update(e)}function l(e){return new Hash(e).inject(this,function(e,t){return e.set(t.key,t.value),e})}function f(e,t){return Object.isUndefined(t)?e:(t=String.interpret(t),t=t.gsub(/(\r)?\n/,"\r\n"),t=encodeURIComponent(t),t=t.gsub(/%20/,"+"),e+"="+t)}function d(){return this.inject([],function(e,t){var n=encodeURIComponent(t.key),r=t.value;if(r&&"object"==typeof r){if(Object.isArray(r)){for(var i,o=[],s=0,a=r.length;s<a;s++)i=r[s],o.push(f(n,i));return e.concat(o)}}else e.push(f(n,r));return e}).join("&")}function p(){return"#<Hash:{"+this.map(function(e){return e.map(Object.inspect).join(": ")}).join(", ")+"}>"}function h(){return new Hash(this)}return{initialize:e,_each:t,set:n,get:r,unset:i,toObject:o,toTemplateReplacements:o,keys:s,values:a,index:u,merge:c,update:l,toQueryString:d,inspect:p,toJSON:o,clone:h}}());Hash.from=$H,Object.extend(Number.prototype,function(){function e(){return this.toPaddedString(2,16)}function t(){return this+1}function n(e,t){return $R(0,this,!0).each(e,t),this}function r(e,t){var n=this.toString(t||10);return"0".times(e-n.length)+n}function i(){return Math.abs(this)}function o(){return Math.round(this)}function s(){return Math.ceil(this)}function a(){return Math.floor(this)}return{toColorPart:e,succ:t,times:n,toPaddedString:r,abs:i,round:o,ceil:s,floor:a}}());var ObjectRange=Class.create(Enumerable,function(){function e(e,t,n){this.start=e,this.end=t,this.exclusive=n}function t(e,t){var n,r=this.start;for(n=0;this.include(r);n++)e.call(t,r,n),r=r.succ()}function n(e){return!(e<this.start)&&(this.exclusive?e<this.end:e<=this.end)}return{initialize:e,_each:t,include:n}}()),Abstract={},Try={these:function(){for(var e,t=0,n=arguments.length;t<n;t++){var r=arguments[t];try{e=r();break}catch(i){}}return e}},Ajax={getTransport:function(){return Try.these(function(){return new XMLHttpRequest},function(){return new ActiveXObject("Msxml2.XMLHTTP")},function(){return new ActiveXObject("Microsoft.XMLHTTP")})||!1},activeRequestCount:0};Ajax.Responders={responders:[],_each:function(e,t){this.responders._each(e,t)},register:function(e){this.include(e)||this.responders.push(e)},unregister:function(e){this.responders=this.responders.without(e)},dispatch:function(e,t,n,r){this.each(function(i){if(Object.isFunction(i[e]))try{i[e].apply(i,[t,n,r])}catch(o){}})}},Object.extend(Ajax.Responders,Enumerable),Ajax.Responders.register({onCreate:function(){Ajax.activeRequestCount++},onComplete:function(){Ajax.activeRequestCount--}}),Ajax.Base=Class.create({initialize:function(e){this.options={method:"post",asynchronous:!0,contentType:"application/x-www-form-urlencoded",encoding:"UTF-8",parameters:"",evalJSON:!0,evalJS:!0},Object.extend(this.options,e||{}),this.options.method=this.options.method.toLowerCase(),Object.isHash(this.options.parameters)&&(this.options.parameters=this.options.parameters.toObject())}}),Ajax.Request=Class.create(Ajax.Base,{_complete:!1,initialize:function(e,t,n){e(n),this.transport=Ajax.getTransport(),this.request(t)},request:function(e){this.url=e,this.method=this.options.method;var t=Object.isString(this.options.parameters)?this.options.parameters:Object.toQueryString(this.options.parameters);["get","post"].include(this.method)||(t+=(t?"&":"")+"_method="+this.method,this.method="post"),t&&"get"===this.method&&(this.url+=(this.url.include("?")?"&":"?")+t),this.parameters=t.toQueryParams();try{var n=new Ajax.Response(this);this.options.onCreate&&this.options.onCreate(n),Ajax.Responders.dispatch("onCreate",this,n),this.transport.open(this.method.toUpperCase(),this.url,this.options.asynchronous),this.options.asynchronous&&this.respondToReadyState.bind(this).defer(1),this.transport.onreadystatechange=this.onStateChange.bind(this),this.setRequestHeaders(),this.body="post"==this.method?this.options.postBody||t:null,this.transport.send(this.body),!this.options.asynchronous&&this.transport.overrideMimeType&&this.onStateChange()}catch(r){this.dispatchException(r)}},onStateChange:function(){var e=this.transport.readyState;e>1&&(4!=e||!this._complete)&&this.respondToReadyState(this.transport.readyState)},setRequestHeaders:function(){var e={"X-Requested-With":"XMLHttpRequest","X-Prototype-Version":Prototype.Version,Accept:"text/javascript, text/html, application/xml, text/xml, */*"};if("post"==this.method&&(e["Content-type"]=this.options.contentType+(this.options.encoding?"; charset="+this.options.encoding:""),this.transport.overrideMimeType&&(navigator.userAgent.match(/Gecko\/(\d{4})/)||[0,2005])[1]<2005&&(e.Connection="close")),"object"==typeof this.options.requestHeaders){var t=this.options.requestHeaders;if(Object.isFunction(t.push))for(var n=0,r=t.length;n<r;n+=2)e[t[n]]=t[n+1];else $H(t).each(function(t){e[t.key]=t.value})}for(var i in e)null!=e[i]&&this.transport.setRequestHeader(i,e[i])},success:function(){var e=this.getStatus();return!e||e>=200&&e<300||304==e},getStatus:function(){try{return 1223===this.transport.status?204:this.transport.status||0}catch(e){return 0}},respondToReadyState:function(e){var t=Ajax.Request.Events[e],n=new Ajax.Response(this);if("Complete"==t){try{this._complete=!0,(this.options["on"+n.status]||this.options["on"+(this.success()?"Success":"Failure")]||Prototype.emptyFunction)(n,n.headerJSON)}catch(r){this.dispatchException(r)}var i=n.getHeader("Content-type");("force"==this.options.evalJS||this.options.evalJS&&this.isSameOrigin()&&i&&i.match(/^\s*(text|application)\/(x-)?(java|ecma)script(;.*)?\s*$/i))&&this.evalResponse()}try{(this.options["on"+t]||Prototype.emptyFunction)(n,n.headerJSON),Ajax.Responders.dispatch("on"+t,this,n,n.headerJSON)}catch(r){this.dispatchException(r)}"Complete"==t&&(this.transport.onreadystatechange=Prototype.emptyFunction)},isSameOrigin:function(){var e=this.url.match(/^\s*https?:\/\/[^\/]*/);return!e||e[0]=="#{protocol}//#{domain}#{port}".interpolate({protocol:location.protocol,domain:document.domain,port:location.port?":"+location.port:""})},getHeader:function(e){try{return this.transport.getResponseHeader(e)||null}catch(t){return null}},evalResponse:function(){try{return eval((this.transport.responseText||"").unfilterJSON())}catch(e){this.dispatchException(e)}},dispatchException:function(e){(this.options.onException||Prototype.emptyFunction)(this,e),Ajax.Responders.dispatch("onException",this,e)}}),Ajax.Request.Events=["Uninitialized","Loading","Loaded","Interactive","Complete"],Ajax.Response=Class.create({initialize:function(e){this.request=e;var t=this.transport=e.transport,n=this.readyState=t.readyState;if((n>2&&!Prototype.Browser.IE||4==n)&&(this.status=this.getStatus(),this.statusText=this.getStatusText(),this.responseText=String.interpret(t.responseText),this.headerJSON=this._getHeaderJSON()),4==n){var r=t.responseXML;this.responseXML=Object.isUndefined(r)?null:r,this.responseJSON=this._getResponseJSON()}},status:0,statusText:"",getStatus:Ajax.Request.prototype.getStatus,getStatusText:function(){try{return this.transport.statusText||""}catch(e){return""}},getHeader:Ajax.Request.prototype.getHeader,getAllHeaders:function(){try{return this.getAllResponseHeaders()}catch(e){return null}},getResponseHeader:function(e){return this.transport.getResponseHeader(e)},getAllResponseHeaders:function(){return this.transport.getAllResponseHeaders()},_getHeaderJSON:function(){var e=this.getHeader("X-JSON");if(!e)return null;try{e=decodeURIComponent(escape(e))}catch(t){}try{return e.evalJSON(this.request.options.sanitizeJSON||!this.request.isSameOrigin())}catch(t){this.request.dispatchException(t)}},_getResponseJSON:function(){var e=this.request.options;if(!e.evalJSON||"force"!=e.evalJSON&&!(this.getHeader("Content-type")||"").include("application/json")||this.responseText.blank())return null;try{return this.responseText.evalJSON(e.sanitizeJSON||!this.request.isSameOrigin())}catch(t){this.request.dispatchException(t)}}}),Ajax.Updater=Class.create(Ajax.Request,{initialize:function(e,t,n,r){this.container={success:t.success||t,failure:t.failure||(t.success?null:t)},r=Object.clone(r);var i=r.onComplete;r.onComplete=function(e,t){this.updateContent(e.responseText),Object.isFunction(i)&&i(e,t)}.bind(this),e(n,r)},updateContent:function(e){var t=this.container[this.success()?"success":"failure"],n=this.options;if(n.evalScripts||(e=e.stripScripts()),t=$(t))if(n.insertion)if(Object.isString(n.insertion)){var r={};r[n.insertion]=e,t.insert(r)}else n.insertion(t,e);else t.update(e)}}),Ajax.PeriodicalUpdater=Class.create(Ajax.Base,{initialize:function(e,t,n,r){e(r),this.onComplete=this.options.onComplete,this.frequency=this.options.frequency||2,this.decay=this.options.decay||1,this.updater={},this.container=t,this.url=n,this.start()},start:function(){this.options.onComplete=this.updateComplete.bind(this),this.onTimerEvent()},stop:function(){this.updater.options.onComplete=void 0,clearTimeout(this.timer),(this.onComplete||Prototype.emptyFunction).apply(this,arguments)},updateComplete:function(e){this.options.decay&&(this.decay=e.responseText==this.lastText?this.decay*this.options.decay:1,this.lastText=e.responseText),this.timer=this.onTimerEvent.bind(this).delay(this.decay*this.frequency)},onTimerEvent:function(){this.updater=new Ajax.Updater(this.container,this.url,this.options)}}),function(e){function t(e){if(arguments.length>1){for(var n=0,i=[],o=arguments.length;n<o;n++)i.push(t(arguments[n]));return i}return Object.isString(e)&&(e=document.getElementById(e)),r.extend(e)}function n(e,t){return"select"!==e&&!("type"in t)}function r(e,t){if(t=t||{},e=e.toLowerCase(),De&&t.name)return e="<"+e+' name="'+t.name+'">',delete t.name,r.writeAttribute(document.createElement(e),t);Fe[e]||(Fe[e]=r.extend(document.createElement(e)));var i=n(e,t)?Fe[e].cloneNode(!1):document.createElement(e);return r.writeAttribute(i,t)}function i(e){e=t(e);var n,r,i="<"+e.tagName.toLowerCase();for(var o in Be)n=Be[o],r=(e[o]||"").toString(),r&&(i+=" "+n+"="+r.inspect(!0));return i+">"}function o(e){return"none"!==t(e).style.display}function s(e,n){return e=t(e),Object.isUndefined(n)&&(n=!r.visible(e)),r[n?"show":"hide"](e),e}function a(e){return e=t(e),e.style.display="none",e}function u(e){return e=t(e),e.style.display="",e}function c(e){return e=t(e),e.parentNode.removeChild(e),e}function l(e,n){e=t(e);for(var r=e.getElementsByTagName("*"),i=r.length;i--;)O(r[i]);if(n&&n.toElement&&(n=n.toElement()),Object.isElement(n))return e.update().insert(n);n=Object.toHTML(n);var o=e.tagName.toUpperCase();if("SCRIPT"===o&&Ke)return e.text=n,e;if(Je)if(o in We.tags){for(;e.firstChild;)e.removeChild(e.firstChild);for(var s,a=b(o,n.stripScripts()),i=0;s=a[i];i++)e.appendChild(s)}else if(qe&&Object.isString(n)&&n.indexOf("<link")>-1){for(;e.firstChild;)e.removeChild(e.firstChild);for(var s,a=b(o,n.stripScripts(),!0),i=0;s=a[i];i++)e.appendChild(s)}else e.innerHTML=n.stripScripts();else e.innerHTML=n.stripScripts();return n.evalScripts.bind(n).defer(),e}function f(e,n){if(e=t(e),n&&n.toElement)n=n.toElement();else if(!Object.isElement(n)){n=Object.toHTML(n);var r=e.ownerDocument.createRange();r.selectNode(e),n.evalScripts.bind(n).defer(),n=r.createContextualFragment(n.stripScripts())}return e.parentNode.replaceChild(n,e),e}function d(e,n){if(e=t(e),n&&n.toElement&&(n=n.toElement()),Object.isElement(n))return e.parentNode.replaceChild(n,e),e;n=Object.toHTML(n);var i=e.parentNode,o=i.tagName.toUpperCase();if(o in We.tags){var s=r.next(e),a=b(o,n.stripScripts());i.removeChild(e);var u;u=s?function(e){i.insertBefore(e,s)}:function(e){i.appendChild(e)},a.each(u)}else e.outerHTML=n.stripScripts();return n.evalScripts.bind(n).defer(),e}function p(e){return!Object.isUndefined(e)&&null!==e&&(!(!Object.isString(e)&&!Object.isNumber(e))||(!!Object.isElement(e)||!(!e.toElement&&!e.toHTML)))}function h(e,t,n){n=n.toLowerCase();var r=We[n];if(t&&t.toElement&&(t=t.toElement()),Object.isElement(t))return r(e,t),
e;t=Object.toHTML(t);var i=("before"===n||"after"===n?e.parentNode:e).tagName.toUpperCase(),o=b(i,t.stripScripts());"top"!==n&&"after"!==n||o.reverse();for(var s,a=0;s=o[a];a++)r(e,s);t.evalScripts.bind(t).defer()}function m(e,n){e=t(e),p(n)&&(n={bottom:n});for(var r in n)h(e,n[r],r);return e}function g(e,n,i){return e=t(e),Object.isElement(n)?t(n).writeAttribute(i||{}):n=Object.isString(n)?new r(n,i):new r("div",n),e.parentNode&&e.parentNode.replaceChild(n,e),n.appendChild(e),n}function v(e){e=t(e);for(var n=e.firstChild;n;){var r=n.nextSibling;n.nodeType!==Node.TEXT_NODE||/\S/.test(n.nodeValue)||e.removeChild(n),n=r}return e}function y(e){return t(e).innerHTML.blank()}function b(e,t,n){var r=We.tags[e],i=He,o=!!r;if(!o&&n&&(o=!0,r=["","",0]),o){i.innerHTML="&#160;"+r[0]+t+r[1],i.removeChild(i.firstChild);for(var s=r[2];s--;)i=i.firstChild}else i.innerHTML=t;return $A(i.childNodes)}function E(e,n){if(e=t(e)){var i=e.cloneNode(n);if(!lt&&(i._prototypeUID=Re,n))for(var o=r.select(i,"*"),s=o.length;s--;)o[s]._prototypeUID=Re;return r.extend(i)}}function O(e){var t=ye(e);t&&(r.stopObserving(e),lt||(e._prototypeUID=Re),delete r.Storage[t])}function S(e){for(var t=e.length;t--;)O(e[t])}function w(e){for(var t,n,i=e.length;i--;)t=e[i],n=ye(t),delete r.Storage[n],delete Event.cache[n]}function x(e){if(e=t(e)){O(e);for(var n=e.getElementsByTagName("*"),r=n.length;r--;)O(n[r]);return null}}function T(e,n,i){e=t(e),i=i||-1;for(var o=[];(e=e[n])&&(e.nodeType===Node.ELEMENT_NODE&&o.push(r.extend(e)),o.length!==i););return o}function N(e){return T(e,"parentNode")}function C(e){return r.select(e,"*")}function j(e){for(e=t(e).firstChild;e&&e.nodeType!==Node.ELEMENT_NODE;)e=e.nextSibling;return t(e)}function A(e){for(var n=[],i=t(e).firstChild;i;)i.nodeType===Node.ELEMENT_NODE&&n.push(r.extend(i)),i=i.nextSibling;return n}function _(e){return T(e,"previousSibling")}function P(e){return T(e,"nextSibling")}function L(e){e=t(e);var n=_(e),r=P(e);return n.reverse().concat(r)}function M(e,n){return e=t(e),Object.isString(n)?Prototype.Selector.match(e,n):n.match(e)}function R(e,n,i,o){for(e=t(e),i=i||0,o=o||0,Object.isNumber(i)&&(o=i,i=null);e=e[n];)if(1===e.nodeType&&(!i||Prototype.Selector.match(e,i))&&!(--o>=0))return r.extend(e)}function $(e,n,r){return e=t(e),1===arguments.length?t(e.parentNode):R(e,"parentNode",n,r)}function H(e,n,i){if(1===arguments.length)return j(e);e=t(e),n=n||0,i=i||0,Object.isNumber(n)&&(i=n,n="*");var o=Prototype.Selector.select(n,e)[i];return r.extend(o)}function F(e,t,n){return R(e,"previousSibling",t,n)}function D(e,t,n){return R(e,"nextSibling",t,n)}function k(e){e=t(e);var n=$e.call(arguments,1).join(", ");return Prototype.Selector.select(n,e)}function I(e){e=t(e);for(var n,i=$e.call(arguments,1).join(", "),o=r.siblings(e),s=[],a=0;n=o[a];a++)Prototype.Selector.match(n,i)&&s.push(n);return s}function B(e,n){for(e=t(e),n=t(n);e=e.parentNode;)if(e===n)return!0;return!1}function U(e,n){return e=t(e),n=t(n),n.contains?n.contains(e)&&n!==e:B(e,n)}function z(e,n){return e=t(e),n=t(n),8===(8&e.compareDocumentPosition(n))}function q(e){e=t(e);var n=r.readAttribute(e,"id");if(n)return n;do n="anonymous_element_"+Xe++;while(t(n));return r.writeAttribute(e,"id",n),n}function J(e,n){return t(e).getAttribute(n)}function K(e,n){e=t(e);var r=et.read;return r.values[n]?r.values[n](e,n):(r.names[n]&&(n=r.names[n]),n.include(":")?e.attributes&&e.attributes[n]?e.attributes[n].value:null:e.getAttribute(n))}function W(e,t){return"title"===t?e.title:e.getAttribute(t)}function V(e,n,r){e=t(e);var i={},o=et.write;"object"==typeof n?i=n:i[n]=!!Object.isUndefined(r)||r;for(var s in i)n=o.names[s]||s,r=i[s],o.values[s]&&(n=o.values[s](e,r)||n),r===!1||null===r?e.removeAttribute(n):r===!0?e.setAttribute(n,n):e.setAttribute(n,r);return e}function Y(e,n){n=et.has[n]||n;var r=t(e).getAttributeNode(n);return!(!r||!r.specified)}function X(e,t){return"checked"===t?e.checked:Y(e,t)}function G(e){return new r.ClassNames(e)}function Q(e){if(Ze[e])return Ze[e];var t=new RegExp("(^|\\s+)"+e+"(\\s+|$)");return Ze[e]=t,t}function Z(e,n){if(e=t(e)){var r=e.className;return 0!==r.length&&(r===n||Q(n).test(r))}}function ee(e,n){if(e=t(e))return Z(e,n)||(e.className+=(e.className?" ":"")+n),e}function te(e,n){if(e=t(e))return e.className=e.className.replace(Q(n)," ").strip(),e}function ne(e,n,i){if(e=t(e)){Object.isUndefined(i)&&(i=!Z(e,n));var o=r[i?"addClassName":"removeClassName"];return o(e,n)}}function re(e,t){return e.getAttribute(t)}function ie(e,t){return e.getAttribute(t,2)}function oe(e,t){var n=e.getAttributeNode(t);return n?n.value:""}function se(e,n){return t(e).hasAttribute(n)?n:null}function ae(e){return"float"===e||"styleFloat"===e?"cssFloat":e.camelize()}function ue(e){return"float"===e||"cssFloat"===e?"styleFloat":e.camelize()}function ce(e,n){e=t(e);var i=e.style;if(Object.isString(n)){if(i.cssText+=";"+n,n.include("opacity")){var o=n.match(/opacity:\s*(\d?\.?\d*)/)[1];r.setOpacity(e,o)}return e}for(var s in n)if("opacity"===s)r.setOpacity(e,n[s]);else{var a=n[s];"float"!==s&&"cssFloat"!==s||(s=Object.isUndefined(i.styleFloat)?"cssFloat":"styleFloat"),i[s]=a}return e}function le(e,n){e=t(e),n=ae(n);var r=e.style[n];if(!r||"auto"===r){var i=document.defaultView.getComputedStyle(e,null);r=i?i[n]:null}return"opacity"===n?r?parseFloat(r):1:"auto"===r?null:r}function fe(e,n){e=t(e),n=ue(n);var i=e.style[n];return!i&&e.currentStyle&&(i=e.currentStyle[n]),"opacity"!==n||ct?"auto"===i?"width"!==n&&"height"!==n||!r.visible(e)?null:r.measure(e,n)+"px":i:ve(e)}function de(e){return(e||"").replace(/alpha\([^\)]*\)/gi,"")}function pe(e){return e.currentStyle&&e.currentStyle.hasLayout||(e.style.zoom=1),e}function he(e,n){return e=t(e),1==n||""===n?n="":n<1e-5&&(n=0),e.style.opacity=n,e}function me(e,n){if(ct)return he(e,n);e=pe(t(e));var i=r.getStyle(e,"filter"),o=e.style;return 1==n||""===n?(i=de(i),i?o.filter=i:o.removeAttribute("filter"),e):(n<1e-5&&(n=0),o.filter=de(i)+"alpha(opacity="+100*n+")",e)}function ge(e){return r.getStyle(e,"opacity")}function ve(e){if(ct)return ge(e);var t=r.getStyle(e,"filter");if(0===t.length)return 1;var n=(t||"").match(/alpha\(opacity=(.*)\)/);return n&&n[1]?parseFloat(n[1])/100:1}function ye(e){return e===window?0:("undefined"==typeof e._prototypeUID&&(e._prototypeUID=r.Storage.UID++),e._prototypeUID)}function be(e){return e===window?0:e==document?1:e.uniqueID}function Ee(e){if(e=t(e)){var n=ye(e);return r.Storage[n]||(r.Storage[n]=$H()),r.Storage[n]}}function Oe(e,n,r){if(e=t(e)){var i=Ee(e);return 2===arguments.length?i.update(n):i.set(n,r),e}}function Se(e,n,r){if(e=t(e)){var i=Ee(e),o=i.get(n);return Object.isUndefined(o)&&(i.set(n,r),o=r),o}}function we(e){if("undefined"==typeof window.Element)return!1;if(!De)return!1;var t=window.Element.prototype;if(t){var n="_"+(Math.random()+"").slice(2),r=document.createElement(e);t[n]="x";var i="x"!==r[n];return delete t[n],r=null,i}return!1}function xe(e,t){for(var n in t){var r=t[n];!Object.isFunction(r)||n in e||(e[n]=r.methodize())}}function Te(e){var t=ye(e);return t in mt}function Ne(e){if(!e||Te(e))return e;if(e.nodeType!==Node.ELEMENT_NODE||e==window)return e;var t=Object.clone(ft),n=e.tagName.toUpperCase();return dt[n]&&Object.extend(t,dt[n]),xe(e,t),mt[ye(e)]=!0,e}function Ce(e){if(!e||Te(e))return e;var t=e.tagName;return t&&/^(?:object|applet|embed)$/i.test(t)&&(xe(e,r.Methods),xe(e,r.Methods.Simulated),xe(e,r.Methods.ByTag[t.toUpperCase()])),e}function je(e,t){e=e.toUpperCase(),dt[e]||(dt[e]={}),Object.extend(dt[e],t)}function Ae(e,t,n){Object.isUndefined(n)&&(n=!1);for(var r in t){var i=t[r];Object.isFunction(i)&&(n&&r in e||(e[r]=i.methodize()))}}function _e(e){var t,n={OPTGROUP:"OptGroup",TEXTAREA:"TextArea",P:"Paragraph",FIELDSET:"FieldSet",UL:"UList",OL:"OList",DL:"DList",DIR:"Directory",H1:"Heading",H2:"Heading",H3:"Heading",H4:"Heading",H5:"Heading",H6:"Heading",Q:"Quote",INS:"Mod",DEL:"Mod",A:"Anchor",IMG:"Image",CAPTION:"TableCaption",COL:"TableCol",COLGROUP:"TableCol",THEAD:"TableSection",TFOOT:"TableSection",TBODY:"TableSection",TR:"TableRow",TH:"TableCell",TD:"TableCell",FRAMESET:"FrameSet",IFRAME:"IFrame"};if(n[e]&&(t="HTML"+n[e]+"Element"),window[t])return window[t];if(t="HTML"+e+"Element",window[t])return window[t];if(t="HTML"+e.capitalize()+"Element",window[t])return window[t];var r=document.createElement(e),i=r.__proto__||r.constructor.prototype;return r=null,i}function Pe(e){if(0===arguments.length&&Le(),2===arguments.length){var t=e;e=arguments[1]}if(t)if(Object.isArray(t))for(var n,i=0;n=t[i];i++)je(n,e);else je(t,e);else Object.extend(r.Methods,e||{});var o=window.HTMLElement?HTMLElement.prototype:r.prototype;if(pt.ElementExtensions&&(Ae(o,r.Methods),Ae(o,r.Methods.Simulated,!0)),pt.SpecificElementExtensions)for(var n in r.Methods.ByTag){var s=_e(n);Object.isUndefined(s)||Ae(s.prototype,dt[n])}Object.extend(r,r.Methods),Object.extend(r,r.Methods.Simulated),delete r.ByTag,delete r.Simulated,r.extend.refresh(),Fe={}}function Le(){Object.extend(Form,Form.Methods),Object.extend(Form.Element,Form.Element.Methods),Object.extend(r.Methods.ByTag,{FORM:Object.clone(Form.Methods),INPUT:Object.clone(Form.Element.Methods),SELECT:Object.clone(Form.Element.Methods),TEXTAREA:Object.clone(Form.Element.Methods),BUTTON:Object.clone(Form.Element.Methods)})}function Me(){He=null,Fe=null}var Re,$e=Array.prototype.slice,He=document.createElement("div");e.$=t,e.Node||(e.Node={}),e.Node.ELEMENT_NODE||Object.extend(e.Node,{ELEMENT_NODE:1,ATTRIBUTE_NODE:2,TEXT_NODE:3,CDATA_SECTION_NODE:4,ENTITY_REFERENCE_NODE:5,ENTITY_NODE:6,PROCESSING_INSTRUCTION_NODE:7,COMMENT_NODE:8,DOCUMENT_NODE:9,DOCUMENT_TYPE_NODE:10,DOCUMENT_FRAGMENT_NODE:11,NOTATION_NODE:12});var Fe={},De=function(){try{var e=document.createElement('<input name="x">');return"input"===e.tagName.toLowerCase()&&"x"===e.name}catch(t){return!1}}(),ke=e.Element;e.Element=r,Object.extend(e.Element,ke||{}),ke&&(e.Element.prototype=ke.prototype),r.Methods={ByTag:{},Simulated:{}};var Ie={},Be={id:"id",className:"class"};Ie.inspect=i,Object.extend(Ie,{visible:o,toggle:s,hide:a,show:u});var Ue=function(){var e=document.createElement("select"),t=!0;return e.innerHTML='<option value="test">test</option>',e.options&&e.options[0]&&(t="OPTION"!==e.options[0].nodeName.toUpperCase()),e=null,t}(),ze=function(){try{var e=document.createElement("table");if(e&&e.tBodies){e.innerHTML="<tbody><tr><td>test</td></tr></tbody>";var t="undefined"==typeof e.tBodies[0];return e=null,t}}catch(n){return!0}}(),qe=function(){try{var e=document.createElement("div");e.innerHTML="<link />";var t=0===e.childNodes.length;return e=null,t}catch(n){return!0}}(),Je=Ue||ze||qe,Ke=function(){var e=document.createElement("script"),t=!1;try{e.appendChild(document.createTextNode("")),t=!e.firstChild||e.firstChild&&3!==e.firstChild.nodeType}catch(n){t=!0}return e=null,t}(),We={before:function(e,t){e.parentNode.insertBefore(t,e)},top:function(e,t){e.insertBefore(t,e.firstChild)},bottom:function(e,t){e.appendChild(t)},after:function(e,t){e.parentNode.insertBefore(t,e.nextSibling)},tags:{TABLE:["<table>","</table>",1],TBODY:["<table><tbody>","</tbody></table>",2],TR:["<table><tbody><tr>","</tr></tbody></table>",3],TD:["<table><tbody><tr><td>","</td></tr></tbody></table>",4],SELECT:["<select>","</select>",1]}},Ve=We.tags;Object.extend(Ve,{THEAD:Ve.TBODY,TFOOT:Ve.TBODY,TH:Ve.TD}),"outerHTML"in document.documentElement&&(f=d),lt&&(S=w),Object.extend(Ie,{remove:c,update:l,replace:f,insert:m,wrap:g,cleanWhitespace:v,empty:y,clone:E,purge:x});var Ye;Ye=He.compareDocumentPosition?z:He.contains?U:B,Object.extend(Ie,{recursivelyCollect:T,ancestors:N,descendants:C,firstDescendant:j,immediateDescendants:A,previousSiblings:_,nextSiblings:P,siblings:L,match:M,up:$,down:H,previous:F,next:D,select:k,adjacent:I,descendantOf:Ye,getElementsBySelector:k,childElements:A});var Xe=1,Ge=function(){He.setAttribute("onclick",[]);var e=He.getAttribute("onclick"),t=Object.isArray(e);return He.removeAttribute("onclick"),t}();Ge?J=K:Prototype.Browser.Opera&&(J=W);var Qe=function(){if(!De)return!1;var e=document.createElement('<input type="checkbox">');e.checked=!0;var t=e.getAttributeNode("checked");return!t||!t.specified}();e.Element.Methods.Simulated.hasAttribute=Qe?X:Y;var Ze={},et={},tt="className",nt="for";He.setAttribute(tt,"x"),"x"!==He.className&&(He.setAttribute("class","x"),"x"===He.className&&(tt="class"));var rt=document.createElement("label");rt.setAttribute(nt,"x"),"x"!==rt.htmlFor&&(rt.setAttribute("htmlFor","x"),"x"===rt.htmlFor&&(nt="htmlFor")),rt=null,He.onclick=Prototype.emptyFunction;var it,ot=He.getAttribute("onclick");String(ot).indexOf("{")>-1?it=function(e,t){var n=e.getAttribute(t);return n?(n=n.toString(),n=n.split("{")[1],n=n.split("}")[0],n.strip()):null}:""===ot&&(it=function(e,t){var n=e.getAttribute(t);return n?n.strip():null}),et.read={names:{"class":tt,className:tt,"for":nt,htmlFor:nt},values:{style:function(e){return e.style.cssText.toLowerCase()},title:function(e){return e.title}}},et.write={names:{className:"class",htmlFor:"for",cellpadding:"cellPadding",cellspacing:"cellSpacing"},values:{checked:function(e,t){e.checked=!!t},style:function(e,t){e.style.cssText=t?t:""}}},et.has={names:{}},Object.extend(et.write.names,et.read.names);for(var st,at=$w("colSpan rowSpan vAlign dateTime accessKey tabIndex encType maxLength readOnly longDesc frameBorder"),ut=0;st=at[ut];ut++)et.write.names[st.toLowerCase()]=st,et.has.names[st.toLowerCase()]=st;Object.extend(et.read.values,{href:ie,src:ie,type:re,action:oe,disabled:se,checked:se,readonly:se,multiple:se,onload:it,onunload:it,onclick:it,ondblclick:it,onmousedown:it,onmouseup:it,onmouseover:it,onmousemove:it,onmouseout:it,onfocus:it,onblur:it,onkeypress:it,onkeydown:it,onkeyup:it,onsubmit:it,onreset:it,onselect:it,onchange:it}),Object.extend(Ie,{identify:q,readAttribute:J,writeAttribute:V,classNames:G,hasClassName:Z,addClassName:ee,removeClassName:te,toggleClassName:ne});var ct=function(){return He.style.cssText="opacity:.55",/^0.55/.test(He.style.opacity)}();Object.extend(Ie,{setStyle:ce,getStyle:le,setOpacity:he,getOpacity:ge}),"styleFloat"in He.style&&(Ie.getStyle=fe,Ie.setOpacity=me,Ie.getOpacity=ve);e.Element.Storage={UID:1};var lt="uniqueID"in He;lt&&(ye=be),Object.extend(Ie,{getStorage:Ee,store:Oe,retrieve:Se});var ft={},dt=r.Methods.ByTag,pt=Prototype.BrowserFeatures;!pt.ElementExtensions&&"__proto__"in He&&(e.HTMLElement={},e.HTMLElement.prototype=He.__proto__,pt.ElementExtensions=!0);var ht=we("object"),mt={};pt.SpecificElementExtensions&&(Ne=ht?Ce:Prototype.K),Object.extend(e.Element,{extend:Ne,addMethods:Pe}),Ne===Prototype.K?e.Element.extend.refresh=Prototype.emptyFunction:e.Element.extend.refresh=function(){Prototype.BrowserFeatures.ElementExtensions||(Object.extend(ft,r.Methods),Object.extend(ft,r.Methods.Simulated),mt={})},r.addMethods(Ie),window.attachEvent&&window.attachEvent("onunload",Me)}(this),function(){function e(e){var t=e.match(/^(\d+)%?$/i);return t?Number(t[1])/100:null}function t(e,t){e=$(e);var n=e.style[t];if(!n||"auto"===n){var r=document.defaultView.getComputedStyle(e,null);n=r?r[t]:null}return"opacity"===t?n?parseFloat(n):1:"auto"===n?null:n}function n(e,t){var n=e.style[t];return!n&&e.currentStyle&&(n=e.currentStyle[t]),n}function r(e,t){var n=e.offsetWidth,r=i(e,"borderLeftWidth",t)||0,o=i(e,"borderRightWidth",t)||0,s=i(e,"paddingLeft",t)||0,a=i(e,"paddingRight",t)||0;return n-r-o-s-a}function i(n,r,i){var o=null;if(Object.isElement(n)&&(o=n,n=t(o,r)),null===n||Object.isUndefined(n))return null;if(/^(?:-)?\d+(\.\d+)?(px)?$/i.test(n))return window.parseFloat(n);var s=n.include("%"),a=i===document.viewport;if(/\d/.test(n)&&o&&o.runtimeStyle&&(!s||!a)){var u=o.style.left,c=o.runtimeStyle.left;return o.runtimeStyle.left=o.currentStyle.left,o.style.left=n||0,n=o.style.pixelLeft,o.style.left=u,o.runtimeStyle.left=c,n}if(o&&s){i=i||o.parentNode;var l=e(n),f=null,d=r.include("left")||r.include("right")||r.include("width"),p=r.include("top")||r.include("bottom")||r.include("height");return i===document.viewport?d?f=document.viewport.getWidth():p&&(f=document.viewport.getHeight()):d?f=$(i).measure("width"):p&&(f=$(i).measure("height")),null===f?0:f*l}return 0}function o(e){for(;e&&e.parentNode;){var t=e.getStyle("display");if("none"===t)return!1;e=$(e.parentNode)}return!0}function s(e){return e.include("border")&&(e+="-width"),e.camelize()}function a(e,t){return new Element.Layout(e,t)}function u(e,t){return $(e).getLayout().get(t)}function c(e){return Element.getDimensions(e).height}function l(e){return Element.getDimensions(e).width}function f(e){e=$(e);var t=Element.getStyle(e,"display");if(t&&"none"!==t)return{width:e.offsetWidth,height:e.offsetHeight};var n=e.style,r={visibility:n.visibility,position:n.position,display:n.display},i={visibility:"hidden",display:"block"};"fixed"!==r.position&&(i.position="absolute"),Element.setStyle(e,i);var o={width:e.offsetWidth,height:e.offsetHeight};return Element.setStyle(e,r),o}function d(e){if(e=$(e),C(e)||j(e)||T(e)||N(e))return $(document.body);var t="inline"===Element.getStyle(e,"display");if(!t&&e.offsetParent)return $(e.offsetParent);for(;(e=e.parentNode)&&e!==document.body;)if("static"!==Element.getStyle(e,"position"))return N(e)?$(document.body):$(e);return $(document.body)}function p(e){e=$(e);var t=0,n=0;if(e.parentNode)do t+=e.offsetTop||0,n+=e.offsetLeft||0,e=e.offsetParent;while(e);return new Element.Offset(n,t)}function h(e){e=$(e);var t=e.getLayout(),n=0,r=0;do if(n+=e.offsetTop||0,r+=e.offsetLeft||0,e=e.offsetParent){if(T(e))break;var i=Element.getStyle(e,"position");if("static"!==i)break}while(e);return r-=t.get("margin-top"),n-=t.get("margin-left"),new Element.Offset(r,n)}function m(e){var t=0,n=0;do{if(e===document.body){var r=document.documentElement||document.body.parentNode||document.body;t+=Object.isUndefined(window.pageYOffset)?r.scrollTop||0:window.pageYOffset,n+=Object.isUndefined(window.pageXOffset)?r.scrollLeft||0:window.pageXOffset;break}t+=e.scrollTop||0,n+=e.scrollLeft||0,e=e.parentNode}while(e);return new Element.Offset(n,t)}function g(e){var t=0,n=0,r=document.body;e=$(e);var i=e;do if(t+=i.offsetTop||0,n+=i.offsetLeft||0,i.offsetParent==r&&"absolute"==Element.getStyle(i,"position"))break;while(i=i.offsetParent);i=e;do i!=r&&(t-=i.scrollTop||0,n-=i.scrollLeft||0);while(i=i.parentNode);return new Element.Offset(n,t)}function v(e){if(e=$(e),"absolute"===Element.getStyle(e,"position"))return e;var t=d(e),n=e.viewportOffset(),r=t.viewportOffset(),i=n.relativeTo(r),o=e.getLayout();return e.store("prototype_absolutize_original_styles",{position:e.getStyle("position"),left:e.getStyle("left"),top:e.getStyle("top"),width:e.getStyle("width"),height:e.getStyle("height")}),e.setStyle({position:"absolute",top:i.top+"px",left:i.left+"px",width:o.get("width")+"px",height:o.get("height")+"px"}),e}function y(e){if(e=$(e),"relative"===Element.getStyle(e,"position"))return e;var t=e.retrieve("prototype_absolutize_original_styles");return t&&e.setStyle(t),e}function b(e){e=$(e);var t=Element.cumulativeOffset(e);return window.scrollTo(t.left,t.top),e}function E(e){e=$(e);var t=Element.getStyle(e,"position"),n={};return"static"!==t&&t||(n.position="relative",Prototype.Browser.Opera&&(n.top=0,n.left=0),Element.setStyle(e,n),Element.store(e,"prototype_made_positioned",!0)),e}function O(e){e=$(e);var t=Element.getStorage(e),n=t.get("prototype_made_positioned");return n&&(t.unset("prototype_made_positioned"),Element.setStyle(e,{position:"",top:"",bottom:"",left:"",right:""})),e}function S(e){e=$(e);var t=Element.getStorage(e),n=t.get("prototype_made_clipping");if(Object.isUndefined(n)){var r=Element.getStyle(e,"overflow");t.set("prototype_made_clipping",r),"hidden"!==r&&(e.style.overflow="hidden")}return e}function w(e){e=$(e);var t=Element.getStorage(e),n=t.get("prototype_made_clipping");return Object.isUndefined(n)||(t.unset("prototype_made_clipping"),e.style.overflow=n||""),e}function x(e,t,n){n=Object.extend({setLeft:!0,setTop:!0,setWidth:!0,setHeight:!0,offsetTop:0,offsetLeft:0},n||{}),t=$(t),e=$(e);var r,i,o,s={};if((n.setLeft||n.setTop)&&(r=Element.viewportOffset(t),i=[0,0],"absolute"===Element.getStyle(e,"position"))){var a=Element.getOffsetParent(e);a!==document.body&&(i=Element.viewportOffset(a))}return(n.setWidth||n.setHeight)&&(o=Element.getLayout(t)),n.setLeft&&(s.left=r[0]-i[0]+n.offsetLeft+"px"),n.setTop&&(s.top=r[1]-i[1]+n.offsetTop+"px"),n.setWidth&&(s.width=o.get("border-box-width")+"px"),n.setHeight&&(s.height=o.get("border-box-height")+"px"),Element.setStyle(e,s)}function T(e){return"BODY"===e.nodeName.toUpperCase()}function N(e){return"HTML"===e.nodeName.toUpperCase()}function C(e){return e.nodeType===Node.DOCUMENT_NODE}function j(e){return e!==document.body&&!Element.descendantOf(e,document.body)}"currentStyle"in document.documentElement&&(t=n);var A=Prototype.K;"currentStyle"in document.documentElement&&(A=function(e){return e.currentStyle.hasLayout||(e.style.zoom=1),e}),Element.Layout=Class.create(Hash,{initialize:function(e,t,n){e(),this.element=$(t),Element.Layout.PROPERTIES.each(function(e){this._set(e,null)},this),n&&(this._preComputing=!0,this._begin(),Element.Layout.PROPERTIES.each(this._compute,this),this._end(),this._preComputing=!1)},_set:function(e,t){return Hash.prototype.set.call(this,e,t)},set:function(e,t){throw"Properties of Element.Layout are read-only."},get:function(e,t){var n=e(t);return null===n?this._compute(t):n},_begin:function(){if(!this._isPrepared()){var e=this.element;if(o(e))return void this._setPrepared(!0);var n={position:e.style.position||"",width:e.style.width||"",visibility:e.style.visibility||"",display:e.style.display||""};e.store("prototype_original_styles",n);var i=t(e,"position"),s=e.offsetWidth;0!==s&&null!==s||(e.style.display="block",s=e.offsetWidth);var a="fixed"===i?document.viewport:e.parentNode,u={visibility:"hidden",display:"block"};"fixed"!==i&&(u.position="absolute"),e.setStyle(u);var c,l=e.offsetWidth;if(s&&l===s)c=r(e,a);else if("absolute"===i||"fixed"===i)c=r(e,a);else{var f=e.parentNode,d=$(f).getLayout();c=d.get("width")-this.get("margin-left")-this.get("border-left")-this.get("padding-left")-this.get("padding-right")-this.get("border-right")-this.get("margin-right")}e.setStyle({width:c+"px"}),this._setPrepared(!0)}},_end:function(){var e=this.element,t=e.retrieve("prototype_original_styles");e.store("prototype_original_styles",null),e.setStyle(t),this._setPrepared(!1)},_compute:function(e){var t=Element.Layout.COMPUTATIONS;if(!(e in t))throw"Property not found.";return this._set(e,t[e].call(this,this.element))},_isPrepared:function(){return this.element.retrieve("prototype_element_layout_prepared",!1)},_setPrepared:function(e){return this.element.store("prototype_element_layout_prepared",e)},toObject:function(){var e=$A(arguments),t=0===e.length?Element.Layout.PROPERTIES:e.join(" ").split(" "),n={};return t.each(function(e){if(Element.Layout.PROPERTIES.include(e)){var t=this.get(e);null!=t&&(n[e]=t)}},this),n},toHash:function(){var e=this.toObject.apply(this,arguments);return new Hash(e)},toCSS:function(){var e=$A(arguments),t=0===e.length?Element.Layout.PROPERTIES:e.join(" ").split(" "),n={};return t.each(function(e){if(Element.Layout.PROPERTIES.include(e)&&!Element.Layout.COMPOSITE_PROPERTIES.include(e)){var t=this.get(e);null!=t&&(n[s(e)]=t+"px")}},this),n},inspect:function(){return"#<Element.Layout>"}}),Object.extend(Element.Layout,{PROPERTIES:$w("height width top left right bottom border-left border-right border-top border-bottom padding-left padding-right padding-top padding-bottom margin-top margin-bottom margin-left margin-right padding-box-width padding-box-height border-box-width border-box-height margin-box-width margin-box-height"),COMPOSITE_PROPERTIES:$w("padding-box-width padding-box-height margin-box-width margin-box-height border-box-width border-box-height"),COMPUTATIONS:{height:function(e){this._preComputing||this._begin();var t=this.get("border-box-height");if(t<=0)return this._preComputing||this._end(),0;var n=this.get("border-top"),r=this.get("border-bottom"),i=this.get("padding-top"),o=this.get("padding-bottom");return this._preComputing||this._end(),t-n-r-i-o},width:function(e){this._preComputing||this._begin();var t=this.get("border-box-width");if(t<=0)return this._preComputing||this._end(),0;var n=this.get("border-left"),r=this.get("border-right"),i=this.get("padding-left"),o=this.get("padding-right");return this._preComputing||this._end(),t-n-r-i-o},"padding-box-height":function(e){var t=this.get("height"),n=this.get("padding-top"),r=this.get("padding-bottom");return t+n+r},"padding-box-width":function(e){var t=this.get("width"),n=this.get("padding-left"),r=this.get("padding-right");return t+n+r},"border-box-height":function(e){this._preComputing||this._begin();var t=e.offsetHeight;return this._preComputing||this._end(),t},"border-box-width":function(e){this._preComputing||this._begin();var t=e.offsetWidth;return this._preComputing||this._end(),t},"margin-box-height":function(e){var t=this.get("border-box-height"),n=this.get("margin-top"),r=this.get("margin-bottom");return t<=0?0:t+n+r},"margin-box-width":function(e){var t=this.get("border-box-width"),n=this.get("margin-left"),r=this.get("margin-right");return t<=0?0:t+n+r},top:function(e){var t=e.positionedOffset();return t.top},bottom:function(e){var t=e.positionedOffset(),n=e.getOffsetParent(),r=n.measure("height"),i=this.get("border-box-height");return r-i-t.top},left:function(e){var t=e.positionedOffset();return t.left},right:function(e){var t=e.positionedOffset(),n=e.getOffsetParent(),r=n.measure("width"),i=this.get("border-box-width");return r-i-t.left},"padding-top":function(e){return i(e,"paddingTop")},"padding-bottom":function(e){return i(e,"paddingBottom")},"padding-left":function(e){return i(e,"paddingLeft")},"padding-right":function(e){return i(e,"paddingRight")},"border-top":function(e){return i(e,"borderTopWidth")},"border-bottom":function(e){return i(e,"borderBottomWidth")},"border-left":function(e){return i(e,"borderLeftWidth")},"border-right":function(e){return i(e,"borderRightWidth")},"margin-top":function(e){return i(e,"marginTop")},"margin-bottom":function(e){return i(e,"marginBottom")},"margin-left":function(e){return i(e,"marginLeft")},"margin-right":function(e){return i(e,"marginRight")}}}),"getBoundingClientRect"in document.documentElement&&Object.extend(Element.Layout.COMPUTATIONS,{right:function(e){var t=A(e.getOffsetParent()),n=e.getBoundingClientRect(),r=t.getBoundingClientRect();return(r.right-n.right).round()},bottom:function(e){var t=A(e.getOffsetParent()),n=e.getBoundingClientRect(),r=t.getBoundingClientRect();return(r.bottom-n.bottom).round()}}),Element.Offset=Class.create({initialize:function(e,t){this.left=e.round(),this.top=t.round(),this[0]=this.left,this[1]=this.top},relativeTo:function(e){return new Element.Offset(this.left-e.left,this.top-e.top)},inspect:function(){return"#<Element.Offset left: #{left} top: #{top}>".interpolate(this)},toString:function(){return"[#{left}, #{top}]".interpolate(this)},toArray:function(){return[this.left,this.top]}}),Prototype.Browser.IE?(d=d.wrap(function(e,t){if(t=$(t),C(t)||j(t)||T(t)||N(t))return $(document.body);var n=t.getStyle("position");if("static"!==n)return e(t);t.setStyle({position:"relative"});var r=e(t);return t.setStyle({position:n}),r}),h=h.wrap(function(e,t){if(t=$(t),!t.parentNode)return new Element.Offset(0,0);var n=t.getStyle("position");if("static"!==n)return e(t);var r=t.getOffsetParent();r&&"fixed"===r.getStyle("position")&&A(r),t.setStyle({position:"relative"});var i=e(t);return t.setStyle({position:n}),i})):Prototype.Browser.Webkit&&(p=function(e){e=$(e);var t=0,n=0;do{if(t+=e.offsetTop||0,n+=e.offsetLeft||0,e.offsetParent==document.body&&"absolute"==Element.getStyle(e,"position"))break;e=e.offsetParent}while(e);return new Element.Offset(n,t)}),Element.addMethods({getLayout:a,measure:u,getWidth:l,getHeight:c,getDimensions:f,getOffsetParent:d,cumulativeOffset:p,positionedOffset:h,cumulativeScrollOffset:m,viewportOffset:g,absolutize:v,relativize:y,scrollTo:b,makePositioned:E,undoPositioned:O,makeClipping:S,undoClipping:w,clonePosition:x}),"getBoundingClientRect"in document.documentElement&&Element.addMethods({viewportOffset:function(e){if(e=$(e),j(e))return new Element.Offset(0,0);var t=e.getBoundingClientRect(),n=document.documentElement;return new Element.Offset(t.left-n.clientLeft,t.top-n.clientTop)}})}(),function(){function e(){return s?s:s=o?document.body:document.documentElement}function t(){return{width:this.getWidth(),height:this.getHeight()}}function n(){return e().clientWidth}function r(){return e().clientHeight}function i(){var e=window.pageXOffset||document.documentElement.scrollLeft||document.body.scrollLeft,t=window.pageYOffset||document.documentElement.scrollTop||document.body.scrollTop;return new Element.Offset(e,t)}var o=Prototype.Browser.Opera&&window.parseFloat(window.opera.version())<9.5,s=null;document.viewport={getDimensions:t,getWidth:n,getHeight:r,getScrollOffsets:i}}(),window.$$=function(){var e=$A(arguments).join(", ");return Prototype.Selector.select(e,document)},Prototype.Selector=function(){function e(){throw new Error('Method "Prototype.Selector.select" must be defined.')}function t(){throw new Error('Method "Prototype.Selector.match" must be defined.')}function n(e,t,n){n=n||0;var r,i=Prototype.Selector.match,o=e.length,s=0;for(r=0;r<o;r++)if(i(e[r],t)&&n==s++)return Element.extend(e[r])}function r(e){for(var t=0,n=e.length;t<n;t++)Element.extend(e[t]);return e}var i=Prototype.K;return{select:e,match:t,find:n,extendElements:Element.extend===i?i:r,extendElement:Element.extend}}(),Prototype._original_property=window.Sizzle,function(e){function t(e,t,n,r){var i,o,s,a,u,c,f,h,m,g;if((t?t.ownerDocument||t:I)!==L&&P(t),t=t||L,n=n||[],!e||"string"!=typeof e)return n;if(1!==(a=t.nodeType)&&9!==a)return[];if(R&&!r){if(i=ye.exec(e))if(s=i[1]){if(9===a){if(o=t.getElementById(s),!o||!o.parentNode)return n;if(o.id===s)return n.push(o),n}else if(t.ownerDocument&&(o=t.ownerDocument.getElementById(s))&&D(t,o)&&o.id===s)return n.push(o),n}else{if(i[2])return Z.apply(n,t.getElementsByTagName(e)),n;if((s=i[3])&&S.getElementsByClassName&&t.getElementsByClassName)return Z.apply(n,t.getElementsByClassName(s)),n}if(S.qsa&&(!$||!$.test(e))){if(h=f=k,m=t,g=9===a&&e,1===a&&"object"!==t.nodeName.toLowerCase()){for(c=d(e),(f=t.getAttribute("id"))?h=f.replace(Ee,"\\$&"):t.setAttribute("id",h),h="[id='"+h+"'] ",u=c.length;u--;)c[u]=h+p(c[u]);m=be.test(e)&&l(t.parentNode)||t,g=c.join(",")}if(g)try{return Z.apply(n,m.querySelectorAll(g)),n}catch(v){}finally{f||t.removeAttribute("id")}}}return C(e.replace(ue,"$1"),t,n,r)}function n(){function e(n,r){return t.push(n+" ")>w.cacheLength&&delete e[t.shift()],e[n+" "]=r}var t=[];return e}function r(e){return e[k]=!0,e}function i(e){var t=L.createElement("div");try{return!!e(t)}catch(n){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function o(e,t){for(var n=e.split("|"),r=e.length;r--;)w.attrHandle[n[r]]=t}function s(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&(~t.sourceIndex||V)-(~e.sourceIndex||V);if(r)return r;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function a(e){return function(t){var n=t.nodeName.toLowerCase();return"input"===n&&t.type===e}}function u(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function c(e){return r(function(t){return t=+t,r(function(n,r){for(var i,o=e([],n.length,t),s=o.length;s--;)n[i=o[s]]&&(n[i]=!(r[i]=n[i]))})})}function l(e){return e&&typeof e.getElementsByTagName!==W&&e}function f(){}function d(e,n){var r,i,o,s,a,u,c,l=q[e+" "];if(l)return n?0:l.slice(0);for(a=e,u=[],c=w.preFilter;a;){r&&!(i=ce.exec(a))||(i&&(a=a.slice(i[0].length)||a),u.push(o=[])),r=!1,(i=le.exec(a))&&(r=i.shift(),o.push({value:r,type:i[0].replace(ue," ")}),a=a.slice(r.length));for(s in w.filter)!(i=he[s].exec(a))||c[s]&&!(i=c[s](i))||(r=i.shift(),
o.push({value:r,type:s,matches:i}),a=a.slice(r.length));if(!r)break}return n?a.length:a?t.error(e):q(e,u).slice(0)}function p(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function h(e,t,n){var r=t.dir,i=n&&"parentNode"===r,o=U++;return t.first?function(t,n,o){for(;t=t[r];)if(1===t.nodeType||i)return e(t,n,o)}:function(t,n,s){var a,u,c=[B,o];if(s){for(;t=t[r];)if((1===t.nodeType||i)&&e(t,n,s))return!0}else for(;t=t[r];)if(1===t.nodeType||i){if(u=t[k]||(t[k]={}),(a=u[r])&&a[0]===B&&a[1]===o)return c[2]=a[2];if(u[r]=c,c[2]=e(t,n,s))return!0}}}function m(e){return e.length>1?function(t,n,r){for(var i=e.length;i--;)if(!e[i](t,n,r))return!1;return!0}:e[0]}function g(e,n,r){for(var i=0,o=n.length;i<o;i++)t(e,n[i],r);return r}function v(e,t,n,r,i){for(var o,s=[],a=0,u=e.length,c=null!=t;a<u;a++)(o=e[a])&&(n&&!n(o,r,i)||(s.push(o),c&&t.push(a)));return s}function y(e,t,n,i,o,s){return i&&!i[k]&&(i=y(i)),o&&!o[k]&&(o=y(o,s)),r(function(r,s,a,u){var c,l,f,d=[],p=[],h=s.length,m=r||g(t||"*",a.nodeType?[a]:a,[]),y=!e||!r&&t?m:v(m,d,e,a,u),b=n?o||(r?e:h||i)?[]:s:y;if(n&&n(y,b,a,u),i)for(c=v(b,p),i(c,[],a,u),l=c.length;l--;)(f=c[l])&&(b[p[l]]=!(y[p[l]]=f));if(r){if(o||e){if(o){for(c=[],l=b.length;l--;)(f=b[l])&&c.push(y[l]=f);o(null,b=[],c,u)}for(l=b.length;l--;)(f=b[l])&&(c=o?te.call(r,f):d[l])>-1&&(r[c]=!(s[c]=f))}}else b=v(b===s?b.splice(h,b.length):b),o?o(null,s,b,u):Z.apply(s,b)})}function b(e){for(var t,n,r,i=e.length,o=w.relative[e[0].type],s=o||w.relative[" "],a=o?1:0,u=h(function(e){return e===t},s,!0),c=h(function(e){return te.call(t,e)>-1},s,!0),l=[function(e,n,r){return!o&&(r||n!==j)||((t=n).nodeType?u(e,n,r):c(e,n,r))}];a<i;a++)if(n=w.relative[e[a].type])l=[h(m(l),n)];else{if(n=w.filter[e[a].type].apply(null,e[a].matches),n[k]){for(r=++a;r<i&&!w.relative[e[r].type];r++);return y(a>1&&m(l),a>1&&p(e.slice(0,a-1).concat({value:" "===e[a-2].type?"*":""})).replace(ue,"$1"),n,a<r&&b(e.slice(a,r)),r<i&&b(e=e.slice(r)),r<i&&p(e))}l.push(n)}return m(l)}function E(e,n){var i=n.length>0,o=e.length>0,s=function(r,s,a,u,c){var l,f,d,p=0,h="0",m=r&&[],g=[],y=j,b=r||o&&w.find.TAG("*",c),E=B+=null==y?1:Math.random()||.1,O=b.length;for(c&&(j=s!==L&&s);h!==O&&null!=(l=b[h]);h++){if(o&&l){for(f=0;d=e[f++];)if(d(l,s,a)){u.push(l);break}c&&(B=E)}i&&((l=!d&&l)&&p--,r&&m.push(l))}if(p+=h,i&&h!==p){for(f=0;d=n[f++];)d(m,g,s,a);if(r){if(p>0)for(;h--;)m[h]||g[h]||(g[h]=G.call(u));g=v(g)}Z.apply(u,g),c&&!r&&g.length>0&&p+n.length>1&&t.uniqueSort(u)}return c&&(B=E,j=y),m};return i?r(s):s}var O,S,w,x,T,N,C,j,A,_,P,L,M,R,$,H,F,D,k="sizzle"+-new Date,I=e.document,B=0,U=0,z=n(),q=n(),J=n(),K=function(e,t){return e===t&&(_=!0),0},W="undefined",V=1<<31,Y={}.hasOwnProperty,X=[],G=X.pop,Q=X.push,Z=X.push,ee=X.slice,te=X.indexOf||function(e){for(var t=0,n=this.length;t<n;t++)if(this[t]===e)return t;return-1},ne="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",re="[\\x20\\t\\r\\n\\f]",ie="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",oe=ie.replace("w","w#"),se="\\["+re+"*("+ie+")"+re+"*(?:([*^$|!~]?=)"+re+"*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|("+oe+")|)|)"+re+"*\\]",ae=":("+ie+")(?:\\(((['\"])((?:\\\\.|[^\\\\])*?)\\3|((?:\\\\.|[^\\\\()[\\]]|"+se.replace(3,8)+")*)|.*)\\)|)",ue=new RegExp("^"+re+"+|((?:^|[^\\\\])(?:\\\\.)*)"+re+"+$","g"),ce=new RegExp("^"+re+"*,"+re+"*"),le=new RegExp("^"+re+"*([>+~]|"+re+")"+re+"*"),fe=new RegExp("="+re+"*([^\\]'\"]*?)"+re+"*\\]","g"),de=new RegExp(ae),pe=new RegExp("^"+oe+"$"),he={ID:new RegExp("^#("+ie+")"),CLASS:new RegExp("^\\.("+ie+")"),TAG:new RegExp("^("+ie.replace("w","w*")+")"),ATTR:new RegExp("^"+se),PSEUDO:new RegExp("^"+ae),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+re+"*(even|odd|(([+-]|)(\\d*)n|)"+re+"*(?:([+-]|)"+re+"*(\\d+)|))"+re+"*\\)|)","i"),bool:new RegExp("^(?:"+ne+")$","i"),needsContext:new RegExp("^"+re+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+re+"*((?:-\\d)?\\d*)"+re+"*\\)|)(?=[^-]|$)","i")},me=/^(?:input|select|textarea|button)$/i,ge=/^h\d$/i,ve=/^[^{]+\{\s*\[native \w/,ye=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,be=/[+~]/,Ee=/'|\\/g,Oe=new RegExp("\\\\([\\da-f]{1,6}"+re+"?|("+re+")|.)","ig"),Se=function(e,t,n){var r="0x"+t-65536;return r!==r||n?t:r<0?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320)};try{Z.apply(X=ee.call(I.childNodes),I.childNodes),X[I.childNodes.length].nodeType}catch(we){Z={apply:X.length?function(e,t){Q.apply(e,ee.call(t))}:function(e,t){for(var n=e.length,r=0;e[n++]=t[r++];);e.length=n-1}}}S=t.support={},T=t.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return!!t&&"HTML"!==t.nodeName},P=t.setDocument=function(e){var t,n=e?e.ownerDocument||e:I,r=n.defaultView;return n!==L&&9===n.nodeType&&n.documentElement?(L=n,M=n.documentElement,R=!T(n),r&&r!==r.top&&(r.addEventListener?r.addEventListener("unload",function(){P()},!1):r.attachEvent&&r.attachEvent("onunload",function(){P()})),S.attributes=i(function(e){return e.className="i",!e.getAttribute("className")}),S.getElementsByTagName=i(function(e){return e.appendChild(n.createComment("")),!e.getElementsByTagName("*").length}),S.getElementsByClassName=ve.test(n.getElementsByClassName)&&i(function(e){return e.innerHTML="<div class='a'></div><div class='a i'></div>",e.firstChild.className="i",2===e.getElementsByClassName("i").length}),S.getById=i(function(e){return M.appendChild(e).id=k,!n.getElementsByName||!n.getElementsByName(k).length}),S.getById?(w.find.ID=function(e,t){if(typeof t.getElementById!==W&&R){var n=t.getElementById(e);return n&&n.parentNode?[n]:[]}},w.filter.ID=function(e){var t=e.replace(Oe,Se);return function(e){return e.getAttribute("id")===t}}):(delete w.find.ID,w.filter.ID=function(e){var t=e.replace(Oe,Se);return function(e){var n=typeof e.getAttributeNode!==W&&e.getAttributeNode("id");return n&&n.value===t}}),w.find.TAG=S.getElementsByTagName?function(e,t){if(typeof t.getElementsByTagName!==W)return t.getElementsByTagName(e)}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if("*"===e){for(;n=o[i++];)1===n.nodeType&&r.push(n);return r}return o},w.find.CLASS=S.getElementsByClassName&&function(e,t){if(typeof t.getElementsByClassName!==W&&R)return t.getElementsByClassName(e)},H=[],$=[],(S.qsa=ve.test(n.querySelectorAll))&&(i(function(e){e.innerHTML="<select t=''><option selected=''></option></select>",e.querySelectorAll("[t^='']").length&&$.push("[*^$]="+re+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||$.push("\\["+re+"*(?:value|"+ne+")"),e.querySelectorAll(":checked").length||$.push(":checked")}),i(function(e){var t=n.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&$.push("name"+re+"*[*^$|!~]?="),e.querySelectorAll(":enabled").length||$.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),$.push(",.*:")})),(S.matchesSelector=ve.test(F=M.webkitMatchesSelector||M.mozMatchesSelector||M.oMatchesSelector||M.msMatchesSelector))&&i(function(e){S.disconnectedMatch=F.call(e,"div"),F.call(e,"[s!='']:x"),H.push("!=",ae)}),$=$.length&&new RegExp($.join("|")),H=H.length&&new RegExp(H.join("|")),t=ve.test(M.compareDocumentPosition),D=t||ve.test(M.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},K=t?function(e,t){if(e===t)return _=!0,0;var r=!e.compareDocumentPosition-!t.compareDocumentPosition;return r?r:(r=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1,1&r||!S.sortDetached&&t.compareDocumentPosition(e)===r?e===n||e.ownerDocument===I&&D(I,e)?-1:t===n||t.ownerDocument===I&&D(I,t)?1:A?te.call(A,e)-te.call(A,t):0:4&r?-1:1)}:function(e,t){if(e===t)return _=!0,0;var r,i=0,o=e.parentNode,a=t.parentNode,u=[e],c=[t];if(!o||!a)return e===n?-1:t===n?1:o?-1:a?1:A?te.call(A,e)-te.call(A,t):0;if(o===a)return s(e,t);for(r=e;r=r.parentNode;)u.unshift(r);for(r=t;r=r.parentNode;)c.unshift(r);for(;u[i]===c[i];)i++;return i?s(u[i],c[i]):u[i]===I?-1:c[i]===I?1:0},n):L},t.matches=function(e,n){return t(e,null,null,n)},t.matchesSelector=function(e,n){if((e.ownerDocument||e)!==L&&P(e),n=n.replace(fe,"='$1']"),S.matchesSelector&&R&&(!H||!H.test(n))&&(!$||!$.test(n)))try{var r=F.call(e,n);if(r||S.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(i){}return t(n,L,null,[e]).length>0},t.contains=function(e,t){return(e.ownerDocument||e)!==L&&P(e),D(e,t)},t.attr=function(e,t){(e.ownerDocument||e)!==L&&P(e);var n=w.attrHandle[t.toLowerCase()],r=n&&Y.call(w.attrHandle,t.toLowerCase())?n(e,t,!R):void 0;return void 0!==r?r:S.attributes||!R?e.getAttribute(t):(r=e.getAttributeNode(t))&&r.specified?r.value:null},t.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},t.uniqueSort=function(e){var t,n=[],r=0,i=0;if(_=!S.detectDuplicates,A=!S.sortStable&&e.slice(0),e.sort(K),_){for(;t=e[i++];)t===e[i]&&(r=n.push(i));for(;r--;)e.splice(n[r],1)}return A=null,e},x=t.getText=function(e){var t,n="",r=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=x(e)}else if(3===i||4===i)return e.nodeValue}else for(;t=e[r++];)n+=x(t);return n},w=t.selectors={cacheLength:50,createPseudo:r,match:he,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(Oe,Se),e[3]=(e[4]||e[5]||"").replace(Oe,Se),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||t.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&t.error(e[0]),e},PSEUDO:function(e){var t,n=!e[5]&&e[2];return he.CHILD.test(e[0])?null:(e[3]&&void 0!==e[4]?e[2]=e[4]:n&&de.test(n)&&(t=d(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(Oe,Se).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=z[e+" "];return t||(t=new RegExp("(^|"+re+")"+e+"("+re+"|$)"))&&z(e,function(e){return t.test("string"==typeof e.className&&e.className||typeof e.getAttribute!==W&&e.getAttribute("class")||"")})},ATTR:function(e,n,r){return function(i){var o=t.attr(i,e);return null==o?"!="===n:!n||(o+="","="===n?o===r:"!="===n?o!==r:"^="===n?r&&0===o.indexOf(r):"*="===n?r&&o.indexOf(r)>-1:"$="===n?r&&o.slice(-r.length)===r:"~="===n?(" "+o+" ").indexOf(r)>-1:"|="===n&&(o===r||o.slice(0,r.length+1)===r+"-"))}},CHILD:function(e,t,n,r,i){var o="nth"!==e.slice(0,3),s="last"!==e.slice(-4),a="of-type"===t;return 1===r&&0===i?function(e){return!!e.parentNode}:function(t,n,u){var c,l,f,d,p,h,m=o!==s?"nextSibling":"previousSibling",g=t.parentNode,v=a&&t.nodeName.toLowerCase(),y=!u&&!a;if(g){if(o){for(;m;){for(f=t;f=f[m];)if(a?f.nodeName.toLowerCase()===v:1===f.nodeType)return!1;h=m="only"===e&&!h&&"nextSibling"}return!0}if(h=[s?g.firstChild:g.lastChild],s&&y){for(l=g[k]||(g[k]={}),c=l[e]||[],p=c[0]===B&&c[1],d=c[0]===B&&c[2],f=p&&g.childNodes[p];f=++p&&f&&f[m]||(d=p=0)||h.pop();)if(1===f.nodeType&&++d&&f===t){l[e]=[B,p,d];break}}else if(y&&(c=(t[k]||(t[k]={}))[e])&&c[0]===B)d=c[1];else for(;(f=++p&&f&&f[m]||(d=p=0)||h.pop())&&((a?f.nodeName.toLowerCase()!==v:1!==f.nodeType)||!++d||(y&&((f[k]||(f[k]={}))[e]=[B,d]),f!==t)););return d-=i,d===r||d%r===0&&d/r>=0}}},PSEUDO:function(e,n){var i,o=w.pseudos[e]||w.setFilters[e.toLowerCase()]||t.error("unsupported pseudo: "+e);return o[k]?o(n):o.length>1?(i=[e,e,"",n],w.setFilters.hasOwnProperty(e.toLowerCase())?r(function(e,t){for(var r,i=o(e,n),s=i.length;s--;)r=te.call(e,i[s]),e[r]=!(t[r]=i[s])}):function(e){return o(e,0,i)}):o}},pseudos:{not:r(function(e){var t=[],n=[],i=N(e.replace(ue,"$1"));return i[k]?r(function(e,t,n,r){for(var o,s=i(e,null,r,[]),a=e.length;a--;)(o=s[a])&&(e[a]=!(t[a]=o))}):function(e,r,o){return t[0]=e,i(t,null,o,n),!n.pop()}}),has:r(function(e){return function(n){return t(e,n).length>0}}),contains:r(function(e){return function(t){return(t.textContent||t.innerText||x(t)).indexOf(e)>-1}}),lang:r(function(e){return pe.test(e||"")||t.error("unsupported lang: "+e),e=e.replace(Oe,Se).toLowerCase(),function(t){var n;do if(n=R?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return n=n.toLowerCase(),n===e||0===n.indexOf(e+"-");while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===M},focus:function(e){return e===L.activeElement&&(!L.hasFocus||L.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:function(e){return e.disabled===!1},disabled:function(e){return e.disabled===!0},checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,e.selected===!0},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!w.pseudos.empty(e)},header:function(e){return ge.test(e.nodeName)},input:function(e){return me.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:c(function(){return[0]}),last:c(function(e,t){return[t-1]}),eq:c(function(e,t,n){return[n<0?n+t:n]}),even:c(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:c(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:c(function(e,t,n){for(var r=n<0?n+t:n;--r>=0;)e.push(r);return e}),gt:c(function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e})}},w.pseudos.nth=w.pseudos.eq;for(O in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})w.pseudos[O]=a(O);for(O in{submit:!0,reset:!0})w.pseudos[O]=u(O);f.prototype=w.filters=w.pseudos,w.setFilters=new f,N=t.compile=function(e,t){var n,r=[],i=[],o=J[e+" "];if(!o){for(t||(t=d(e)),n=t.length;n--;)o=b(t[n]),o[k]?r.push(o):i.push(o);o=J(e,E(i,r)),o.selector=e}return o},C=t.select=function(e,t,n,r){var i,o,s,a,u,c="function"==typeof e&&e,f=!r&&d(e=c.selector||e);if(n=n||[],1===f.length){if(o=f[0]=f[0].slice(0),o.length>2&&"ID"===(s=o[0]).type&&S.getById&&9===t.nodeType&&R&&w.relative[o[1].type]){if(t=(w.find.ID(s.matches[0].replace(Oe,Se),t)||[])[0],!t)return n;c&&(t=t.parentNode),e=e.slice(o.shift().value.length)}for(i=he.needsContext.test(e)?0:o.length;i--&&(s=o[i],!w.relative[a=s.type]);)if((u=w.find[a])&&(r=u(s.matches[0].replace(Oe,Se),be.test(o[0].type)&&l(t.parentNode)||t))){if(o.splice(i,1),e=r.length&&p(o),!e)return Z.apply(n,r),n;break}}return(c||N(e,f))(r,t,!R,n,be.test(e)&&l(t.parentNode)||t),n},S.sortStable=k.split("").sort(K).join("")===k,S.detectDuplicates=!!_,P(),S.sortDetached=i(function(e){return 1&e.compareDocumentPosition(L.createElement("div"))}),i(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||o("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),S.attributes&&i(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||o("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),i(function(e){return null==e.getAttribute("disabled")})||o(ne,function(e,t,n){var r;if(!n)return e[t]===!0?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null}),"function"==typeof define&&define.amd?define(function(){return t}):"undefined"!=typeof module&&module.exports?module.exports=t:e.Sizzle=t}(window),function(e){function t(t,n){return r(e(t,n||document))}function n(t,n){return 1==e.matches(n,[t]).length}var r=Prototype.Selector.extendElements;Prototype.Selector.engine=e,Prototype.Selector.select=t,Prototype.Selector.match=n}(Sizzle),window.Sizzle=Prototype._original_property,delete Prototype._original_property;var Form={reset:function(e){return e=$(e),e.reset(),e},serializeElements:function(e,t){"object"!=typeof t?t={hash:!!t}:Object.isUndefined(t.hash)&&(t.hash=!0);var n,r,i,o,s=!1,a=t.submit;return t.hash?(o={},i=function(e,t,n){return t in e?(Object.isArray(e[t])||(e[t]=[e[t]]),e[t]=e[t].concat(n)):e[t]=n,e}):(o="",i=function(e,t,n){if(Object.isArray(n)||(n=[n]),!n.length)return e;var r=encodeURIComponent(t).gsub(/%20/,"+");return e+(e?"&":"")+n.map(function(e){return e=e.gsub(/(\r)?\n/,"\r\n"),e=encodeURIComponent(e),e=e.gsub(/%20/,"+"),r+"="+e}).join("&")}),e.inject(o,function(e,t){return!t.disabled&&t.name&&(n=t.name,r=$(t).getValue(),null==r||"file"==t.type||"submit"==t.type&&(s||a===!1||a&&n!=a||!(s=!0))||(e=i(e,n,r))),e})}};Form.Methods={serialize:function(e,t){return Form.serializeElements(Form.getElements(e),t)},getElements:function(e){for(var t,n=$(e).getElementsByTagName("*"),r=[],i=Form.Element.Serializers,o=0;t=n[o];o++)i[t.tagName.toLowerCase()]&&r.push(Element.extend(t));return r},getInputs:function(e,t,n){e=$(e);var r=e.getElementsByTagName("input");if(!t&&!n)return $A(r).map(Element.extend);for(var i=0,o=[],s=r.length;i<s;i++){var a=r[i];t&&a.type!=t||n&&a.name!=n||o.push(Element.extend(a))}return o},disable:function(e){return e=$(e),Form.getElements(e).invoke("disable"),e},enable:function(e){return e=$(e),Form.getElements(e).invoke("enable"),e},findFirstElement:function(e){var t=$(e).getElements().findAll(function(e){return"hidden"!=e.type&&!e.disabled}),n=t.findAll(function(e){return e.hasAttribute("tabIndex")&&e.tabIndex>=0}).sortBy(function(e){return e.tabIndex}).first();return n?n:t.find(function(e){return/^(?:input|select|textarea)$/i.test(e.tagName)})},focusFirstElement:function(e){e=$(e);var t=e.findFirstElement();return t&&t.activate(),e},request:function(e,t){e=$(e),t=Object.clone(t||{});var n=t.parameters,r=e.readAttribute("action")||"";return r.blank()&&(r=window.location.href),t.parameters=e.serialize(!0),n&&(Object.isString(n)&&(n=n.toQueryParams()),Object.extend(t.parameters,n)),e.hasAttribute("method")&&!t.method&&(t.method=e.method),new Ajax.Request(r,t)}},Form.Element={focus:function(e){return $(e).focus(),e},select:function(e){return $(e).select(),e}},Form.Element.Methods={serialize:function(e){if(e=$(e),!e.disabled&&e.name){var t=e.getValue();if(void 0!=t){var n={};return n[e.name]=t,Object.toQueryString(n)}}return""},getValue:function(e){e=$(e);var t=e.tagName.toLowerCase();return Form.Element.Serializers[t](e)},setValue:function(e,t){e=$(e);var n=e.tagName.toLowerCase();return Form.Element.Serializers[n](e,t),e},clear:function(e){return $(e).value="",e},present:function(e){return""!=$(e).value},activate:function(e){e=$(e);try{e.focus(),!e.select||"input"==e.tagName.toLowerCase()&&/^(?:button|reset|submit)$/i.test(e.type)||e.select()}catch(t){}return e},disable:function(e){return e=$(e),e.disabled=!0,e},enable:function(e){return e=$(e),e.disabled=!1,e}};var Field=Form.Element,$F=Form.Element.Methods.getValue;Form.Element.Serializers=function(){function e(e,r){switch(e.type.toLowerCase()){case"checkbox":case"radio":return t(e,r);default:return n(e,r)}}function t(e,t){return Object.isUndefined(t)?e.checked?e.value:null:void(e.checked=!!t)}function n(e,t){return Object.isUndefined(t)?e.value:void(e.value=t)}function r(e,t){if(Object.isUndefined(t))return("select-one"===e.type?i:o)(e);for(var n,r,s=!Object.isArray(t),a=0,u=e.length;a<u;a++)if(n=e.options[a],r=this.optionValue(n),s){if(r==t)return void(n.selected=!0)}else n.selected=t.include(r)}function i(e){var t=e.selectedIndex;return t>=0?s(e.options[t]):null}function o(e){var t,n=e.length;if(!n)return null;for(var r=0,t=[];r<n;r++){var i=e.options[r];i.selected&&t.push(s(i))}return t}function s(e){return Element.hasAttribute(e,"value")?e.value:e.text}return{input:e,inputSelector:t,textarea:n,select:r,selectOne:i,selectMany:o,optionValue:s,button:n}}(),Abstract.TimedObserver=Class.create(PeriodicalExecuter,{initialize:function(e,t,n,r){e(r,n),this.element=$(t),this.lastValue=this.getValue()},execute:function(){var e=this.getValue();(Object.isString(this.lastValue)&&Object.isString(e)?this.lastValue!=e:String(this.lastValue)!=String(e))&&(this.callback(this.element,e),this.lastValue=e)}}),Form.Element.Observer=Class.create(Abstract.TimedObserver,{getValue:function(){return Form.Element.getValue(this.element)}}),Form.Observer=Class.create(Abstract.TimedObserver,{getValue:function(){return Form.serialize(this.element)}}),Abstract.EventObserver=Class.create({initialize:function(e,t){this.element=$(e),this.callback=t,this.lastValue=this.getValue(),"form"==this.element.tagName.toLowerCase()?this.registerFormCallbacks():this.registerCallback(this.element)},onElementEvent:function(){var e=this.getValue();this.lastValue!=e&&(this.callback(this.element,e),this.lastValue=e)},registerFormCallbacks:function(){Form.getElements(this.element).each(this.registerCallback,this)},registerCallback:function(e){if(e.type)switch(e.type.toLowerCase()){case"checkbox":case"radio":Event.observe(e,"click",this.onElementEvent.bind(this));break;default:Event.observe(e,"change",this.onElementEvent.bind(this))}}}),Form.Element.EventObserver=Class.create(Abstract.EventObserver,{getValue:function(){return Form.Element.getValue(this.element)}}),Form.EventObserver=Class.create(Abstract.EventObserver,{getValue:function(){return Form.serialize(this.element)}}),function(e){function t(e,t){return e.which?e.which===t+1:e.button===t}function n(e,t){return e.button===J[t]}function r(e,t){switch(t){case 0:return 1==e.which&&!e.metaKey;case 1:return 2==e.which||1==e.which&&e.metaKey;case 2:return 3==e.which;default:return!1}}function i(e){return q(e,0)}function o(e){return q(e,1)}function s(e){return q(e,2)}function a(e){return Element.extend(u(e))}function u(e){e=U.extend(e);var t=e.target,n=e.type,r=e.currentTarget;return r&&r.tagName&&("load"===n||"error"===n||"click"===n&&"input"===r.tagName.toLowerCase()&&"radio"===r.type)&&(t=r),t.nodeType==Node.TEXT_NODE?t.parentNode:t}function c(e,t){var n=u(e),r=Prototype.Selector;if(!t)return Element.extend(n);for(;n;){if(Object.isElement(n)&&r.match(n,t))return Element.extend(n);n=n.parentNode}}function l(e){return{x:f(e),y:d(e)}}function f(e){var t=document.documentElement,n=document.body||{scrollLeft:0};return e.pageX||e.clientX+(t.scrollLeft||n.scrollLeft)-(t.clientLeft||0)}function d(e){var t=document.documentElement,n=document.body||{scrollTop:0};return e.pageY||e.clientY+(t.scrollTop||n.scrollTop)-(t.clientTop||0)}function p(e){U.extend(e),e.preventDefault(),e.stopPropagation(),e.stopped=!0}function h(e){var t;switch(e.type){case"mouseover":case"mouseenter":t=e.fromElement;break;case"mouseout":case"mouseleave":t=e.toElement;break;default:return null}return Element.extend(t)}function m(e){return V[e]||e}function g(e){return e===window?0:("undefined"==typeof e._prototypeUID&&(e._prototypeUID=Element.Storage.UID++),e._prototypeUID)}function v(e){return e===window?0:e==document?1:e.uniqueID}function y(e){return e.include(":")}function b(t,n){var r=e.Event.cache;return Object.isUndefined(n)&&(n=g(t)),r[n]||(r[n]={element:t}),r[n]}function E(t,n){Object.isUndefined(n)&&(n=g(t)),delete e.Event.cache[n]}function O(t,n,r){var i=b(t);i[n]||(i[n]=[]);for(var o=i[n],s=o.length;s--;)if(o[s].handler===r)return null;var a=g(t),u=e.Event._createResponder(a,n,r),c={responder:u,handler:r};return o.push(c),c}function S(e,t,n){var r=b(e),i=r[t];if(i){for(var o,s=i.length;s--;)if(i[s].handler===n){o=i[s];break}if(o){var a=i.indexOf(o);return i.splice(a,1),o}}}function w(e,t,n){e=$(e);var r=O(e,t,n);if(null===r)return e;var i=r.responder;return y(t)?T(e,t,i):x(e,t,i),e}function x(e,t,n){var r=m(t);e.addEventListener?e.addEventListener(r,n,!1):e.attachEvent("on"+r,n)}function T(e,t,n){e.addEventListener?e.addEventListener("dataavailable",n,!1):(e.attachEvent("ondataavailable",n),e.attachEvent("onlosecapture",n))}function N(e,t,n){e=$(e);var r=!Object.isUndefined(n),i=!Object.isUndefined(t);if(!i&&!r)return A(e),e;if(!r)return _(e,t),e;var o=S(e,t,n);return o?(P(e,t,o.responder),e):e}function C(e,t,n){var r=m(t);e.removeEventListener?e.removeEventListener(r,n,!1):e.detachEvent("on"+r,n)}function j(e,t,n){e.removeEventListener?e.removeEventListener("dataavailable",n,!1):(e.detachEvent("ondataavailable",n),e.detachEvent("onlosecapture",n))}function A(t){var n=g(t),r=e.Event.cache[n];if(r){E(t,n);var i,o;for(var s in r)if("element"!==s)for(i=r[s],o=i.length;o--;)P(t,s,i[o].responder)}}function _(e,t){var n=b(e),r=n[t];if(r){delete n[t];for(var i=r.length;i--;)P(e,t,r[i].responder)}}function P(e,t,n){y(t)?j(e,t,n):C(e,t,n)}function L(e){return e!==document?e:document.createEvent&&!e.dispatchEvent?document.documentElement:e}function M(e,t,n,r){e=L($(e)),Object.isUndefined(r)&&(r=!0),n=n||{};var i=Y(e,t,n,r);return U.extend(i)}function R(e,t,n,r){var i=document.createEvent("HTMLEvents");return i.initEvent("dataavailable",r,!0),i.eventName=t,i.memo=n,e.dispatchEvent(i),i}function H(e,t,n,r){var i=document.createEventObject();return i.eventType=r?"ondataavailable":"onlosecapture",i.eventName=t,i.memo=n,e.fireEvent(i.eventType,i),i}function F(e,t,n,r){return e=$(e),Object.isFunction(n)&&Object.isUndefined(r)&&(r=n,n=null),new U.Handler(e,t,n,r).start()}function D(){e.Event.cache=null}var k=document.createElement("div"),I=document.documentElement,B="onmouseenter"in I&&"onmouseleave"in I,U={KEY_BACKSPACE:8,KEY_TAB:9,KEY_RETURN:13,KEY_ESC:27,KEY_LEFT:37,KEY_UP:38,KEY_RIGHT:39,KEY_DOWN:40,KEY_DELETE:46,KEY_HOME:36,KEY_END:35,KEY_PAGEUP:33,KEY_PAGEDOWN:34,KEY_INSERT:45},z=function(e){return!1};window.attachEvent&&(z=window.addEventListener?function(e){return!(e instanceof window.Event)}:function(e){return!0});var q,J={0:1,1:4,2:2};q=window.attachEvent?window.addEventListener?function(e,r){return z(e)?n(e,r):t(e,r)}:n:Prototype.Browser.WebKit?r:t,U.Methods={isLeftClick:i,isMiddleClick:o,isRightClick:s,element:a,findElement:c,pointer:l,pointerX:f,pointerY:d,stop:p};var K=Object.keys(U.Methods).inject({},function(e,t){return e[t]=U.Methods[t].methodize(),e});if(window.attachEvent){var W={stopPropagation:function(){this.cancelBubble=!0},preventDefault:function(){this.returnValue=!1},inspect:function(){return"[object Event]"}};U.extend=function(e,t){if(!e)return!1;if(!z(e))return e;if(e._extendedByPrototype)return e;e._extendedByPrototype=Prototype.emptyFunction;var n=U.pointer(e);return Object.extend(e,{target:e.srcElement||t,relatedTarget:h(e),pageX:n.x,pageY:n.y}),Object.extend(e,K),Object.extend(e,W),e}}else U.extend=Prototype.K;window.addEventListener&&(U.prototype=window.Event.prototype||document.createEvent("HTMLEvents").__proto__,Object.extend(U.prototype,K));var V={mouseenter:"mouseover",mouseleave:"mouseout"};B&&(m=Prototype.K),"uniqueID"in k&&(g=v),U._isCustomEvent=y;var Y=document.createEvent?R:H;U.Handler=Class.create({initialize:function(e,t,n,r){this.element=$(e),this.eventName=t,this.selector=n,this.callback=r,this.handler=this.handleEvent.bind(this)},start:function(){return U.observe(this.element,this.eventName,this.handler),this},stop:function(){return U.stopObserving(this.element,this.eventName,this.handler),this},handleEvent:function(e){var t=U.findElement(e,this.selector);t&&this.callback.call(this.element,e,t)}}),Object.extend(U,U.Methods),Object.extend(U,{fire:M,observe:w,stopObserving:N,on:F}),Element.addMethods({fire:M,observe:w,stopObserving:N,on:F}),Object.extend(document,{fire:M.methodize(),observe:w.methodize(),stopObserving:N.methodize(),on:F.methodize(),loaded:!1}),e.Event?Object.extend(window.Event,U):e.Event=U,e.Event.cache={},window.attachEvent&&window.attachEvent("onunload",D),k=null,I=null}(this),function(e){function t(e){return!s&&("mouseenter"===e||"mouseleave"===e)}function n(e,n,o){return Event._isCustomEvent(n)?r(e,n,o):t(n)?i(e,n,o):function(t){if(Event.cache){var n=Event.cache[e].element;Event.extend(t,n),o.call(n,t)}}}function r(e,t,n){return function(r){var i=Event.cache[e].element;return!Object.isUndefined(r.eventName)&&(r.eventName===t&&(Event.extend(r,i),void n.call(i,r)))}}function i(e,t,n){return function(t){var r=Event.cache[e].element;Event.extend(t,r);for(var i=t.relatedTarget;i&&i!==r;)try{i=i.parentNode}catch(o){i=r}i!==r&&n.call(r,t)}}var o=document.documentElement,s="onmouseenter"in o&&"onmouseleave"in o;e.Event._createResponder=n,o=null}(this),function(e){function t(){document.loaded||(i&&window.clearTimeout(i),document.loaded=!0,document.fire("dom:loaded"))}function n(){"complete"===document.readyState&&(document.detachEvent("onreadystatechange",n),t())}function r(){try{document.documentElement.doScroll("left")}catch(e){return void(i=r.defer())}t()}var i;return"complete"===document.readyState?void t():(document.addEventListener?document.addEventListener("DOMContentLoaded",t,!1):(document.attachEvent("onreadystatechange",n),window==top&&(i=r.defer())),void Event.observe(window,"load",t))}(this),Element.addMethods(),Hash.toQueryString=Object.toQueryString;var Toggle={display:Element.toggle};Element.Methods.childOf=Element.Methods.descendantOf;var Insertion={Before:function(e,t){return Element.insert(e,{before:t})},Top:function(e,t){return Element.insert(e,{top:t})},Bottom:function(e,t){return Element.insert(e,{bottom:t})},After:function(e,t){return Element.insert(e,{after:t})}},$continue=new Error('"throw $continue" is deprecated, use "return" instead'),Position={includeScrollOffsets:!1,prepare:function(){this.deltaX=window.pageXOffset||document.documentElement.scrollLeft||document.body.scrollLeft||0,this.deltaY=window.pageYOffset||document.documentElement.scrollTop||document.body.scrollTop||0},within:function(e,t,n){return this.includeScrollOffsets?this.withinIncludingScrolloffsets(e,t,n):(this.xcomp=t,this.ycomp=n,this.offset=Element.cumulativeOffset(e),n>=this.offset[1]&&n<this.offset[1]+e.offsetHeight&&t>=this.offset[0]&&t<this.offset[0]+e.offsetWidth)},withinIncludingScrolloffsets:function(e,t,n){var r=Element.cumulativeScrollOffset(e);return this.xcomp=t+r[0]-this.deltaX,this.ycomp=n+r[1]-this.deltaY,this.offset=Element.cumulativeOffset(e),this.ycomp>=this.offset[1]&&this.ycomp<this.offset[1]+e.offsetHeight&&this.xcomp>=this.offset[0]&&this.xcomp<this.offset[0]+e.offsetWidth},overlap:function(e,t){return e?"vertical"==e?(this.offset[1]+t.offsetHeight-this.ycomp)/t.offsetHeight:"horizontal"==e?(this.offset[0]+t.offsetWidth-this.xcomp)/t.offsetWidth:void 0:0},cumulativeOffset:Element.Methods.cumulativeOffset,positionedOffset:Element.Methods.positionedOffset,absolutize:function(e){return Position.prepare(),Element.absolutize(e)},relativize:function(e){return Position.prepare(),Element.relativize(e)},realOffset:Element.Methods.cumulativeScrollOffset,offsetParent:Element.Methods.getOffsetParent,page:Element.Methods.viewportOffset,clone:function(e,t,n){return n=n||{},Element.clonePosition(t,e,n)}};document.getElementsByClassName||(document.getElementsByClassName=function(e){function t(e){return e.blank()?null:"[contains(concat(' ', @class, ' '), ' "+e+" ')]"}return e.getElementsByClassName=Prototype.BrowserFeatures.XPath?function(e,n){n=n.toString().strip();var r=/\s/.test(n)?$w(n).map(t).join(""):t(n);return r?document._getElementsByXPath(".//*"+r,e):[]}:function(e,t){t=t.toString().strip();var n=[],r=/\s/.test(t)?$w(t):null;if(!r&&!t)return n;var i=$(e).getElementsByTagName("*");t=" "+t+" ";for(var o,s,a=0;o=i[a];a++)o.className&&(s=" "+o.className+" ")&&(s.include(t)||r&&r.all(function(e){return!e.toString().blank()&&s.include(" "+e+" ")}))&&n.push(Element.extend(o));return n},function(e,t){return $(t||document.body).getElementsByClassName(e)}}(Element.Methods)),
Element.ClassNames=Class.create(),Element.ClassNames.prototype={initialize:function(e){this.element=$(e)},_each:function(e,t){this.element.className.split(/\s+/).select(function(e){return e.length>0})._each(e,t)},set:function(e){this.element.className=e},add:function(e){this.include(e)||this.set($A(this).concat(e).join(" "))},remove:function(e){this.include(e)&&this.set($A(this).without(e).join(" "))},toString:function(){return $A(this).join(" ")}},Object.extend(Element.ClassNames.prototype,Enumerable),function(){window.Selector=Class.create({initialize:function(e){this.expression=e.strip()},findElements:function(e){return Prototype.Selector.select(this.expression,e)},match:function(e){return Prototype.Selector.match(e,this.expression)},toString:function(){return this.expression},inspect:function(){return"#<Selector: "+this.expression+">"}}),Object.extend(Selector,{matchElements:function(e,t){for(var n=Prototype.Selector.match,r=[],i=0,o=e.length;i<o;i++){var s=e[i];n(s,t)&&r.push(Element.extend(s))}return r},findElement:function(e,t,n){n=n||0;for(var r,i=0,o=0,s=e.length;o<s;o++)if(r=e[o],Prototype.Selector.match(r,t)&&n===i++)return Element.extend(r)},findChildElements:function(e,t){var n=t.toArray().join(", ");return Prototype.Selector.select(n,e||document)}})}();
"use strict";function uheprng(){return function(){function n(){++i>=o&&(i=0);var n=1768863*f[i]+2.3283064365386963e-10*a;return f[i]=n-(a=0|n)}function r(){var n=Array.prototype.slice.call(arguments);for(t=0;t<n.length;t++)for(e=0;e<o;e++)f[e]-=c(n[t]),f[e]<0&&(f[e]+=1)}var t,e,o=48,a=1,i=o,f=new Array(o),u=0,c=Mash();for(t=0;t<o;t++)f[t]=c(Math.random());var h=function(r){return Math.floor(r*(n()+1.1102230246251565e-16*(2097152*n()|0)))};return h.string=function(n){var r,t="";for(r=0;r<n;r++)t+=String.fromCharCode(33+h(94));return t},h.cleanString=function(n){return n=n.replace(/(^\s*)|(\s*$)/gi,""),n=n.replace(/[\x00-\x1F]/gi,""),n=n.replace(/\n /,"\n")},h.hashString=function(n){for(n=h.cleanString(n),c(n),t=0;t<n.length;t++)for(u=n.charCodeAt(t),e=0;e<o;e++)f[e]-=c(u),f[e]<0&&(f[e]+=1)},h.addEntropy=function(){var n=[];for(t=0;t<arguments.length;t++)n.push(arguments[t]);r(u++ +(new Date).getTime()+n.join("")+Math.random())},h.initState=function(){for(c(),t=0;t<o;t++)f[t]=c(" ");a=1,i=o},h.done=function(){c=null},h}()}function Mash(){var n=4022871197,r=function(r){if(r){r=r.toString();for(var t=0;t<r.length;t++){n+=r.charCodeAt(t);var e=.02519603282416938*n;n=e>>>0,e-=n,e*=n,n=e>>>0,e-=n,n+=4294967296*e}return 2.3283064365386963e-10*(n>>>0)}n=4022871197};return r}
"use strict";this.osweb=this.osweb||{},osweb.VERSION_NAME="osweb",osweb.VERSION_NUMBER="0.039 (18-07-2016)",osweb.extendClass=function(t,e){function o(){this.constructor=t}return o.prototype=e.prototype,t.prototype=new o},osweb.isClass=function(t){return void 0!==this[t]},osweb.newItemClass=function(t,e,o,s){var n=new this[t](e,o,s);return n.type=t,n},osweb.newElementClass=function(t,e,o){var s=new this[t](e,o);return s},osweb.newWidgetClass=function(t,e,o){var s=new this[t](e,o);return s},osweb.promoteClass=function(t,e){var o=t.prototype,s=Object.getPrototypeOf&&Object.getPrototypeOf(o)||o.__proto__;if(s){o[(e+="_")+"constructor"]=s.constructor;for(var n in s)o.hasOwnProperty(n)&&"function"==typeof s[n]&&(o[e+n]=s[n])}return t};
!function(){function e(){throw"The class constants cannot be instantiated!"}e.ERROR_001="osweb has stopped running due a fatal error.",e.ERROR_002="No content parameter specified.",e.ERROR_003="No context parameter specified.",e.ERROR_004="Invalid scriptID or scriptURL for retrieving script from external location.",e.ERROR_005="Failure to retrieve script from external location (Ajax call error).",e.ERROR_006="Failure to retrieve script from external location (database response error)",e.ERROR_007="Failure to retrieve script from external location (database retrieve error).",e.ERROR_008="Invalid script definition, parsing error.",e.ERROR_009="Unknown class definition within osweb script - ",e.MESSAGE_001="Os",e.MESSAGE_002="web - version ",e.MESSAGE_003="Start up osweb experiment session.",e.MESSAGE_004="Retrieving stimuli files.",e.MESSAGE_005="Retrieving input parameters.",e.MESSAGE_006="Press with the mouse on this screen to continue.",e.MESSAGE_007="Warning: this method is not implemented in the current version of OsWeb - ",e.MESSAGE_008="Retrieving session information.",e.STATUS_NONE=0,e.STATUS_BUILD=1,e.STATUS_INITIALIZE=2,e.STATUS_EXECUTE=3,e.STATUS_FINALIZE=4,e.PARSER_NONE=0,e.PARSER_EXECUTE=1,e.STATUS_PENDING=2,e.STATUS_DONE=3,e.PRESSES_ONLY=1,e.RELEASES_ONLY=2,e.PRESSES_AND_RELEASES=3,e.RESPONSE_NONE=0,e.RESPONSE_DURATION=1,e.RESPONSE_KEYBOARD=2,e.RESPONSE_MOUSE=3,e.RESPONSE_SOUND=4,e.RESPONSE_AUTOKEYBOARD=5,e.RESPONSE_AUTOMOUSE=6,e.UPDATE_NONE=0,e.UPDATE_ONSET=1,e.UPDATE_OFFSET=2,e.SEQUENTIAL=0,e.RANDOM=1,e.RANDOMREPLACEMENT=2,osweb.constants=e}();
!function(){function e(e,t){this.auto_prepare="undefined"==typeof t||t,this.experiment="undefined"==typeof e?osweb.runner.experiment:e,this.background_color=this.experiment.vars.background,this.bidi="yes"===this.experiment.vars.bidi,this.color=this.experiment.vars.foregound,this.fill=!1,this.font_bold="yes"===this.experiment.vars.font_bold,this.font_family=this.experiment.vars.font_family,this.font_italic="yes"===this.experiment.vars.font_italic,this.font_size=this.experiment.vars.font_size,this.font_underline="yes"===this.experiment.vars.font_underline,this.html=!0,this.penwidth=1,this._container=new createjs.Container,this._font_string="bold 18px Courier New",this._height=osweb.runner._canvas.height,this._width=osweb.runner._canvas.width}var t=e.prototype;t.auto_prepare=!1,t.experiment=null,t.uniform_coordinates=!1,t._arrow_shape=function(e,t,i,n,s,a,r){var o=Math.sqrt(Math.pow(n-t,2)+Math.pow(e-i,2)),h=Math.atan2(n-t,i-e),c=(1-a)/2;a/=2;var d=[i,n],l=[e+a*r*Math.cos(h-Math.PI/2),t+a*r*Math.sin(h-Math.PI/2)],g=[l[0]+s*Math.cos(h)*o,l[1]+s*Math.sin(h)*o],p=[g[0]+c*r*Math.cos(h-Math.PI/2),g[1]+c*r*Math.sin(h-Math.PI/2)],u=[e+a*r*Math.cos(h+Math.PI/2),t+a*r*Math.sin(h+Math.PI/2)],_=[u[0]+s*Math.cos(h)*o,u[1]+s*Math.sin(h)*o],f=[_[0]+c*r*Math.cos(h+Math.PI/2),_[1]+c*r*Math.sin(h+Math.PI/2)];return[l,g,p,d,f,_,u]},t.arrow=function(e,t,i,n,s,a,r,o,h,c){var d=this._arrow_shape(e,t,i,n,o,r,h),l=new createjs.Shape;l.graphics.setStrokeStyle(a),l.graphics.beginStroke(s),l.graphics.moveTo(d[0][0],d[0][1]),l.graphics.lineTo(d[1][0],d[1][1]),l.graphics.lineTo(d[2][0],d[2][1]),l.graphics.lineTo(d[3][0],d[3][1]),l.graphics.lineTo(d[4][0],d[4][1]),l.graphics.lineTo(d[5][0],d[5][1]),l.graphics.lineTo(d[6][0],d[6][1]),l.graphics.lineTo(d[0][0],d[0][1]),this._container.addChild(l)},t.circle=function(e,t,i,n,s,a){var r=new createjs.Shape;r.graphics.setStrokeStyle(a),r.graphics.beginStroke(s),1==n&&r.graphics.beginFill(s),r.graphics.drawCircle(e,t,i),this._container.addChild(r)},t.clear=function(e){osweb.runner._stage.removeChild(this._container),this._container.removeAllChildren()},t.close_display=function(e){osweb.debug.addMessage(osweb.constants.MESSAGE_007+"canvas.close_display().")},t.copy=function(e){osweb.debug.addMessage(osweb.constants.MESSAGE_007+"canvas.copy().")},t.ellipse=function(e,t,i,n,s,a,r){var o=new createjs.Shape;o.graphics.setStrokeStyle(r),o.graphics.beginStroke(a),1==s&&o.graphics.beginFill(a),o.graphics.drawEllipse(e,t,i,n),this._container.addChild(o)},t.fixdot=function(e,t,i,n){i="undefined"==typeof i?"white":i,n="undefined"==typeof n?"default":n,"undefined"==typeof e&&(e=this.uniform_coordinates===!0?0:this._width/2),"undefined"==typeof t&&(t=this.uniform_coordinates===!0?0:this._height/2);var s=4,a=2;n.indexOf("large")!==-1?s=16:n.indexOf("medium")!==-1||"default"===n?s=8:n.indexOf("small")!==-1?s=4:osweb.debug.addError("Unknown style: "+n),n.indexOf("open")!==-1||"default"===n?(this.ellipse(e-s,t-s,2*s,2*s,1,i,1),this.ellipse(e-a,t-a,2*a,2*a,1,"black",1)):n.indexOf("filled")!==-1?this.ellipse(e-s,t-s,2*s,2*s,1,i,1):n.indexOf("cross")!==-1?(this.line(e,t-s,e,t+s),this.line(e-s,t,e+s,t)):osweb.debug.addError("Unknown style: "+n)},t.gabor=function(e,t,i,n,s,a,r,o,h,c,d){osweb.debug.addMessage(osweb.constants.MESSAGE_007+"canvas.gabor().")},t.height=function(){return this._heigth()},t.image=function(e,t,i,n,s){var a=new createjs.Bitmap;a.image=e.data,a.scaleX=s,a.scaleY=s,a.snapToPixel=!0,a.x=i-a.image.width*s/2,a.y=n-a.image.height*s/2,this._container.addChild(a)},t.init_display=function(e){this._height=e.vars.height,this._width=e.vars.width,osweb.runner._canvas.height=e.vars.height,osweb.runner._canvas.width=e.vars.width,osweb.runner._canvas.style.background=e.vars.background,osweb.runner._canvas.style.cursor="none",osweb.runner._canvas.focus()},t.line=function(e,t,i,n,s,a){var r=new createjs.Shape;r.graphics.setStrokeStyle(a),r.graphics.beginStroke(s),r.graphics.moveTo(e,t),r.graphics.lineTo(i,n),this._container.addChild(r)},t.noise_patch=function(e,t,i,n,s,a,r,o){osweb.debug.addMessage(osweb.constants.MESSAGE_007+"canvas.noise_patch().")},t.polygon=function(e){osweb.debug.addMessage(osweb.constants.MESSAGE_007+"canvas.polygon().")},t.prepare=function(){},t.rect=function(e,t,i,n,s,a,r){var o=new createjs.Shape;o.graphics.setStrokeStyle(r),o.graphics.beginStroke(a),1==s&&o.graphics.beginFill(a),o.graphics.rect(e,t,i,n),this._container.addChild(o)},t.set_font=function(e,t,i,n,s){var a=n===!0?"bold ":"",r=i===!0?"italic ":"",o=s===!0?"underline ":"";this._font_string=a+r+o+t+"px "+e},t.show=function(){return osweb.runner._stage.addChild(this._container),osweb.runner._stage.update(),null!=this.experiment?this.experiment.clock.time():null},t.size=function(){var e={width:this._width,height:this._height};return e},t.text=function(e,t,i,n,s,a){var r=new createjs.Text(e,this._font_string,s);r.x=i-r.getMeasuredWidth()/2,r.y=n-r.getMeasuredHeight()/2,this._container.addChild(r)},t.text_size=function(e,t,i){osweb.debug.addMessage(osweb.constants.MESSAGE_007+"canvas.text_size().")},osweb.canvas=e}();
!function(){function n(n){this._startTime=this._now(),this.experiment=n}var t=n.prototype;t.experiment=null,t._now=function(){return window.performance.now?Math.round(window.performance.now()):window.performance.webkitNow?Math.round(window.performance.webkitNow()):(new Date).getTime()},t.initialize=function(){this._startTime=this._now()},t.sleep=function(n){null!==this.experiment&&osweb.events._run(this,n,osweb.constants.RESPONSE_DURATION,null)},t.time=function(){return this._startTime!==-1?this._now()-this._startTime:0},osweb.clock=n}();
!function(){function e(e,t,s){this.experiment=e,this.keylist="undefined"==typeof s?[]:s,this.timeout="undefined"==typeof t?null:t}var t=e.prototype;t.experiment=null,t.keylist=[],t.timeout=null,t.SYNONIEM_MAP=[[" ","space","SPACE"],['"',"quotedbl","QUOTEDBL"],["!","exclaim","EXCLAIM"],["#","hash","HASH"],["$","dollar","DOLLAR"],["&","ampersand","AMPERSAND"],["'","quote","QUOTE"],["(","leftbracket","leftparen","LEFTBRACKET","LEFTPAREN"],[")","rightbracket","rightparen","RIGHTBRACKET","RIGHTPAREN"],["*","asteriks","ASTERISK"],["+","plus","PLUS"],[",","comma","COMMA"],["-","minus","MINUS"],[".","period","PERIOD"],["/","slash","SLASH"],["1"],["2"],["3"],["4"],["5"],["6"],["7"],["8"],["9"],["0"],["=","equals","EQUALS"],[":","colon","COLON"],[";","semicolon","SEMICOLON"],["<","less","LESS"],[">","greater","GREATER"],["?","question","QUESTION"],["@","at","AT"],["a","A"],["b","B"],["c","C"],["d","D"],["e","E"],["f","F"],["g","G"],["h","H"],["i","I"],["j","J"],["k","K"],["l","L"],["m","M"],["n","N"],["o","O"],["p","P"],["q","Q"],["r","R"],["s","S"],["t","T"],["u","U"],["v","V"],["w","W"],["x","X"],["y","Y"],["z","Z"],["kp0","KP0"],["kp1","KP1"],["kp2","KP2"],["kp3","KP3"],["kp4","KP4"],["kp5","KP5"],["kp6","KP6"],["kp7","KP7"],["kp8","KP8"],["kp9","KP9"],["kp_divide","KP_DIVIDE"],["kp_enter","KP_ENTER"],["kp_equals","KP_EQUALS"],["kp_minus","KP_MINUS"],["kp_multiply","KP_MULTIPLY"],["kp_period","KP_PERIOD"],["kp_plus","KP_PLUS"],["\\","backslash","BACKSLASH"],["^","power","caret","POWER","CARET"],["_","underscore","UNDERSCORE"],["`","backquote","BACKQUOTE"],["f1","F1","help","HELP"],["f2","F2"],["f3","F3"],["f4","F4"],["f5","F5"],["f6","F6"],["f7","F7"],["f8","F8"],["f9","F9"],["f10","F10"],["f11","F11"],["f12","F12"],["f13","F13"],["f14","F14"],["f15","F15"],["up","UP"],["down","DOWN"],["left","LEFT"],["right","RIGHT"],["menu","MENU"],["lshift","left shift","LSHIFT","LEFT SHIFT"],["lctrl","left ctrl","LCTRL","LEFT CTRL"],["lalt","left alt","LALT","LEFT ALT"],["rshift","right shift","RSHIFT","RIGHT SHIFT"],["rctrl","right ctrl","RCTRL","RIGHT CTRL"],["ralt","right alt","alt gr","RALT","RIGHT ALT","ALT GR"],["page up","pageup","PAGE UP","PAGEUP"],["page down","pagedown","PAGE DOWN","PAGEDOWN"],["pause","PAUSE"],["scroll lock","scrollock","SCROLL LOCK","SCROLLOCK"],["caps lock","capslock","CAPS LOCK","CAPSLOCK"],["nummlock","NUMMLOCK"],["clear","CLEAR"],["enter","ENTER","return","RETURN"],["tab","TAB"],["backspace","BACKSPACE"],["end","END"],["home","HOME"],["insert","INSERT"],["delete","DELETE"],["sysreq","sys req","SYSREQ","SYS REQ"],["break","BREAK"],["escape","ESCAPE"],["print","PRINT"],["print screen","PRINT SCREEN"],["lmeta","left meta","LMETA","LEFT META",,"lsuper","LSUPER","left super","LEFT SUPER"],["rmeta","right meta","RMETA","RIGHT META","rsuper","right super","RSUPER","RIGHT SUPER"],["euro","EURO"],["first","FIRST"],["last","LAST"],["kp enter","KP ENTER"],["kp equals","KP EQUALS"],["mode","MODE"],["unknown","UNKNOWN"],["unknown key","UNKNOWN KEY"]],t._get_default_from_synoniem=function(e){for(var t=[],s=0;s<e.length;s++){var n=this.synonyms(e[s]);t.push(n[0])}return t},t.default_config=function(){return{timeout:null,keylist:[]}},t.flush=function(){osweb.debug.addMessage(osweb.constants.MESSAGE_007+"keyboard.flush().")},t.get_key=function(e,t){this.keylist="undefined"==typeof t?this.keylist:t,this.timeout="undefined"==typeof e?this.timeout:e,null!=this.experiment&&osweb.events._run(this,this.timeout,osweb.constants.RESPONSE_KEYBOARD,this.keylist)},t.get_mods=function(){var e=[];return null!==osweb.events._keyboard_event&&(osweb.events._keyboard_event.shiftKey===!0&&e.push("shift"),osweb.events._keyboard_event.ctrlKey===!0&&e.push("ctrl"),osweb.events._keyboard_event.altKey===!0&&e.push("alt")),e},t.set_config=function(e,t){this.keylist=t,this.timeout=e},t.show_virtual_keyboard=function(e){if(e===!0)osweb.runner._canvas.setfocus();else{var t=document.createElement("input");document.body.appendChild(t),t.focus(),document.body.removeChild(t)}},t.synonyms=function(e){if("undefined"==typeof e)return null;for(var t=0;t<this.SYNONIEM_MAP.length;t++)for(var s=0;s<this.SYNONIEM_MAP[t].length;s++)if(this.SYNONIEM_MAP[t][s]==e)return this.SYNONIEM_MAP[t]},osweb.keyboard=e}();
!function(){function t(t,i){this._all_vars=null,this._header_written=!1,this._log=[],this._path="",this.experiment=t,this.experiment.vars.logfile=i}var i=t.prototype;i.experiment=null,i.all_vars=function(){return null===this._all_vars&&(this._all_vars=this.experiment.vars.inspect()),this._all_vars},i.close=function(){this._log.length>0&&(osweb.runner.data=this._log.join("")),this._log=[]},i.flush=function(){this._log=[]},i.open=function(t){this._header_written=!1,this._path=t,null!==this._log&&this.close()},i.write=function(t,i){i="undefined"==typeof i||i,i===!0?this._log.push(t+"\n"):this._log.push(t)},i.write_vars=function(t){t="undefined"==typeof t?null:t;var i,e=[];if(null==t&&(t=this.all_vars()),t.sort(),this._header_written===!1){for(var n=0;n<t.length;n++)e.push('"'+t[n]+'"');this.write(e.join()),this._header_written=!0}e=[];for(var n=0;n<t.length;n++)i=this.experiment.vars.get(t[n],"NA",!1),e.push('"'+i+'"');this.write(e.join())},osweb.log=t}();
!function(){function t(t,e,s,n){this.experiment=t,this.timeout="undefined"==typeof e?null:e,this.buttonlist="undefined"==typeof s?null:s,this.visible="undefined"!=typeof n&&n}var e=t.prototype;e.experiment=null,e.buttonlist=[],e.timeout=-1,e.visible=!1,e.SYNONIEM_MAP=[["1","left_button"],["2","middle_button"],["3","right_button"],["4","scroll_up"],["5","scroll_down"]],e._get_default_from_synoniem=function(t){for(var e=[],s=0;s<t.length;s++){var n=this.synonyms(t[s]);e.push(n[0])}return e},e.default_config=function(){return{timeout:null,buttonlist:null,visible:!1}},e.flush=function(){osweb.debug.addMessage(osweb.constants.MESSAGE_007+"mouse.flush().")},e.get_click=function(t,e,s){this.timeout="undefined"==typeof t?this.timeout:t,this.buttonlist="undefined"==typeof e?this.buttonlist:e,this.visible="undefined"==typeof s?this.visible:s,null!=this.experiment&&(this.show_cursor(this.visible),osweb.events._run(this,this.timeout,osweb.constants.RESPONSE_MOUSE,this.buttonlist))},e.get_pos=function(){return null!==osweb.events._mouse_move?{rtTime:osweb.events._mouse_move.rtTime,x:osweb.events._mouse_move.event.clientX,y:osweb.events._mouse_move.event.clientY}:{rtTime:-1,x:-1,y:-1}},e.get_pressed=function(){return null!==osweb.events._mouse_press?{buttons:[0===osweb.events._mouse_press.button,1===osweb.events._mouse_press.button,2===osweb.events._mouse_press.button]}:{buttons:[null,null,null]}},e.set_config=function(t,e,s){this.timeout=t,this.buttonlist=e,this.visible=s},e.set_pos=function(t){osweb.debug.addMessage(osweb.constants.MESSAGE_007+"mouse.set_pos().")},e.show_cursor=function(t){this.visible=t,t===!0?osweb.runner._stage.canvas.style.cursor="default":osweb.runner._stage.canvas.style.cursor="none"},e.synonyms=function(t){if("undefined"==typeof t)return null;for(var e=0;e<this.SYNONIEM_MAP.length;e++)for(var s=0;s<this.SYNONIEM_MAP[e].length;s++)if(this.SYNONIEM_MAP[e][s]==t)return this.SYNONIEM_MAP[e]},osweb.mouse=t}();
!function(){function e(e,n,t,i,d,s,o,f){this.experiment=e,this.block="undefined"!=typeof f&&f,this.duration="undefined"==typeof s?"sound":s,this.fade="undefined"==typeof o?0:o,this.pan="undefined"==typeof d?0:d,this.pitch="undefined"==typeof i?1:i,this.src="undefined"==typeof n?"":n,this.volume="undefined"==typeof t?1:t,null!==n&&(this._instance=n.data,this._instance.on("ended",osweb.events._audioEnded.bind(this)))}var n=e.prototype;n.duration="sound",n.block=!1,n.fade="0",n.pan="0",n.pitch="1",n.src=null,n.volume=1,n.play=function(e,n,t,i,d,s){this.block="undefined"==typeof s?this.block:s,this.duration="undefined"==typeof i?this.duration:i,this.fade="undefined"==typeof d?this.fade:d,this.pan="undefined"==typeof t?this.pan:t,this.pitch="undefined"==typeof n?this.pitch:n,this.volume="undefined"==typeof e?this.volume:e,this._instance.volume=this.volume,this._instance.play()},n.wait=function(){osweb.events._run(this,-1,osweb.constants.RESPONSE_SOUND,[])},osweb.sampler_backend=e}();
!function(){function i(i,t){this.experiment=i,this._playing=!1,this._script=null,null!==t&&(this._ctx=osweb.runner._canvas.getContext("2d"),this._video=t.data,this._video.on("ended",osweb.events._videoEnded.bind(this)),this._video.on("play",osweb.events._videoPlay.bind(this)))}var t=i.prototype;t.audio=!0,t.duration="keypress",t.full_screen=!1,t._update_video_canvas=function(){this._playing===!0&&(this._ctx.drawImage(this._video,0,0),null!==this._script&&this._event_handler_always===!0&&osweb.parser._run(null,this._script))},t.play=function(){if(this._video.play(),this._video.volume=this.audio===!0?1:0,1==this.full_screen){var i=this.experiment._canvas._width/this._video.videoWidth,t=this.experiment._canvas._height/this._video.videoHeight;this._ctx.scale(i,t)}this._ctx.drawImage(this._video,0,0),this._playing=!0},t.stop=function(){this._video.pause(),this._playing=!1},t.wait=function(){osweb.events._run(this,-1,osweb.constants.RESPONSE_VIDEO,[])},osweb.video_backend=i}();
!function(){function e(){throw"The class debug cannot be instantiated!"}e.enabled=!1,e.error=!1,e.messageLog=new Array,e._initialize=function(){this.debug=osweb.runner.debug,this.messageLog=[]},e._finalize=function(){this.enabled===!0&&console.log(this.messageLog),this.messageLog=[]},e.addError=function(e){throw this.error=!0,console.log(e),console.log(osweb.constants.ERROR_001),new Error(e)},e.addMessage=function(o){this.messageLog.push(o),e.enabled===!0&&console.log(o)},e.msg=function(e){this.addMesage(e)},osweb.debug=e}();
!function(){function e(){throw"The class file_pool_store cannot be instantiated!"}e._data=[],e._items=[],e.add_from_local_source=function(e){var t=e.filename.substr(e.filename.lastIndexOf(".")+1);if("jpg"==t||"png"==t){var n=new Image;n.src=e.toDataURL();var o={data:n,folder:e.filename,name:e.filename.replace(/^.*[\\\/]/,""),size:e.length,type:"image"}}else if("wav"==t||"ogg"==t){var a=new Audio;a.src=e.toDataURL();var o={data:a,folder:e.filename,name:e.filename.replace(/^.*[\\\/]/,""),size:e.length,type:"sound"}}else if("ogv"==t){var a=document.createElement("VIDEO");a.src=e.toDataURL();var o={data:a,folder:e.filename,name:e.filename.replace(/^.*[\\\/]/,""),size:e.length,type:"video"}}this._items.push(o),this[o.name]=o},e.add_from_server_source=function(e,t){if(console.log("--"),console.log(t),t.length>0){this._queue=new createjs.LoadQueue((!1)),createjs.Sound.registerPlugins([createjs.HTMLAudioPlugin]),this._queue.installPlugin(createjs.Sound),this._queue.on("fileload",this._file_complete,this),this._queue.on("complete",this._load_complete,this);for(var n=0;n<t.length;n++){var o=/(?:\.([^.]+))?$/,a=o.exec(t[n]);console.log(a),".ogg"==a[0]?(console.log("sound"),this._queue.loadFile({id:t[n],src:e+t[n],type:createjs.AbstractLoader.SOUND})):this._queue.loadFile({id:t[n],src:e+t[n],type:createjs.AbstractLoader.IMAGE})}this._queue.load()}else osweb.runner._buildExperiment()},e._file_complete=function(e){osweb.runner._updateIntroScreen(osweb.constants.MESSAGE_007);var t={data:e.result,folder:e.item.id,name:e.item.id.replace(/^.*[\\\/]/,""),size:e.item.id,type:"image"};this._items.push(t),this[t.name]=t},e._load_complete=function(){osweb.runner._updateIntroScreen(osweb.constants.MESSAGE_006),console.log(this._items),osweb.runner._buildExperiment()},e.add=function(e,t){},e.fallback_folder=function(){},e.files=function(){},e.folder=function(){},e.folders=function(){},e.in_folder=function(e){},e.rename=function(e,t){},e.size=function(){},osweb.pool=e}();
!function(){function n(){throw"The class functions cannot be instantiated!"}n._initialize=function(){window.print=this.print,window.randint=this.randint,window.canvas=this.canvas,window.copy_sketchpad=this.copy_sketchpad,window.keyboard=this.keyboard,window.mouse=this.mouse,window.pause=this.pause,window.reset_feedback=this.reset_feedback,window.sampler=this.sampler,window.set_response=this.set_response,window.set_subject_nr=this.set_subject_nr,window.sometimes=this.sometimes,window.synth=this.synth,window.xy_circle=this.xy_circle,window.xy_distance=this.xy_distance,window.xy_from_polar=this.xy_from_polar,window.xy_grid=this.xy_grid,window.xy_random=this.xy_random,window.xy_to_polar=this.xy_to_polar},n.print=function(n){console.log("print output:"+n)},n.randint=function(n,o){var t=o-n,i=Math.floor(Math.random()*t);return i+n},n.canvas=function(n,o){console.log('warning: function "canvas" not available yet.')},n.copy_sketchpad=function(n){console.log('warning: function "copy_sketchpad" not available yet.')},n.keyboard=function(n){console.log('warning: function "keyboard" not available yet.')},n.mouse=function(n){console.log('warning: function "mouse" not available yet.')},n.pause=function(){console.log('warning: function "pause" not available yet.')},n.reset_feedback=function(){console.log('warning: function "reset_feedback" not available yet.')},n.sampler=function(n,o){console.log('warning: function "sampler" not available yet.')},n.set_response=function(n,o,t){console.log('warning: function "set_response" not available yet.')},n.set_subject_nr=function(n){console.log('warning: function "set_subject_nr" not available yet.')},n.sometimes=function(n){console.log('warning: function "sometimes" not available yet.')},n.synth=function(n,o,t,i,e){console.log('warning: function "synth" not available yet.')},n.xy_circle=function(n,o,t,i){console.log('warning: function "xy_circle" not available yet.')},n.xy_distance=function(n,o,t,i){console.log('warning: function "xy_distance" not available yet.')},n.xy_from_polar=function(n,o,t){console.log('warning: function "xy_from_polar" not available yet.')},n.xy_grid=function(n,o,t){console.log('warning: function "xy_grid" not available yet.')},n.xy_random=function(n,o,t,i,e){console.log('warning: function "xy_random" not available yet.')},n.xy_to_polar=function(n,o,t){console.log('warning: function "xy_to_polar" not available yet.')},osweb.functions=n}();
!function(){function t(t,n){this.experiment=t,this.interval="undefined"==typeof n?1:n}var n=t.prototype;n.experiment=null,n.interval=-1,n.beat=function(){},n.run=function(){},n.start=function(){},osweb.heartbeat=t}();
!function(){function t(){throw"The class item_stack cannot be instantiated!"}t._items=[],t.clear=function(){this._items=[]},t.push=function(t,i){var s={item:t,phase:i};this._items.push(s)},t.pop=function(){return this._items.pop()},osweb.item_stack=t}();
!function(){function e(){throw"The class item_store cannot be instantiated!"}e._experiment=null,e._items={},e.execute=function(e,t){this.prepare(e),this.run(e,t)},e.items=function(){var e=[];for(var t in this._items)e.push([t,this._items[t]]);return e},e.keys=function(){var e=[];for(var t in this._items)e.push(t);return e},e["new"]=function(e,t,s){1==osweb.isClass(e)?this._items[t]=osweb.newItemClass(e,this._experiment,t,s):osweb.debug.addError(osweb.constants.ERROR_009+e)},e.prepare=function(e,t){osweb.item_stack.push(e,"prepare"),this._items[e]._parent=t,this._items[e].prepare()},e.run=function(e,t){osweb.events._current_item=this._items[e],osweb.events._current_item._parent=t,osweb.item_stack.push(e,"run"),this._items[e].run()},e.valid_name=function(e,t){if(t="undefined"==typeof t?null:t,null==t)var s="new_"+e;else var s=this._experiment.syntax.sanitize(t,!0,!1);for(var i=1,n=s;1==this._items.hasOwnProperty(n);)n=s+"_"+String(i),i++;return n},e.values=function(){var e=[];for(var t in this._items)e.push(this._items[t]);return e},osweb.item_store=e}();
!function(){function t(){throw"The class prng cannot be instantiated!"}t._previous=0,t._prng=uheprng(),t._seed="0",t._initialize=function(){this._prng.initState(),this._prng.hashString(this._seed)},t._getNext=function(){return this._previous=this._prng(1e15)/1e15,this._previous},t._getPrevious=function(){return this._previous},t._getSeed=function(){return this._seed},t._random=function(t,i){var e=1/(i-t+1);return this._previous=this._prng(1e15)/1e15,this._previous=t+Math.floor(this._previous/e),this._previous},t._reset=function(){this._seed="0",this._prng.initState(),this._prng.hashString(String(this._seed))},t._setSeed=function(t){this._seed=String(t),this._prng.initState(),this._prng.hashString(this._seed)},osweb.prng=t}();
!function(){function python_workspace(){throw"The class python_workspace cannot be instantiated!"}python_workspace._eval=function(pBytecode){return"boolean"==typeof pBytecode?pBytecode:"string"==typeof pBytecode?(pBytecode=osweb.syntax.eval_text(pBytecode),eval(osweb.syntax.remove_quotes(pBytecode))):(console.log(">python script - not supported yet"),eval(pBytecode))},python_workspace.init_globals=function(){},osweb.python_workspace=python_workspace}();
!function(){function n(){throw"The class syntax cannot be instantiated!"}n._convertPython=function(n){return n},n.isNumber=function(n){return Number(n)==n},n.isFloat=function(n){return Number(n)===n&&n%1!==0},n.remove_quotes=function(n){return'""'==n?"":'"'==n[0]&&'"'==n[n.length-1]?n.slice(1,n.length-1):n},n.compile_cond=function(n,e){return e="undefined"==typeof e||e,"always"==n||"never"!=n&&("="==n.substring(0,1)?console.log("python script is not supported yet"):n=n.replace(/[^(!=)][=]/g,"=="),n)},n.eval_text=function(n,e,t,r){for(var i=n,o=i.search(/[^[\]]+(?=])/g);o!=-1;){var s=i.slice(o,i.indexOf("]"));if("undefined"==typeof e)var u=osweb.runner.experiment.vars[s];else var u=e[s];i=i.replace("["+s+"]",u),o=i.search(/[^[\]]+(?=])/g)}return i},n.parse_cmd=function(n){var e=this.split(n);return e.shift(),e.shift(),e},n.sanitize=function(n,e,t){return n},n.split=function(n){var e=n.match(/(?:[^\s"]+|"[^"]*")+/g);return null!=e?e:[]},osweb.syntax=n}();
!function(){function t(t,n){this._item=t,this._parent=n}var n=t.prototype;n._item=null,n._parent=null,n.get=function(t,n,e,i){n="undefined"==typeof n?null:n,e="undefined"==typeof e||e,i="undefined"==typeof i?null:i;var s=null;return t in this&&(s="string"==typeof this[t]?osweb.syntax.eval_text(this[t]):this[t]),s},n.inspect=function(){var t=[];for(var n in this)t.push(n);return t=t.slice(2,t.length-3)},n.set=function(t,n){this[t]=n},osweb.var_store=t}();
!function(){function e(e,t,s){this._get_lock=null,this._parent=null,this._status=osweb.constants.STATUS_NONE,this.count=0,this.debug=osweb.debug.enabled,this.experiment=null==e?this:e,this.name=t,this.vars=this.vars?this.vars:new osweb.var_store(this,null),this.clock=this.experiment._clock,this.log=this.experiment._log,this.python_workspace=this.experiment._python_workspace,this.syntax=this.experiment._syntax,this.from_string(s)}var t=e.prototype;t.clock=null,t.comments=null,t.count=0,t.debug=!1,t.experiment=null,t.log=null,t.name="",t.syntax=null,t.python_workspace=null,t.vars=null,t.variables=null,t.dummy=function(){},t.resolution=function(){},t.set_response=function(e,t,s){console.log('warning: method "item.set_response" not implemented yet.')},t.sleep=function(e){this.clock.sleep(e)},t.time=function(){return this.clock.time()},t.from_string=function(e){if(osweb.debug.addMessage(""),this.variables={},this.reset(),this.comments=[],this.reset(),null!=e)for(var t=e.split("\n"),s=0;s<t.length;s++)""!=t[s]&&0==this.parse_variable(t[s])&&this.parse_line(t[s])},t.parse_comment=function(e){return e=e.trim(),e.length>0&&"#"==e.charAt(0)?(this.comments.push(e.slice(1)),!0):e.length>1&&"/"==e.charAt(0)&&(this.comments.push(e.slice(2)),!0)},t.parse_keyword=function(e,t,s){},t.parse_line=function(e){},t.parse_variable=function(e){if(this.parse_comment(e))return!0;var t=osweb.syntax.split(e);if(!(null!=t&&t.length>0&&"set"==t[0]))return!1;if(3==t.length){var s=osweb.syntax.remove_quotes(t[2]);return s=osweb.syntax.isNumber(s)?Number(s):s,this.vars.set(t[1],s),!0}osweb.debug.addError("Error parsing variable definition: "+e)},t.reset=function(){},t.prepare=function(){this.experiment.vars.set("count_"+this.name,this.count),this.count++,this._status=osweb.constants.STATUS_INITIALIZE,osweb.debug.addMessage("prepare"+this.name),null!==this._parent&&"feedback"!==this.type&&this._parent.prepare_complete()},t.prepare_complete=function(){},t.set_item_onset=function(e){var t=null!=e?e:this.clock.time();this.experiment.vars.set("time_"+this.name,t)},t.run=function(){osweb.debug.addMessage("run"+this.name)},t.update=function(){},t.update_response=function(e){},t.complete=function(){null!==this._parent&&(osweb.events._current_item=this._parent,osweb.events._current_item.run())},osweb.item=e}();
!function(){function e(e,s,t){this.item_constructor(e,s,t),this._allowed_responses=null,this._duration=0,this._duration_func=null,this._keyboard=null,this._mouse=null,this._responsetype=osweb.constants.RESPONSE_NONE,this._timeout=-1}var s=osweb.extendClass(e,osweb.item);s.auto_response="a",s.process_feedback=!1,s.synonyms=null,s.auto_responser=function(){},s.auto_responser_mouse=function(){},s.prepare_allowed_responses=function(){if(null==this.vars.get("allowed_responses"))this._allowed_responses=null;else{var e=String(this.vars.allowed_responses).split(";");"keypress"==this.vars.duration?this._allowed_responses=this._keyboard._get_default_from_synoniem(e):"mouseclick"==this.vars.duration&&(this._allowed_responses=this._mouse._get_default_from_synoniem(e)),0==this._allowed_responses.length&&osweb.debug.addError(this.vars.get("allowed_responses")+" are not valid allowed responses in keyboard_response "+this.name)}},s.prepare_duration=function(){null!=this.vars.get("duration")&&("number"==typeof this.vars.duration?(this._duration=this.vars.duration,0==this._duration?this._responsetype=osweb.constants.RESPONSE_NONE:this._responsetype=osweb.constants.RESPONSE_DURATION):(this._duration=-1,"keypress"==this.vars.duration?(this.prepare_duration_keypress(),this._responsetype=osweb.constants.RESPONSE_KEYBOARD):"mouseclick"==this.vars.duration?(this.prepare_duration_mouseclick(),this._responsetype=osweb.constants.RESPONSE_MOUSE):"sound"==this.vars.duration?this._responsetype=osweb.constants.RESPONSE_SOUND:"video"==this.vars.duration&&(this._responsetype=osweb.constants.RESPONSE_VIDEO)))},s.prepare_duration_keypress=function(){if(this._keyboard=new osweb.keyboard(this.experiment),1==this.experiment.auto_response)this._duration_func=this.auto_responder;else{var e=this._timeout!=-1?this._timeout:this._duration;this._keyboard.set_config(e,this._allowed_responses)}},s.prepare_duration_mouseclick=function(e){if(this._mouse=new osweb.mouse(this.experiment),1==this.experiment.auto_response)this._duration_func=this.auto_responder_mouse;else{var s=this._timeout!=-1?this._timeout:this._duration;this._mouse.set_config(s,this._allowed_responses,!1)}},s.prepare_timeout=function(){null!=this.vars.get("timeout")&&("number"==typeof this.vars.timeout?this._timeout=this.vars.timeout:this._timeout=-1)},s.process_response_keypress=function(e){this.experiment._start_response_interval=this.sri,this.experiment._end_response_interval=e.rtTime,this.experiment.vars.response=this.syntax.sanitize(e.resp),this.synonyms=this._keyboard.synonyms(this.experiment.vars.response),this.response_bookkeeping()},s.process_response_mouseclick=function(e){this.experiment._start_response_interval=this.sri,this.experiment._end_response_interval=e.rtTime,this.experiment.vars.response=e.resp,this.synonyms=this._mouse.synonyms(this.experiment.vars.response),this.experiment.vars.cursor_x=e.event.clientX,this.experiment.vars.cursor_y=e.event.clientY,this.response_bookkeeping()},s.response_bookkeeping=function(){this.experiment.vars.set("response_time",this.experiment._end_response_interval-this.experiment._start_response_interval),this.experiment.vars.set("response_"+this.name,this.experiment.vars.get("response")),this.experiment.vars.set("response_time_"+this.name,this.experiment.vars.get("response_time")),this.experiment._start_response_interval=null,1==this.process_feedback&&(null!=this.vars.correct_response&&null!=this.synonyms?this.synonyms.indexOf(String(this.vars.get("correct_response")))!=-1?(this.experiment.vars.correct=1,this.experiment.vars.total_correct=this.experiment.vars.total_correct+1):this.experiment.vars.correct=0:this.experiment.vars.correct="undefined",this.experiment.vars.total_response_time=this.experiment.vars.total_response_time+this.experiment.vars.response_time,this.experiment.vars.total_responses=this.experiment.vars.total_responses+1,this.experiment.vars.accuracy=Math.round(100*this.experiment.vars.total_correct/this.experiment.vars.total_responses),this.experiment.vars.acc=this.experiment.vars.accuracy,this.experiment.vars.average_response_time=Math.round(this.experiment.vars.total_response_time/this.experiment.vars.total_responses),this.experiment.vars.avg_rt=this.experiment.vars.average_response_time,this.experiment.vars.set("correct_"+this.name,this.vars.correct))},s.process_response=function(){switch(this._responsetype){case osweb.constants.RESPONSE_NONE:this._status=osweb.constants.STATUS_FINALIZE,this.complete();break;case osweb.constants.RESPONSE_DURATION:this.sleep_for_duration();break;case osweb.constants.RESPONSE_KEYBOARD:this._keyboard.get_key();break;case osweb.constants.RESPONSE_MOUSE:this._mouse.get_click();break;case osweb.constants.RESPONSE_SOUND:this._sampler.wait();break;case osweb.constants.RESPONSE_VIDEO:this._video.wait()}},s.set_sri=function(e){1==e&&(this.sri=self.vars.get("time_"+this.name),this.experiment._start_response_interval=this.vars.get("time_"+this.name)),null==this.experiment._start_response_interval?this.sri=this.experiment.vars.get("time_"+this.name):this.sri=this.experiment._start_response_interval},s.sleep_for_duration=function(){this.sleep(this._duration)},s.prepare=function(){this.prepare_timeout(),this.prepare_allowed_responses(),this.prepare_duration(),this.item_prepare()},s.update_response=function(e){this._responsetype==osweb.constants.RESPONSE_KEYBOARD&&e.type==osweb.constants.RESPONSE_KEYBOARD?this.process_response_keypress(e):this._responsetype==osweb.constants.RESPONSE_MOUSE&&e.type==osweb.constants.RESPONSE_MOUSE&&this.process_response_mouseclick(e)},osweb.generic_response=osweb.promoteClass(e,"item")}();
!function(){function t(t,s,e,i,n,r,o,a,h,l,_,u){osweb.item_store._experiment=this,a="undefined"==typeof a?null:a,this._end_response_interval=null,this._start_response_interval=null,this._syntax=osweb.syntax,this._python_workspace=l?l:osweb.python_workspace,this.auto_response=!!o&&o,this.cleanup_functions=[],this.heartbeat_interval=u?u:1,this.items=osweb.item_store,this.output_channel=null,this.paused=!1,this.plugin_folder="plugins",this.pool=osweb.file_pool_store,this.resources=_?_:{},this.restart=!1,this.running=!1,this.vars=new osweb.var_store(this,null),this.vars.start="experiment",this.vars.title="My Experiment",this.vars.bidi="no",this.vars.round_decimals=2,this.vars.form_clicks="no",this.vars.uniform_coordinates="no",this.vars.sound_freq=48e3,this.vars.sound_sample_size=-16,this.vars.sound_channels=2,this.vars.sound_buf_size=1024,this.vars.canvas_backend="xpyriment",this.vars.width=1024,this.vars.height=768,this.vars.background="black",this.vars.foreground="white",this.vars.fullscreen=r?"yes":"no",this.vars.font_size=18,this.vars.font_family="mono",this.vars.font_italic="no",this.vars.font_bold="no",this.vars.font_underline="no",this.logfile=a,this.debug=osweb.debug.enabled,this._canvas=new osweb.canvas(this),this._clock=new osweb.clock(this),this._log=new osweb.log(this,this.logfile),window.clock=this._clock,window.log=this._log,this.item_constructor(t,s,e)}var s=osweb.extendClass(t,osweb.item);s.auto_response=!1,s.cleanup_functions=[],s.heartbeat_interval=1,s.items=null,s.output_channel=null,s.paused=!1,s.plugin_folder="",s.pool=null,s.resources=null,s.restart=!1,s.running=!1,s.item_prefix=function(){return""},s.reset_feedback=function(){this.vars.total_responses=0,this.vars.total_correct=0,this.vars.total_response_time=0,this.vars.avg_rt="undefined",this.vars.average_response_time="undefined",this.vars.accuracy="undefined",this.vars.acc="undefined"},s.set_subject=function(t){this.vars.subject_nr=t,t%2==0?this.vars.subject_parity="even":this.vars.subject_parity="odd"},s.read_definition=function(t){for(var s=t.shift(),e="";null!=s&&s.length>0&&"\t"==s.charAt(0);)e=e+s+"\n",s=t.shift();return e},s.from_string=function(t){if(osweb.debug.addMessage("building experiment"),null!=t){this._source=t.split("\n");for(var s=this._source.shift();null!=s;){var e=!0;try{var i=osweb.syntax.split(s)}catch(n){}if(null!=i&&i.length>0&&0==this.parse_variable(s)&&"define"==i[0]&&3==i.length){var r=i[1],o=osweb.syntax.sanitize(i[2]),a=this.read_definition(this._source);osweb.item_store["new"](r,o,a)}1==e&&(s=this._source.shift())}}},s.init_clock=function(){this._clock.initialize},s.init_display=function(){this._canvas.init_display(this),this._python_workspace.win=window},s.init_heartbeat=function(){this.heartbeat_interval<=0||"yes"==this.vars.fullscreen||null==this.output_channel?this.heartbeat=null:(this.heartbeat=new osweb.heartbeat(this,1),this.heartbeat.start())},s.init_log=function(){this._log.open(this.logfile)},s.init_random=function(){},s.init_sound=function(){},s.run=function(){switch(this.item_run(),this._status){case osweb.constants.STATUS_INITIALIZE:this._status=osweb.constants.STATUS_FINALIZE,this.vars.datetime=(new Date).toString(),this.vars.opensesame_version=osweb.VERSION_NUMBER,this.vars.opensesame_codename=osweb.VERSION_NAME,this.running=!0,this.init_random(),this.init_display(),this.init_clock(),this.init_sound(),this.init_log(),this.python_workspace.init_globals(),this.reset_feedback(),this.init_heartbeat(),osweb.debug.addMessage("experiment.run(): experiment started at "+(new Date).toUTCString()),null!=osweb.item_store._items[this.vars.start]?(osweb.item_stack.clear(),osweb.item_store.prepare(this.vars.start,this)):osweb.debug.addError("Could not find item "+self.vars.start+" , which is the entry point of the experiment");break;case osweb.constants.STATUS_FINALIZE:osweb.debug.addMessage("experiment.run(): experiment finished at "+(new Date).toUTCString()),this.end()}},s.end=function(){this.running=!1,this._log.close(),osweb.events._current_item=null,osweb.runner._canvas.style.cursor="default",osweb.runner._stage.update(),osweb.runner._finalize()},osweb.experiment=osweb.promoteClass(t,"item")}();
!function(){function e(e,r,s){this.item_constructor(e,r,s),this._prepare_run=!1,this._prepare_tree=null,this._run_tree=null}var r=osweb.extendClass(e,osweb.item);r.description="Executes Python code",r._compile=function(e){if(""==e)return null;var r=!1,s=filbert_loose.parse_dammit,t=!1;try{var i=e,n=s(i,{locations:r,ranges:t});return n}catch(_){return console.log("error"),console.log(_.toString()),null}},r.reset=function(){this._var_info=null,this.vars._prepare="",this.vars._run=""},r.from_string=function(e){if(this.reset(),null!=e)for(var r=!1,s=!1,t=e.split("\n"),i=0;i<t.length;i++){var n=osweb.syntax.split(t[i]);if(null!=n&&n.length>0)switch(n[0]){case"set":this.parse_variable(t[i]);break;case"__end__":r=!1,s=!1;break;case"___prepare__":s=!0;break;case"___run__":r=!0;break;default:1==r?this.vars._run=this.vars._run+t[i]+"\n":1==s&&(this.vars._prepare=this.vars._prepare+t[i]+"\n")}else 1==r?this.vars._run=this.vars._run+t[i]+"\n":1==s&&(this.vars._prepare=this.vars._prepare+t[i]+"\n")}},r.prepare=function(){this._prepare_tree=osweb.parser._prepare(this.vars._prepare),this._run_tree=osweb.parser._prepare(this.vars._run),null!=this._prepare_tree?(osweb.events._current_item=this,this._prepare_run=!0,osweb.parser._run(this,this._prepare_tree)):this.item_prepare()},r.run=function(){this.item_run(),this.set_item_onset(),null!=this._run_tree&&(this._prepare_run=!1,osweb.parser._run(this,this._run_tree))},r.complete=function(){1==osweb.parser._status?osweb.parser._process_node():this._prepare_run===!0?this.item_prepare():this.item_complete()},r.complete_script=function(){this.complete()},osweb.inline_script=osweb.promoteClass(e,"item")}();
!function(){function s(s,e,r){this.generic_response_constructor(s,e,r),this._flush="yes",this._keyboard=new osweb.keyboard(this.experiment)}var e=osweb.extendClass(s,osweb.generic_response);e.description="Collects keyboard responses",e.reset=function(){this.auto_response="space",this.process_feedback=!0,this.vars.allowed_responses=null,this.vars.correct_response=null,this.vars.duration="keypress",this.vars.flush="yes",this.vars.timeout="infinite"},e.prepare=function(){this._flush=this.vars.flush?this.vars.flush:"yes",this.generic_response_prepare()},e.run=function(){this.generic_response_run(),this.set_item_onset(),"yes"==this._flush&&this._keyboard.flush(),this.set_sri(),this.process_response()},osweb.keyboard_response=osweb.promoteClass(s,"generic_response")}();
!function(){function s(s,t,i){this.item_constructor(s,t,i),this._logvars=null}var t=osweb.extendClass(s,osweb.item);t.description="Logs experimental data",t.logvars=[],t.reset=function(){this._logvars=null,this.logvars=[],this.vars.auto_log="yes"},t.from_string=function(s){if(this.variables={},this.comments=[],this.reset(),null!=s)for(var t=s.split("\n"),i=0;i<t.length;i++)if(""!=t[i]&&0==this.parse_variable(t[i])){var e=osweb.syntax.split(t[i]);"log"==e[0]&&e.length>0&&this.logvars.push(e[1])}},t.run=function(){if(this.item_run(),this._status!=osweb.constants.STATUS_FINALIZE){if(this._status=osweb.constants.STATUS_FINALIZE,this.set_item_onset(),null==this._logvars)if("yes"==this.vars.auto_log)this._logvars=this.experiment._log.all_vars();else{this._logvars=[];for(variable in this.logvars)variable in this._logvars==0&&this._logvars.push(variable);this._logvars.sort()}this.experiment._log.write_vars(this._logvars),this.complete()}},t.complete=function(){this.item_complete()},osweb.logger=osweb.promoteClass(s,"item")}();
!function(){function s(s,e,t){this.item_constructor(s,e,t),this._break_if="",this._cycles=[],this._index=-1,this._keyboard=null}var e=osweb.extendClass(s,osweb.item);e.description="Repeatedly runs another item",e.matrix=null,e.reset=function(){this.matrix={},this.vars.cycles=1,this.vars.repeat=1,this.vars.skip=0,this.vars.offset="no",this.vars.order="random",this.vars.item="",this.vars.break_if="never"},e.from_string=function(s){if(this.comments=[],this.variables={},this.reset(),null!=s)for(var e=s.split("\n"),t=0;t<e.length;t++)if(""!=e[t]&&0==this.parse_variable(e[t])){var i=osweb.syntax.split(e[t]);if("run"==i[0]&&i.length>1)this.vars.item=i[1];else if("setcycle"==i[0]&&i.length>3){var r=i[1],a=i[2],h=osweb.syntax.remove_quotes(i[3]);h=osweb.syntax.isNumber(h)?Number(h):h,"="==h[0]&&(h=osweb.parser._prepare(h.slice(1)),null!==h&&(h=h.body[0])),void 0==this.matrix[r]&&(this.matrix[r]={}),this.matrix[r][a]=h}}},e.shuffle=function(s){var e,t,i;for(e=1;e<s.length;e++)t=Math.floor(Math.random()*(1+e)),t!=e&&(i=s[e],s[e]=s[t],s[t]=i)},e.apply_cycle=function(s){if(s in this.matrix)for(var e in this.matrix[s]){var t=this.matrix[s][e];if("object"==typeof t)try{t=osweb.parser._runstatement(t)}catch(i){osweb.debug.addError("Failed to evaluate "+t+" in loop item "+this.name)}this.experiment.vars.set(e,t)}},e.prepare=function(){""!=this.vars.break_if&&"never"!=this.vars.break_if?this._break_if=this.syntax.compile_cond(this.vars.break_if):this._break_if=null,this._cycles=[],this._index=0;for(var s=Math.floor(this.vars.repeat),e=0;e<s;e++)for(var t=0;t<this.vars.cycles;t++)this._cycles.push(t);var i=this.vars.repeat-s;if(i>0)for(var r=Array.apply(null,{length:this.vars.cycles}).map(Number.call,Number),a=Math.floor(this.vars.cycles*i),t=0;t<a;t++){var h=Math.floor(Math.random()*r.length);this._cycles.push(h),r.splice(h,1)}if("random"==this.vars.order)this.shuffle(this._cycles);else if(this._cycles.length<this.vars.skip)osweb.debug.addError("The value of skip is too high in loop item "+this.name+". You cannot skip more cycles than there are.");else if("yes"==this.vars.offset){var o=this._cycles.slice(0,this.vars.skip);this._cycles=this._cycles.slice(this.vars.skip),this._cycles=this._cycles.concat(o)}else this._cycles=this._cycles.slice(this.vars.skip);this._keyboard=new osweb.keyboard(this.experiment),"undefined"===this.experiment.items._items[this.vars.item]&&osweb.debug.addError("Could not find item "+this.vars.item+", which is called by loop item "+this.name),this.item_prepare(),this.set_item_onset()},e.run=function(){if(this.item_run(),this._cycles.length>0){var s=!1;if(this._index=this._cycles.shift(),this.apply_cycle(this._index),null!=this._break_if){this.python_workspace["this"]=this;var e=osweb.syntax.eval_text(this._break_if);1==this.python_workspace._eval(e)&&(s=!0)}0==s?(this.experiment.vars.repeat_cycle=0,osweb.item_store.prepare(this.vars.item,this)):this.complete()}else this.complete()},e.complete=function(){1==this.experiment.vars.repeat_cycle?(osweb.debug.msg("repeating cycle "+this._index),this._cycles.push(this._index),"random"==this.vars.order&&this.shuffle(this._cycles)):(this._status=osweb.constants.STATUS_FINALIZE,this.item_complete())},osweb.loop=osweb.promoteClass(s,"item")}();
!function(){function s(s,e,o){this.generic_response_constructor(s,e,o),this._flush="yes",this._mouse=new osweb.mouse(this.experiment)}var e=osweb.extendClass(s,osweb.generic_response);e.description="Collects mouse responses",e.resp_codes={},e.reset=function(){this.auto_response=1,this.process_feedback=!0,this.resp_codes={},this.resp_codes[0]="timeout",this.resp_codes[1]="left_button",this.resp_codes[2]="middle_button",this.resp_codes[3]="right_button",this.resp_codes[4]="scroll_up",this.resp_codes[5]="scroll_down",this.vars.allowed_responses=null,this.vars.correct_response=null,this.vars.duration="mouseclick",this.vars.flush="yes",this.vars.show_cursor="yes",this.vars.timeout="infinite"},e.prepare=function(){this._flush=this.vars.flush?this.vars.flush:"yes",this.generic_response_prepare()},e.run=function(){this.generic_response_run(),this.set_item_onset(),"yes"==this.vars.show_cursor&&this._mouse.show_cursor(!0),"yes"==this._flush&&this._mouse.flush(),this.set_sri(),this.process_response()},e.complete=function(){this._mouse.show_cursor(!1),this.generic_response_complete()},osweb.mouse_response=osweb.promoteClass(s,"generic_response")}();
!function(){function s(s,e,t){this.generic_response_constructor(s,e,t),this._sample=null,this._sampler=null}var e=osweb.extendClass(s,osweb.generic_response);e.block=!1,e.description="Plays a sound file in .wav or .ogg format",e.reset=function(){this.block=!1,this.vars.sample="",this.vars.pan=0,this.vars.pitch=1,this.vars.fade_in=0,this.vars.stop_after=0,this.vars.volume=1,this.vars.duration="sound"},e.prepare=function(){""!=this.vars.sample&&(this._sample=osweb.pool[this.syntax.eval_text(this.vars.sample)],this._sampler=new osweb.sampler_backend(this.experiment,this._sample),this._sampler.volume=this.vars.volume),this.generic_response_prepare()},e.run=function(){this.set_item_onset(),this.set_sri(),this._sampler.play(),this.process_response()},osweb.sampler=osweb.promoteClass(s,"generic_response")}();
!function(){function e(e,t,s){this.item_constructor(e,t,s),this._index=-1,this._index_prepare=-1,this._items=null,this._keyboard=null}var t=osweb.extendClass(e,osweb.item);t.description="Runs a number of items in sequence",t.flush_keyboard="yes",t.items=null,t.reset=function(){this.items=[],this.vars.flush_keyboard="yes"},t.from_string=function(e){if(this.variables={},this.comments=[],this.reset(),null!=e)for(var t=e.split("\n"),s=0;s<t.length;s++)if(""!=t[s]&&0==this.parse_variable(t[s])){var i=osweb.syntax.split(t[s]);if(i.length>0&&"run"==i[0]){var n=i[1],h="always";i.length>2&&(h=i[2]),this.items.push({item:n,cond:h})}}},t.prepare=function(){this.item_prepare(),"yes"==this.vars.flush_keyboard?this._keyboard=new osweb.keyboard(this.experiment):this._keyboard=null,this._index=0,this._items=[],this.prepare_complete()},t.prepare_complete=function(){this._index<this.items.length?this.items[this._index].item in osweb.item_store._items==!1?osweb.debug.addError("Could not find item "+this.items[this._index].item.name+" which is called by sequence item "+this.name):(this._index++,this._items.push({item:this.items[this._index-1].item,cond:osweb.syntax.compile_cond(this.items[this._index-1].cond)}),osweb.item_store.prepare(this.items[this._index-1].item,this)):(this._index=0,osweb.item_stack.pop(),osweb.item_store.run(this.name,this._parent))},t.run=function(){this.item_run(),this._index<this._items.length?(0==this._index&&"yes"==this.vars.flush_keyboard&&this._keyboard.flush(),this._index++,osweb.python_workspace.self=this,1==osweb.python_workspace._eval(this._items[this._index-1].cond)?osweb.item_store.run(this._items[this._index-1].item,this):this.run()):this.complete()},t.complete=function(){this._status=osweb.constants.STATUS_FINALIZE,this.item_complete()},osweb.sequence=osweb.promoteClass(e,"item")}();
!function(){function e(e,s,n){this.canvas=new osweb.canvas(e,(!1)),this.elements=[],this.generic_response_constructor(e,s,n)}var s=osweb.extendClass(e,osweb.generic_response);s.canvas=null,s.elements=[],s._compare=function(e,s){return e.z_index()<s.z_index()?1:e.z_index()>s.z_index()?-1:0},s.reset=function(){this.elements=[],this.vars.duration="keypress"},s.from_string=function(e){if(this.variables={},this.comments=[],this.reset(),null!=e){for(var s=e.split("\n"),n=0;n<s.length;n++)if(""!=s[n]&&0==this.parse_variable(s[n])){var t=osweb.syntax.split(s[n]);if(t.length>0&&"draw"==t[0]&&1==osweb.isClass(t[1])){var i=osweb.newElementClass(t[1],this,s[n]);this.elements.push(i)}}this.elements.sort(this._compare)}},s.prepare=function(){for(var e=0;e<this.elements.length;e++)1==this.elements[e].is_shown()&&this.elements[e].draw();this.generic_response_prepare()},s.run=function(){this.generic_response_run(),this.set_item_onset(this.canvas.show()),this.set_sri(!1),this.process_response()},s.complete=function(){this.canvas.clear(),this.generic_response_complete()},osweb.sketchpad=osweb.promoteClass(e,"generic_response")}();
!function(){function e(e,t,s){this.sketchpad_constructor(e,t,s)}var t=osweb.extendClass(e,osweb.sketchpad);t.description="Provides feedback to the participant",t.reset=function(){this.sketchpad_reset(),this.vars.reset_variables="yes"},t.prepare=function(){this._parent.prepare_complete()},t.run=function(){this.sketchpad_prepare(),this.sketchpad_run()},t.complete=function(){this.sketchpad_complete(),"yes"==this.vars.reset_variables&&this.experiment.reset_feedback()},osweb.feedback=osweb.promoteClass(e,"sketchpad")}();
!function(){function s(s,e,o){this.sampler_constructor(s,e,o)}var e=osweb.extendClass(s,osweb.sampler);e.description="A basic sound synthesizer",osweb.synth=osweb.promoteClass(s,"sampler")}();
!function(){function t(t,i,e){this.item_constructor(t,i,e),this._duration=-1}var i=osweb.extendClass(t,osweb.item);i.description="Waits for a specified duration",i.reset=function(){this.vars.duration=1e3,this.vars.jitter=0,this.vars.jitter_mode="Uniform"},i.prepare=function(){this._duration=this.vars.duration,this.item_prepare()},i.run=function(){this.item_run(),this.set_item_onset(this.time()),this.sleep(this._duration)},osweb.advanced_delay=osweb.promoteClass(t,"item")}();
!function(){function t(t,s,i,e,r){this.item_constructor(s,t,i),this._form_text=!1,this.description=r,this.item_type=e}var s=osweb.extendClass(t,osweb.item);s.cols=[],s.description="A generic form plug-in",s.form=null,s.rows=[],s.reset=function(){this.vars.cols="2;2",this.vars.rows="2;2",this.vars.spacing=10,this.vars._theme="gray",this.vars.only_render="no",this.vars.timeout="infinite",this.vars.margins="50;50;50;50",this._variables=[],this._widgets=[]},s.parse_line=function(t){var s=this.syntax.split(t);1==this._form_text&&"__end__"!=s[0]&&(this.vars.form_text=this.vars.form_text+t.replace("\t","")),"widget"==s[0]?(s.shift(),this._widgets.push(s)):"__form_text__"==s[0]?(this.vars.form_text="",this._form_text=!0):"__end__"==s[0]&&(this._form_text=!1)},s.prepare=function(){this.item_prepare();var t=this.vars.cols.split(";"),s=this.vars.rows.split(";"),i=this.vars.margins.split(";");if("infinite"==this.vars.timeout)var e=null;else var e=this.vars.timeout;this.form=new osweb.form(this.experiment,t,s,this.vars.spacing,i,this.vars._theme,this,e,"yes"==this.vars.form_clicks);for(var r=0;r<this._widgets.length;r++){this.focus_widget=null;var o={},n=[];if(n.push(this.form),this._widgets[r].length>5)for(var h=5;h<this._widgets[r].length;h++){var a=String(this._widgets[r][h]).substr(0,String(this._widgets[r][h]).indexOf("=")),_=String(this._widgets[r][h]).substring(String(this._widgets[r][h]).indexOf("=")+1,String(this._widgets[r][h]).length);o[a]=osweb.syntax.remove_quotes(_),o[a]=osweb.syntax.eval_text(o[a],this.vars),n.push(osweb.syntax.remove_quotes(_))}var f=this._widgets[r][4],l=this._widgets[r][0],m=this._widgets[r][1],d=this._widgets[r][2],g=this._widgets[r][3];try{var w=osweb.newWidgetClass(f,this.form,o)}catch(c){osweb.debug.addError("Failed to create widget "+f+", error:"+c)}this.form.set_widget(w,[l,m],d,g),1==focus&&(null!=this.focus_widget?osweb.debug.addError("Osweb error: You can only specify one focus widget"):this.focus_widget=w)}},s.run=function(){this.item_run(),this.form._parentform.style.width=osweb.runner._canvas.width,this.form._parentform.style.height=osweb.runner._canvas.height,this.form._parentform.style.background=this.experiment.vars.background,osweb.runner._canvas.style.display="none",this.form._parentform.style.display="block",this.form._form.style.display="block"},s.complete=function(){this.form._parentform.style.display="none",this.form._form.style.display="none",osweb.runner._canvas.style.display="inline",this._status=osweb.constants.STATUS_FINALIZE,this.item_complete()},osweb.form_base=osweb.promoteClass(t,"item")}();
!function(){function o(o,s,e){this.form_base_constructor(s,o,e,"form_consent","A simple consent form")}var s=osweb.extendClass(o,osweb.form_base);s.description="A simple consent form",s.run=function(){this.form_base_run()},s.complete=function(){this.form_base_complete()},osweb.form_consent=osweb.promoteClass(o,"form_base")}();
!function(){function e(e,i,o){this.item_constructor(e,i,o)}var i=osweb.extendClass(e,osweb.item);i.description="A simple multiple choice item",osweb.form_multiple_choice=osweb.promoteClass(e,"item")}();
!function(){function o(o,s,e){this.form_base_constructor(s,o,e,"form_text_display","A simple text display form")}var s=osweb.extendClass(o,osweb.form_base);s.description="A simple text display form",s.run=function(){this.form_base_run()},s.complete=function(){this.form_base_complete()},osweb.form_text_display=osweb.promoteClass(o,"form_base")}();
!function(){function o(o,s,e){this.form_base_constructor(o,s,e)}var s=osweb.extendClass(o,osweb.form_base);s.description="A simple text input form",osweb.form_text_input=osweb.promoteClass(o,"form_base")}();
!function(){function e(e,o,s){this.form_base_constructor(e,o,s)}var o=osweb.extendClass(e,osweb.form_base);o.description="A simple text display form",osweb.form_text_render=osweb.promoteClass(e,"form_base")}();
!function(){function e(e,s,i){this.generic_response_constructor(e,s,i),this._script_executed=!1}var s=osweb.extendClass(e,osweb.generic_response);s.description="A video player",s.prepare=function(){this._video=osweb.pool[this.vars.get("video_src")],this._video_player=new osweb.video_backend(this.experiment,this._video),""!==this.vars.event_handler&&(this._video_player._script=osweb.parser._prepare(this.vars.event_handler)),this._video_player._event_handler_always="after every frame"==this.vars.event_handler_trigger,this._video_player.audio="yes"==this.vars.get("playaudio"),this._video_player.full_screen="yes"==this.vars.get("resizeVideo"),this.generic_response_prepare()},s.run=function(){this.set_item_onset(),this.set_sri(),this._video_player.play(),this.process_response()},s.complete=function(){0==this._script_executed?(this._video_player.stop(),null!==this._video_player._script&&"on keypress"==this.vars.get("event_handler_trigger")?(this._script_executed=!0,osweb.parser._run(this,this._video_player._script)):this.generic_response_complete()):this.generic_response_complete()},s.update=function(){this._video_player._update_video_canvas()},osweb.media_player_vlc=osweb.promoteClass(e,"generic_response")}();
!function(){function t(t,e,o){this.item_constructor(t,e,o)}var e=osweb.extendClass(t,osweb.item);e.description="A simple notepad to document your experiment. This plug-in does nothing.",e.note="",e.run=function(){this.item_run(),this.complete()},e.complete=function(){this._status=osweb.constants.STATUS_FINALIZE,this.item_complete()},osweb.notepad=osweb.promoteClass(t,"item")}();
!function(){function t(t,e,o){this.item_constructor(t,e,o)}var e=osweb.extendClass(t,osweb.item);e.description="Optionally repeat a cycle from a loop",e.prepare=function(){this._condition=osweb.syntax.compile_cond(this.vars.get("condition")),this.item_prepare()},e.run=function(){this.item_run(),this._status!=osweb.constants.STATUS_FINALIZE&&(1==osweb.python_workspace._eval(this._condition)&&(this.experiment.vars.repeat_cycle=1),this.complete())},e.complete=function(){this._status=osweb.constants.STATUS_FINALIZE,this.item_complete()},osweb.repeat_cycle=osweb.promoteClass(t,"item")}();
!function(){function e(e,t,s){this.item_constructor(e,t,s)}var t=osweb.extendClass(e,osweb.item);t.description='Resets the feedback variables, such as "avg_rt" and "acc"',t.run=function(){this.item_run(),this._status!=osweb.constants.STATUS_FINALIZE&&(this.experiment.reset_feedback(),this.complete())},t.complete=function(){this._status=osweb.constants.STATUS_FINALIZE,this.item_complete()},osweb.reset_feedback=osweb.promoteClass(e,"item")}();
!function(){function e(e,s,t){this.mouse_response_constructor(e,s,t)}var s=osweb.extendClass(e,osweb.mouse_response);s.description="A grid-based response item, convenient for touch screens",s.reset=function(){this.mouse_response_reset(),this.vars.set("allowed_responses",null),this.vars._ncol=2,this.vars._nrow=1},s.prepare=function(){this.experiment.vars.correct=-1,this.mouse_response_prepare()},s.process_response_mouseclick=function(e){this.experiment._start_response_interval=this.sri,this.experiment._end_response_interval=e.rtTime,this.experiment.vars.response=e.resp,this.synonyms=this._mouse.synonyms(this.experiment.vars.response),this.experiment.vars.cursor_x=e.event.clientX,this.experiment.vars.cursor_y=e.event.clientY;var s=osweb.runner._canvas.getBoundingClientRect();"yes"==this.experiment.vars.uniform_coordinates?(this._x=e.event.clientX+this.experiment.vars.width/2,this._y=e.event.clientY+this.experiment.vars.height/2):(this._x=e.event.clientX-s.left,this._y=e.event.clientY-s.top),this.col=Math.floor(this._x/(this.experiment.vars.width/this.vars._ncol)),this.row=Math.floor(this._y/(this.experiment.vars.height/this.vars._nrow)),this.cell=this.row*this.vars._ncol+this.col+1,this.experiment.vars.response=this.cell,this.synonyms=[String(this.experiment.vars.response)],this.response_bookkeeping()},osweb.touch_response=osweb.promoteClass(e,"mouse_response")}();
!function(){function e(e,t,s){this.canvas=e.canvas,this.defaults=s,this.defaults.show_if="always",this.defaults.z_index=0,this.experiment=e.experiment,this.fix_coordinates="yes"==e.vars.uniform_coordinates,this.name=e.name,this.only_keywords=!1,this.pool=e.experiment.pool,this.sketchpad=e,this.syntax=e.syntax,this.vars=e.vars,this._properties=null,this.from_string(t)}var t=e.prototype;t.defaults={},t.fix_coordinates=!0,t.only_keywords=!1,t.properties={},t.sketchpad=null,t.vars=null,t.from_string=function(e){var t=osweb.syntax.parse_cmd(e);this.properties={};for(var s=0;s<t.length;s++){var i=t[s].slice(0,t[s].indexOf("=")),r=t[s].slice(t[s].indexOf("=")+1,t[s].length),r=osweb.syntax.remove_quotes(r);this.properties[i]=r}},t.z_index=function(){return this.properties.z_index},t.eval_properties=function(){this._properties={};var e=this.experiment.vars.width/2,t=this.experiment.vars.height/2;for(var s in this.properties){var i=this.sketchpad.syntax.eval_text(this.properties[s]);"x"!=s&&"x1"!=s&&"x2"!=s||(i=Number(i)+e),"y"!=s&&"y1"!=s&&"y2"!=s||(i=Number(i)+t),this._properties[s]=i}},t.is_shown=function(){return this.experiment.python_workspace.self=this.sketchpad,this.experiment.python_workspace._eval(this.experiment.syntax.compile_cond(this.properties.show_if))},t.draw=function(){this.eval_properties()},osweb.base_element=e}();
!function(){function t(t,e){this.defaults={},this.defaults.arrow_body_length=.8,this.defaults.arrow_body_width=.5,this.defaults.arrow_head_width=30,this.defaults.fill=1,this.defaults.color=t.vars.get("foreground"),this.defaults.penwidth=1,this.defaults.x1=null,this.defaults.y1=null,this.defaults.x2=null,this.defaults.y2=null,this.base_element_constructor(t,e,this.defaults)}var e=osweb.extendClass(t,osweb.base_element);e.draw=function(){this.base_element_draw(),this.sketchpad.canvas.arrow(this._properties.x1,this._properties.y1,this._properties.x2,this._properties.y2,this._properties.color,this._properties.penwidth,this._properties.arrow_head_width,this._properties.arrow_body_width,this._properties.arrow_body_length,this._properties.fill)},osweb.arrow=osweb.promoteClass(t,"base_element")}();
!function(){function e(e,s){this.defaults={},this.defaults.color=e.vars.get("foreground"),this.defaults.fill=0,this.defaults.penwidth=1,this.defaults.x=null,this.defaults.y=null,this.defaults.r=null,this.base_element_constructor(e,s,this.defaults)}var s=osweb.extendClass(e,osweb.base_element);s.draw=function(){this.base_element_draw(),this.sketchpad.canvas.circle(this._properties.x,this._properties.y,this._properties.r,this._properties.fill,this._properties.color,this._properties.penwidth)},osweb.circle=osweb.promoteClass(e,"base_element")}();
!function(){function e(e,s){this.defaults={},this.defaults.fill=1,this.defaults.color=e.vars.get("foreground"),this.defaults.penwidth=1,this.defaults.x=null,this.defaults.y=null,this.defaults.w=null,this.defaults.h=null,this.base_element_constructor(e,s,this.defaults)}var s=osweb.extendClass(e,osweb.base_element);s.draw=function(){this.base_element_draw(),this.sketchpad.canvas.ellipse(Number(this._properties.x),Number(this._properties.y),Number(this._properties.w),Number(this._properties.h),this._properties.fill,this._properties.color,this._properties.penwidth)},osweb.ellipse=osweb.promoteClass(e,"base_element")}();
!function(){function e(e,s){this.defaults={},this.defaults.color=e.vars.get("foreground"),this.defaults.style="default",this.defaults.x=null,this.defaults.y=null,this.base_element_constructor(e,s,this.defaults)}var s=osweb.extendClass(e,osweb.base_element);s.draw=function(){this.base_element_draw(),this.sketchpad.canvas.fixdot(this._properties.x,this._properties.y,this._properties.color,this._properties.style)},osweb.fixdot=osweb.promoteClass(e,"base_element")}();
!function(){function e(e,s){this.defaults={},this.defaults.bgmode="avg",this.defaults.color1="white",this.defaults.color2="black",this.defaults.env="gaussian",this.defaults.freq=1,this.defaults.orient=0,this.defaults.phase=0,this.defaults.size=96,this.defaults.stdev=12,this.defaults.x=null,this.defaults.y=null,this.base_element_constructor(e,s,this.defaults)}var s=osweb.extendClass(e,osweb.base_element);s.draw=function(){this.base_element_draw(),this.sketchpad.canvas.gabor(this._properties.x,this._properties.y,this._properties.orient,this._properties.freq,this._properties.env,this._properties.size,this._properties.stdev,this._properties.phase,this._properties.color1,this._properties.color2,this._properties.bgmode)},osweb.gabor=osweb.promoteClass(e,"base_element")}();
!function(){function e(e,s){this.defaults={},this.defaults.center=1,this.defaults.file=null,this.defaults.scale=1,this.defaults.x=null,this.defaults.y=null,this._file=null,this.base_element_constructor(e,s,this.defaults)}var s=osweb.extendClass(e,osweb.base_element);s.draw=function(){this.base_element_draw(),this._file=osweb.pool[this._properties.file],this.sketchpad.canvas.image(this._file,this._properties.center,this._properties.x,this._properties.y,this._properties.scale)},osweb.image=osweb.promoteClass(e,"base_element")}();
!function(){function e(e,s){this.defaults={},this.defaults.color=e.vars.get("foreground"),this.defaults.penwidth=1,this.defaults.x1=null,this.defaults.y1=null,this.defaults.x2=null,this.defaults.y2=null,this.base_element_constructor(e,s,this.defaults)}var s=osweb.extendClass(e,osweb.base_element);s.draw=function(){this.base_element_draw(),this.sketchpad.canvas.line(this._properties.x1,this._properties.y1,this._properties.x2,this._properties.y2,this._properties.color,this._properties.penwidth)},osweb.line=osweb.promoteClass(e,"base_element")}();
!function(){function s(s,e){this.defaults={},this.defaults.color1="white",this.defaults.color2="black",this.defaults.env="gaussian",this.defaults.size=96,this.defaults.stdev=12,this.defaults.x=null,this.defaults.y=null,this.defaults.bgmode="avg",this.base_element_constructor(s,e,this.defaults)}var e=osweb.extendClass(s,osweb.base_element);e.draw=function(){this.base_element_draw(),this.sketchpad.canvas.noise(this._properties.x,this._properties.y,this._properties.env,this._properties.size,this._properties.stdev,this._properties.color1,this._properties.color2,this._properties.bgmode)},osweb.noise=osweb.promoteClass(s,"base_element")}();
!function(){function e(e,t){this.defaults={},this.defaults.fill=1,this.defaults.color=e.vars.get("foreground"),this.defaults.penwidth=1,this.defaults.x=null,this.defaults.y=null,this.defaults.w=null,this.defaults.h=null,this.base_element_constructor(e,t,this.defaults)}var t=osweb.extendClass(e,osweb.base_element);t.draw=function(){this.base_element_draw(),this.sketchpad.canvas.rect(this._properties.x,this._properties.y,this._properties.w,this._properties.h,this._properties.fill,this._properties.color,this._properties.penwidth)},osweb.rect=osweb.promoteClass(e,"base_element")}();
!function(){function t(t,e){this.defaults={},this.defaults.center=1,this.defaults.color=t.vars.get("foreground"),this.defaults.font_family=t.vars.get("font_family"),this.defaults.font_size=t.vars.get("font_size"),this.defaults.font_bold=t.vars.get("font_bold"),this.defaults.font_italic=t.vars.get("font_italic"),this.defaults.html="yes",this.defaults.text=null,this.defaults.x=null,this.defaults.y=null,this.base_element_constructor(t,e,this.defaults)}var e=osweb.extendClass(t,osweb.base_element);e.draw=function(){this.base_element_draw(),this.sketchpad.canvas.set_font(this._properties.font_family,this._properties.font_size,"yes"==this._properties.font_italic,"yes"==this._properties.font_bold,"yes"==this._properties.font_underline),this.sketchpad.canvas.text(this._properties.text,this._properties.center,this._properties.x,this._properties.y,this._properties.color,this._properties.html)},osweb.textline=osweb.promoteClass(t,"base_element")}();
!function(){function t(t,e,i,s,n,h,r,l,o){this.clicks=o,this.experiment=t,this.height=this.experiment.vars.height,this.item=null!=r?r:t,this.margins=n,this.spacing=s,this.span=[],this.timeout=l,this.widgets=[],this.width=this.experiment.vars.width;for(var a=0,m=0;m<e.length;m++)a+=Number(e[m]);this.cols=[];for(var m=0;m<e.length;m++)this.cols.push(Math.round(e[m]/a*100));for(var c=0,m=0;m<i.length;m++)c+=Number(i[m]);this.rows=[];for(var m=0;m<i.length;m++)this.rows.push(Math.round(i[m]/c*100));this._parentform=document.getElementById("osweb_form"),this._form=document.createElement("DIV"),this._form.style.height="100%",this._form.style.width="100%",this._form.style.display="none",this._table=document.createElement("TABLE"),this._table.style.padding=this.margins[0]+"px "+this.margins[1]+"px "+this.margins[2]+"px "+this.margins[3]+"px",this._table.style.height="100%",this._table.style.width="100%",this._table.style.fontStyle="yes"==this.experiment.vars.font_italic?"italic":"normal",this._table.style.fontWeight="yes"==this.experiment.vars.font_bold?"bold":"normal",this._table.style.fontFamily=this.experiment.vars.font_family,this._table.style.color=this.experiment.vars.foreground,this._table.style.fontSize=this.experiment.vars.font_size+"px";for(var m=0;m<this.rows.length;m++){var f=this._table.insertRow();f.style.height=this.rows[m]+"%";for(var d=0;d<this.cols.length;d++){var u=f.insertCell(d);u.style.width=this.cols[d]+"%",u.style.padding="5px"}}this._parentform.appendChild(this._form),this._form.appendChild(this._table)}var e=t.prototype;e.clicks=null,e.experiment=null,e.height=-1,e.item=null,e.spacing=null,e.timeout=-1,e.width=-1,e._exec=function(t){},e.timed_out=function(){},e.cell_index=function(t){},e.validate_geometry=function(){},e.get_cell=function(t){},e.get_rect=function(t){},e.render=function(){this.validate_geometry(),this.canvas.clear();for(var t in this.widgets)null!==t&&t.render();this.canvas.show()},e.set_widget=function(t,e,i,s){var n=this._table.rows[Number(e[1])],h=n.cells[Number(e[0])];Number(i)>1&&(h.colSpan=Number(i)),Number(s)>1&&(h.rowSpan=Number(s)),h.appendChild(t._element)},e.xy_to_index=function(t){},osweb.form=t}();
!function(){function n(n){this.focus=!1,this.form=n,this.rect=null,this.type="widget",this.vars=null}var t=n.prototype;t.form=null,t.focus=!1,t.rect=null,t.type="",t.vars=null,t.box_size=function(){return null},t.theme_engine=function(){return null},t.draw_frame=function(n,t){},t.on_mouse_click=function(n){},t.render=function(){},t.set_rect=function(n){},t.set_var=function(n,t){null==t&&(t=this.vars),null!=t&&this.form.experiment.vars.set(t,n)},osweb.widget=n}();
!function(){function t(t,e){this.widget_constructor(t),this._element=document.createElement("BUTTON"),this._element.style.width="100%",this._element.style.height="100%",this._element.textContent=e.text,this._element.style.fontStyle="yes"==this.form.experiment.vars.font_italic?"italic":"normal",this._element.style.fontWeight="yes"==this.form.experiment.vars.font_bold?"bold":"normal",this._element.style.fontFamily=this.form.experiment.vars.font_family,this._element.style.color=this.form.experiment.vars.foreground,this._element.style.fontSize=this.form.experiment.vars.font_size+"px",this._element.addEventListener("click",this.response.bind(this)),this.center="boolean"==typeof e.center&&e.center,this.frame="boolean"==typeof e.frame&&e.frame,this.tab_str="    ",this.type="button",this.x_pad=8,this.y_pad=8}var e=osweb.extendClass(t,osweb.widget);e.center=!1,e.frame=null,e.tab_str="",e.text="",e.x_pad=0,e.y_pad=0,e.response=function(t){console.log(this),this.form.item.complete()},e.draw_text=function(t,e){if(t=this.form.experiment.syntax.eval_text(t),t=safe_decode(t).replace("\t",this.tab_str),1==this.center)var s=this.rect.x+this.rect.w/2,i=this.rect.y+this.rect.h/2;else var s=this.rect.x+this.x_pad,i=this.rect.y+this.y_pad;var r=this.rect.w-2*this.x_pad;this.form.canvas.text(t,this.center,s,i,r,e)},e.render=function(){1==this.frame&&this.draw_frame(this.rect),this.draw_text(this.text)},osweb.button=osweb.promoteClass(t,"widget")}();
!function(){function e(e,t){this.widget_constructor(e),this._element=document.createElement("LABEL"),this._element_check=document.createElement("INPUT"),this._element_check.setAttribute("type","checkbox"),this._element.style.width="100%",this._element.style.height="100%",this._element.textContent=t.text,this._element.style.fontStyle="yes"==this.form.experiment.vars.font_italic?"italic":"normal",this._element.style.fontWeight="yes"==this.form.experiment.vars.font_bold?"bold":"normal",this._element.style.fontFamily=this.form.experiment.vars.font_family,this._element.style.color=this.form.experiment.vars.foreground,this._element.style.fontSize=this.form.experiment.vars.font_size+"px",this._element.appendChild(this._element_check),this._element.addEventListener("click",this.on_mouse_click.bind(this)),console.log("---"),console.log(t),this.click_accepts="undefined"!=typeof t.click_accepts&&t.click_accepts,this.group="undefined"==typeof t.group?null:t.group,this.type="checkbox",this["var"]="undefined"==typeof t["var"]?null:t["var"],this.checked="checked"!=typeof t.checked&&t.checked,this.set_var(this.checked)}var t=osweb.extendClass(e,osweb.widget);t.center=!1,t.frame=null,t.tab_str="",t.text="",t.x_pad=0,t.y_pad=0,t.on_mouse_click=function(e){console.log("checkbox clicked")},osweb.checkbox=osweb.promoteClass(e,"widget")}();
!function(){function t(t,e){this.widget_constructor(t),this._element=document.createElement("SPAN"),this._element.innerHTML=e.text,this.center="boolean"==typeof e.center&&e.center,this.frame="boolean"==typeof e.frame&&e.frame,this.tab_str="    ",this.type="label",this.x_pad=8,this.y_pad=8}var e=osweb.extendClass(t,osweb.widget);e.center=!1,e.frame=!1,e.tab_str="",e.text="",e.x_pad=0,e.y_pad=0,e.draw_text=function(t,e){if(t=this.form.experiment.syntax.eval_text(t),t=safe_decode(t).replace("\t",this.tab_str),1==this.center)var s=this.rect.x+this.rect.w/2,r=this.rect.y+this.rect.h/2;else var s=this.rect.x+this.x_pad,r=this.rect.y+this.y_pad;var i=this.rect.w-2*this.x_pad;this.form.canvas.text(t,this.center,s,r,i,e)},e.render=function(){1==this.frame&&this.draw_frame(this.rect),this.draw_text(this.text)},osweb.label=osweb.promoteClass(t,"widget")}();
!function(){function e(){throw"The class events cannot be instantiated!"}e._active=!1,e._caller=null,e._current_item=null,e._keyboard_mode=osweb.constants.PRESSES_ONLY,e._keyboard_event=null,e._mouse_mode=osweb.constants.PRESSES_ONLY,e._mouse_move=null,e._mouse_press=null,e._response_given=!1,e._response_type=-1,e._response_list=null,e._sound_ended=!1,e._timeout=-1,e._video_ended=!1,e.KEY_CODES=["","","","","","","help","","backspace","tab","","","clear","enter","enter_special","","shift","ctrl","alt","pause","caps","","","","","","","escape","","","","","space","page up","page down","end","home","left","up","right","down","select","print","execute","print screen","insert","delete","","0","1","2","3","4","5","6","7","8","9",":",";","<","=",">","?","@","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","left meta","right meta","menu","","","kp0","kp1","kp2","kp3","kp4","kp5","kp6","kp7","kp8","kp9","kp_multiply","kp_plus","","kp_minus","kp_period","kp_divide","f1","f2","f3","f4","f5","f6","f7","f8","f9","f10","f11","f12","","","","","","","","","","","","","","","","","","","","","numlock","scrollock","","","","","","","","","","","","","","","^","!",'"',"#","$","%","&","_","(",")","*","+","|","_","{","}","~","","","","","","","","","",";","=",",","-",".","/","`","","","","","","","","","","","","","","","","","","","","","","","","","","","[","\\","]","'","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],e.KEY_SCODES=["","","","","","","","","","","","","","","","","","","","pause","","","","","","","","","","","","","","","","","","","","","","","","","","","","",")","!","@","#","$","%","^","&","*","(","",":","","+","","","","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","y","z","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","_","","","","","","","","","","","","","","","<","",">","?","~","","","","","","","","","","","","","","","","","","","","","","","","","","","{","|","}",'"',"","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],e._initialize=function(){window.addEventListener("keydown",this._keyDown.bind(this),!1),window.addEventListener("keyup",this._keyUp.bind(this),!1),osweb.runner._canvas.addEventListener("mousedown",this._mouseDown.bind(this),!1),osweb.runner._canvas.addEventListener("mousemove",this._mouseMove.bind(this),!1),osweb.runner._canvas.addEventListener("mouseup",this._mouseUp.bind(this),!1),osweb.runner._canvas.addEventListener("contextmenu",this._mouseContext.bind(this),!1),createjs.Ticker.setInterval(15),createjs.Ticker.addEventListener("tick",this._tick.bind(this))},e._finalize=function(){createjs.Ticker.removeEventListener("tick"),osweb.runner._canvas.removeEventListener("contextmenu",this._mouseContext,!1),osweb.runner._canvas.removeEventListener("mousedown",this._mouseDown,!1),osweb.runner._canvas.removeEventListener("mousemove",this._mouseMove,!1),osweb.runner._canvas.removeEventListener("mouseup",this._mouseUp,!1),window.removeEventListener("keydown",this._keyDown,!1),window.removeEventListener("keyup",this._keyUp,!1)},e._run=function(e,t,s,n){this._caller=e,this._response_list=n,this._response_type=s,this._timeout=t,this._response_given=!1,this._sound_ended=!1,this._video_ended=!1,this._active=!0},e._update=function(){this._timeout===-1&&(this._response_given===!0||this._sound_ended===!0||this._video_ended===!0)||this._timeout>0&&(this._response_type===osweb.constants.RESPONSE_KEYBOARD||this._response_type===osweb.constants.RESPONSE_MOUSE)&&this._response_given===!0||this._timeout>0&&this._current_item.clock.time()-this._current_item.experiment.vars.get("time_"+this._current_item.name)>this._timeout?this._current_item._status=osweb.constants.STATUS_FINALIZE:this._current_item.update()},e._complete=function(){this._active=!1,osweb.item_stack.pop(),this._current_item.complete()},e._convertKeyCode=function(e){var t="";return t=e.shiftKey===!0&&16!==e.keyCode?this.KEY_SCODES[e.keyCode]:e.shiftKey===!0&&16===e.keyCode?1==e.location?"lshift":"rshift":e.ctrlKey===!0&&17===e.keyCode?1==e.location?"lctrl":"rctrl":e.altKey===!0&&18===e.keyCode?1==e.location?"lalt":"ralt":this.KEY_CODES[e.keyCode]},e._keyDown=function(e){this.keyboard_event=e,this._keyboard_mode!==osweb.constants.PRESSES_ONLY&&this._keyboard_mode!==osweb.constants.PRESSES_AND_RELEASES||this._processKeyboardEvent(e,1)},e._keyUp=function(e){this._keyboard_mode!==osweb.constants.RELEASES_ONLY&&this._keyboard_mode!==osweb.constants.PRESSES_AND_RELEASES||this._processKeyboardEvent(e,0)},e._processKeyboardEvent=function(e,t){var s={event:e,rtTime:osweb.runner.experiment.clock.time(),state:t,type:osweb.constants.RESPONSE_KEYBOARD};s.resp=this._convertKeyCode(e),this._response_type===osweb.constants.RESPONSE_KEYBOARD&&(null===this._response_list||this._response_list.indexOf(s.resp)>=0)&&(null!==this._current_item&&this._current_item.update_response(s),this._response_given=!0)},e._mouseContext=function(e){return e.preventDefault(),!1},e._mouseDown=function(e){this._mouse_press=e,this._mouse_mode!==osweb.constants.PRESSES_ONLY&&this._mouse_mode!==osweb.constants.PRESSES_AND_RELEASES||this._processMouseEvent(e,1)},e._mouseMove=function(e){this._mouse_move={event:e,rtTime:osweb.runner.experiment.clock.time()}},e._mouseUp=function(e){this._mouse_mode!==osweb.constants.RELEASES_ONLY&&this._mouse_mode!==osweb.constants.PRESSES_AND_RELEASES||this._processMouseEvent(e,0)},e._processMouseEvent=function(e,t){var s={event:e,rtTime:osweb.runner.experiment.clock.time(),state:t,type:osweb.constants.RESPONSE_MOUSE};s.resp=String(e.button+1),this._response_type===osweb.constants.RESPONSE_MOUSE&&(null===this._response_list||this._response_list.indexOf(s.resp)>=0)&&(null!==this._current_item&&this._current_item.update_response(s),this._response_given=!0)},e._audioEnded=function(){osweb.events._sound_ended=!0},e._videoEnded=function(){osweb.events._video_ended=!0},e._videoPlay=function(e){},e._tick=function(t){if(null!==this._current_item&&this._active===!0)switch(this._current_item._status){case osweb.constants.STATUS_FINALIZE:e._complete();break;default:e._update()}},osweb.events=e}();
!function(){function e(){throw"The class parameters cannot be instantiated!"}e._itemCounter=0,e._parameters=new Array,e.displaySummary=!1,e.useDefaultValues=!1,e._initialize=function(){var e={dataType:"0",defaultValue:"0",name:"subject_nr",prompt:"Please enter the subject number",promptEnabled:!0};this._parameters.push(e)},e._processParameters=function(){this._itemCounter<this._parameters.length?0==this.useDefaultValues?this._processParameter(this._parameters[this._itemCounter]):this._transferParameters():1==this.displaySummary?this._showParameters():this._transferParameters()},e._processParameter=function(e){1==e.promptEnabled?(this._showDialog(e.dataType),""==e.response?document.getElementById("qpdialoginput").value=e.defaultValue:document.getElementById("qpdialoginput").value=e.defaultValue,document.getElementById("dialogboxhead").innerHTML=e.prompt,document.getElementById("qpbuttonyes").onclick=function(){e.response=document.getElementById("qpdialoginput").value,this._hideDialog(),this._itemCounter++,this._processParameters()}.bind(this),document.getElementById("qpbuttonno").onclick=function(){this._hideDialog(),osweb.runner._exit()}.bind(this)):(e.response=e.defaultValue,this._itemCounter++,this._processParameters())},e._showParameters=function(){document.getElementById("dialogboxhead").innerHTML="Summary of startup info",document.getElementById("qpbuttonyes").onclick=function(){this._hideDialog(),this._transferParameters()}.bind(this),document.getElementById("qpbuttonno").onclick=function(){this._hideDialog(),this._itemCounter=0,this._processParameters()}.bind(this),document.getElementById("qpbuttoncancel").onclick=function(){this._hideDialog(),osweb.runner._exit()}.bind(this);for(var e="",t=0;t<this._parameters.length;t++)0!=this._parameters[t].enabled&&0!=this._parameters[t].promptEnabled&&(e=e+this._parameters[t].name+": "+this._parameters[t].response+"\r\n");document.getElementById("qpdialogtextarea").innerHTML=e},e._transferParameters=function(){for(var e=0;e<this._parameters.length;e++)osweb.runner.experiment.vars.set(this._parameters[e].name,this._parameters[e].response);osweb.runner._prepareStartScreen()},e._showDialog=function(e){var t=document.getElementById("dialogoverlay"),n=document.getElementById("dialogbox");switch(t.style.display="block",t.style.height=window.innerHeight+"px",n.style.left=window.innerWidth/2-200+"px",n.style.top="200px",n.style.display="inline",e){case"0":document.getElementById("dialogboxbody").innerHTML='<input id="qpdialoginput"></input>',document.getElementById("dialogboxfoot").innerHTML='<button id="qpbuttonyes">Ok</button><button id="qpbuttonno">Cancel</button>',document.getElementById("qpdialoginput").focus();break;case"1":document.getElementById("dialogboxbody").innerHTML='<input id="qpdialoginput"></input>',document.getElementById("dialogboxfoot").innerHTML='<button id="qpbuttonyes">Ok</button><button id="qpbuttonno">Cancel</button>',document.getElementById("qpdialoginput").focus();break;case"2":document.getElementById("dialogboxbody").innerHTML='<input id="qpdialoginput"></input>',document.getElementById("dialogboxfoot").innerHTML='<button id="qpbuttonyes">Ok</button><button id="qpbuttonno">Cancel</button>',document.getElementById("qpdialoginput").focus();break;case"3":document.getElementById("dialogboxbody").innerHTML='<textarea id="qpdialogtextarea"></textarea>',document.getElementById("dialogboxfoot").innerHTML='<button id="qpbuttonyes">Yes</button><button id="qpbuttonno">No</button><button id="qpbuttoncancel">Cancel</button>',document.getElementById("qpdialogtextarea").focus()}},e._hideDialog=function(){dialogoverlay.style.display="none",dialogbox.style.display="none",document.getElementById("dialogboxbody").innerHTML="",document.getElementById("dialogboxfoot").innerHTML=""},osweb.parameters=e}();
!function(){function e(){throw"The class parser cannot be instantiated!"}e._ast_tree=null,e._current_node=null,e._inline_script=null,e._status=0,e._prepare=function(e){if(""===e)return null;var t=!1,n=filbert_loose.parse_dammit,r=!1;try{var s=e,_=n(s,{locations:t,ranges:r});return _}catch(i){return console.log("error"),console.log(i.toString()),null}},e._set_return_value=function(e,t){for(var n=0;"undefined"!=typeof e["returnvalue"+String(n)];)n++;e["returnvalue"+String(n)]=t},e._node_binary_expression=function(){switch(this._current_node.status="undefined"==typeof this._current_node.status?0:this._current_node.status,this._current_node.status){case 0:this._current_node.status=1,this._current_node.right.parent=this._current_node,this._current_node=this._current_node.right,this._process_node();break;case 1:this._current_node.status=2,this._current_node.left.parent=this._current_node,this._current_node=this._current_node.left,this._process_node();break;case 2:var e,t;if("undefined"==typeof window[this._current_node.returnvalue0])var t=this._current_node.returnvalue0;else var t=window[this._current_node.returnvalue0];var e,t;if("undefined"==typeof window[this._current_node.returnvalue1])var e=this._current_node.returnvalue1;else var e=window[this._current_node.returnvalue1];switch(this._current_node.operator){case"-":this._set_return_value(this._current_node.parent,e-t)}this._current_node.status=3,this._current_node=this._current_node.parent,this._process_node()}},e._node_call_expression=function(){switch(this._current_node.arguments="undefined"==typeof this._current_node.arguments?[]:this._current_node.arguments,this._current_node.index="undefined"==typeof this._current_node.index?0:this._current_node.index,this._current_node.status="undefined"==typeof this._current_node.status?0:this._current_node.status,this._current_node.status){case 0:this._current_node.index<this._current_node.arguments.length?(this._current_node.index++,this._current_node.arguments[this._current_node.index-1].parent=this._current_node,this._current_node=this._current_node.arguments[this._current_node.index-1],this._process_node()):(this._current_node.status=1,this._process_node());break;case 1:this._current_node.status=2,this._current_node.callee.parent=this._current_node,this._current_node=this._current_node.callee,this._process_node();break;case 2:this._current_node.status=3;for(var e=[],t=0;t<this._current_node.arguments.length;t++)"undefined"!=typeof window[this._current_node["returnvalue"+String(t)]]?e.push(window[this._current_node["returnvalue"+String(t)]]):e.push(this._current_node["returnvalue"+String(t)]);var n=this._current_node["returnvalue"+String(this._current_node.arguments.length)],r=null;if("function"==n.type)r=window[n.obj].apply(null,e),this._current_node.parent["returnvalue"+String(this._current_node.arguments.length)]=r,this._process_node();else if("object"==n.type)"clock"==n.obj&&"sleep"==n.prop?window[n.obj][n.prop].apply(window[n.obj],e):(r=window[n.obj][n.prop](),this._current_node.parent["returnvalue"+String(this._current_node.arguments.length)]=r,this._process_node());else{switch(n){case"canvas":r=new osweb.canvas}this._current_node.parent["returnvalue"+String(this._current_node.arguments.length)]=r,this._process_node()}break;case 3:this._current_node.status=4,this._current_node=this._current_node.parent,this._process_node()}},e._node_expression_statement=function(){switch(this._current_node.status="undefined"==typeof this._current_node.status?0:this._current_node.status,this._current_node.status){case 0:this._current_node.status=1,this._current_node.expression.parent=this._current_node,this._current_node=this._current_node.expression,this._process_node();break;case 1:this._current_node.status=2,this._current_node=this._current_node.parent,this._process_node()}},e._node_identifier=function(){"undefined"==typeof window[this._current_node.name]&&(window[this._current_node.name]=null),this._set_return_value(this._current_node.parent,this._current_node.name),this._current_node=this._current_node.parent,this._process_node()},e._node_literal=function(){this._set_return_value(this._current_node.parent,this._current_node.value),this._current_node=this._current_node.parent,this._process_node()},e._node_member_expression=function(){switch(this._current_node.status="undefined"==typeof this._current_node.status?0:this._current_node.status,this._current_node.status){case 0:this._current_node.status=1,this._current_node.object.parent=this._current_node,this._current_node=this._current_node.object,this._process_node();break;case 1:this._current_node.status=2,this._current_node.property.parent=this._current_node,this._current_node=this._current_node.property,this._process_node();break;case 2:"object"==typeof this._current_node.returnvalue0?this._set_return_value(this._current_node.parent,{obj:this._current_node.returnvalue1,prop:null,type:"function"}):this._set_return_value(this._current_node.parent,{obj:this._current_node.returnvalue0,prop:this._current_node.returnvalue1,type:"object"}),this._current_node.status=3,this._current_node=this._current_node.parent,this._process_node()}},e._node_program=function(){switch(this._current_node.index="undefined"==typeof this._current_node.index?0:this._current_node.index,this._current_node.status="undefined"==typeof this._current_node.status?0:this._current_node.status,this._current_node.status){case 0:this._current_node.index<this._current_node.body.length?(this._current_node.index++,this._current_node.body[this._current_node.index-1].parent=this._current_node,this._current_node=this._current_node.body[this._current_node.index-1],this._process_node()):(this._current_node.status=1,this._process_node());break;case 1:this._current_node.status=2,this._status=2,null!=this._inline_script&&this._inline_script.complete()}},e._node_variable_declaration=function(){switch(this._current_node.index="undefined"==typeof this._current_node.index?0:this._current_node.index,this._current_node.status="undefined"==typeof this._current_node.status?0:this._current_node.status,this._current_node.status){case 0:this._current_node.index<this._current_node.declarations.length?(this._current_node.index++,this._current_node.declarations[this._current_node.index-1].parent=this._current_node,this._current_node=this._current_node.declarations[this._current_node.index-1],this._process_node()):(this._current_node.status=1,this._process_node());break;case 1:this._current_node.status=2,this._current_node=this._current_node.parent,this._process_node()}},e._node_variable_declarator=function(){switch(this._current_node.status="undefined"==typeof this._current_node.status?0:this._current_node.status,this._current_node.status){case 0:this._current_node.status=1,this._current_node.init.parent=this._current_node,this._current_node=this._current_node.init,this._process_node();break;case 1:this._current_node.status=2,this._current_node.id.parent=this._current_node,this._current_node=this._current_node.id,this._process_node();break;case 2:window[this._current_node.returnvalue1]=this._current_node.returnvalue0,this._current_node.status=3,this._current_node=this._current_node.parent,this._process_node()}},e._process_node=function(){switch(console.log("processing node"),console.log(this._current_node),this._current_node.type){case"BinaryExpression":this._node_binary_expression();break;case"CallExpression":this._node_call_expression();break;case"ExpressionStatement":this._node_expression_statement();break;case"Identifier":this._node_identifier();break;case"Literal":this._node_literal();break;case"MemberExpression":this._node_member_expression();break;case"Program":this._node_program();break;case"VariableDeclaration":this._node_variable_declaration();break;case"VariableDeclarator":this._node_variable_declarator()}},e._runstatement=function(e){return this._node_call_expression(e.expression)},e._run=function(e,t){this._inline_script=e,this._current_node=t,this._current_node.parent=null,this._status=1,osweb.parser._process_node()},osweb.parser=e}();
!function(){function e(){throw"The class session cannot be instantiated!"}e._initialize=function(){osweb.runner._updateIntroScreen(osweb.constants.MESSAGE_008),this._getSessionInformation()},e._getSessionInformation=function(){this._date=new Date,this._session={browser:{codename:navigator.appCodeName,name:navigator.appName,version:navigator.appVersion},date:{startdate:("0"+this._date.getDate()).slice(-2)+"-"+("0"+this._date.getMonth()).slice(-2)+"-"+("0"+this._date.getFullYear()).slice(-2),starttime:("0"+this._date.getHours()).slice(-2)+":"+("0"+this._date.getMinutes()).slice(-2)+":"+("0"+this._date.getSeconds()).slice(-2),startdateUTC:("0"+this._date.getUTCDate()).slice(-2)+"-"+("0"+this._date.getUTCMonth()).slice(-2)+"-"+("0"+this._date.getUTCFullYear()).slice(-2)},experiment:{debug:0,parameters:0,pilot:0,taskname:0,taskversion:0},screen:{availableHeight:screen.availHeight,availableWidth:screen.availWidth,colorDepth:screen.colorDepth,height:screen.height,outerheight:window.outerheight,outerwidth:window.outerwidth,pixelDepth:screen.pixelDepth,screenX:window.screenX,screenY:window.screenY,width:screen.width},system:{os:navigator.platform}}},osweb.session=e}();
!function(){function e(){throw"The class runner cannot be instantiated!"}console.log(osweb.VERSION_NAME+" - "+osweb.VERSION_NUMBER),e._canvas=null,e._qualtrics=null,e._stage=null,e.data=null,e.debug=!1,e.experiment=null,e.onFinished=null,e.screenIntro=!0,e.screenClick=!0,e.script=null,e.scriptID=0,e.scriptURL="",e.session=null,e._setupContent=function(e){"undefined"!=typeof e?(this._canvas="string"==typeof e?document.getElementById(e):e,this._stage=new createjs.Stage(this._canvas),this._stage.snapToPixelEnabled=!0,this._stage.regX=-.5,this._stage.regY=-.5,this._setupIntroScreen()):osweb.debug.addError(osweb.constants.ERROR_002)},e._setupContext=function(e){"undefined"!=typeof e?(this.debug="undefined"!=typeof e.debug&&e.debug,this.file="undefined"!=typeof e.file?e.file:null,this.onFinished="undefined"!=typeof e.onFinished?e.onFinished:null,this.screenClick="undefined"==typeof e.screenClick||e.screenClick,this.screenIntro="undefined"==typeof e.screenIntro||e.screenIntro,this.script="undefined"!=typeof e.script?e.script:null,this.scriptID="undefined"!=typeof e.scriptID?e.scriptID:0,this.scriptURL="undefined"!=typeof e.scriptURL?e.scriptURL:"",this.session="undefined"!=typeof e.session?e.session:null,null!==this.script?this._buildExperiment():null!==this.file?this._setupScriptFromFile():this._setupScriptFromDatabase()):osweb.debug.addError(osweb.constants.ERROR_003)},e._setupScriptFromFile=function(){"---"==this.file.substring(0,3)?this.script=String(this.file):GZip.loadlocal(this.file,function(e){var t=new TarGZ;t.parseTar(e.data.join("")),t.files.forEach(this.setupScriptFromFileResult.bind(this))}.bind(this),this.setupScriptFromFileProgress,this.setupScriptFromFileAlert),this._buildExperiment()},e.setupScriptFromFileAlert=function(){},e.setupScriptFromFileProgress=function(){},e.setupScriptFromFileResult=function(e){"script.opensesame"===e.filename?this.script=String(e.data):null!==e.data&&""!==e.data&&osweb.pool.add_from_local_source(e)},e._setupScriptFromDatabase=function(){if(this.scriptID>=0&&""!==this.scriptURL){var e=this.scriptURL+"/php/index.php?/ajax/group/get_status",t={group_id:99,task_number:this.scriptID};new Ajax.Request(e,{parameters:t,onCreate:function(e){var t=e.transport;t.setRequestHeader=t.setRequestHeader.wrap(function(e,t,i){return/^(accept|accept-language|content-language)$/i.test(t)?e(t,i):/^content-type$/i.test(t)&&/^(application\/x-www-form-urlencoded|multipart\/form-data|text\/plain)(;.+)?$/i.test(i)?e(t,i):void 0})},onSuccess:function(e){if(e.responseText){var t=JSON.parse(e.responseText);"1"===t.task_available?(this.script=t.data_available,this.files=t.file_available.split("\r\n"),osweb.pool.add_from_server_source(this.scriptURL+"/user/4/",this.files)):osweb.debug.addError(osweb.constants.ERROR_007)}else osweb.debug.addError(osweb.constants.ERROR_006)}.bind(this),onFailure:function(){osweb.debug.addError(osweb.constants.ERROR_005)}.bind(this)})}else osweb.debug.addError(osweb.constants.ERROR_004)},e._setupIntroScreen=function(){this.screenIntro===!0&&(this._introScreen=new createjs.Shape,this._introScreen.graphics.beginFill("#000000").drawRect(0,0,this._stage.width,this._stage.height),this._introLine=new createjs.Shape,this._introLine.graphics.beginFill("#AAAAAA").drawRect(200,155,400,1),this._introText1=new createjs.Text("OS","24px bold Times","#FF0000"),this._introText1.x=200,this._introText1.y=135,this._introText2=new createjs.Text(osweb.constants.MESSAGE_002+osweb.VERSION_NUMBER,"14px Arial","#FFFFFF"),this._introText2.x=231,this._introText2.y=142,this._introText3=new createjs.Text(osweb.constants.MESSAGE_003,"12px Arial","#FFFFFF"),this._introText3.x=200,this._introText3.y=168,this._stage.addChild(this._introScreen,this._introLine,this._introText1,this._introText2,this._introText3),this._stage.update())},e._clearIntroScreen=function(){this.screenIntro===!0&&(this._stage.removeChild(this._introScreen,this._introLine,this._introText1,this._introText2,this._introText3),this._stage.update())},e._updateIntroScreen=function(e){this.screenIntro===!0&&(this._introText3.text=e,this._stage.update())},e._buildExperiment=function(){this.experiment=new osweb.experiment(null,"test",this.script),window.items=osweb.item_store,window.pool=osweb.file_pole_store,window.vars=this.experiment.vars,this._prepare()},e._prepare=function(){this._updateIntroScreen(osweb.constants.MESSAGE_004),osweb.parameters._initialize(),osweb.functions._initialize(),osweb.session._initialize(),this._prepareParameters()},e._prepareParameters=function(){this._updateIntroScreen(osweb.constants.MESSAGE_005),osweb.parameters._parameters.length>0?osweb.parameters._processParameters():this._prepareStartScreen()},e._prepareStartScreen=function(){if(this.screenClick===!0){this._updateIntroScreen(osweb.constants.MESSAGE_006);var e=function(t){this._canvas.removeEventListener("click",e),this._clearIntroScreen(),this._initialize()}.bind(this);this._canvas.addEventListener("click",e,!1)}else this._clearIntroScreen(),this._initialize()},e._initialize=function(){osweb.debug._initialize(),osweb.events._initialize(),this.experiment.prepare(),this.experiment.run()},e._finalize=function(){osweb.events._finalize(),osweb.debug._finalize(),this._exit()},e._exit=function(){this._stage.clear(),this._stage.canvas.style.cursor="default",this.onFinished&&this.onFinished(this.data,osweb.session._session)},e.run=function(e,t){this._setupContent(e),this._setupContext(t)},osweb.runner=e}();
//# sourceMappingURL=data:application/json;base64,
